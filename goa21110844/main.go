// Code generated by goa v3.5.2, DO NOT EDIT.
//
// Code Generator
//
// Command:
// goa

package main

import (
	_ "api_crud/design"
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"

	"goa.design/goa/v3/codegen"
	"goa.design/goa/v3/codegen/generator"
	"goa.design/goa/v3/eval"
	goa "goa.design/goa/v3/pkg"
)

func main() {
	var (
		out     = flag.String("output", "", "")
		version = flag.String("version", "", "")
		cmdl    = flag.String("cmd", "", "")
		ver     int
	)
	{
		flag.Parse()
		if *out == "" {
			fail("missing output flag")
		}
		if *version == "" {
			fail("missing version flag")
		}
		if *cmdl == "" {
			fail("missing cmd flag")
		}
		v, err := strconv.Atoi(*version)
		if err != nil {
			fail("invalid version %s", *version)
		}
		ver = v
	}

	if ver > goa.Major {
		fail("cannot run goa %s on design using goa v%s\n", goa.Version(), *version)
	}
	if err := eval.Context.Errors; err != nil {
		fail(err.Error())
	}
	if err := eval.RunDSL(); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/http"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/openapi"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/bo_products"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/o_auth"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/users"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/products"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/jwt_token"); err != nil {
		fail(err.Error())
	}
	if err := os.RemoveAll("gen/bo_users"); err != nil {
		fail(err.Error())
	}
	codegen.DesignVersion = ver
	outputs, err := generator.Generate(*out, "gen")
	if err != nil {
		fail(err.Error())
	}

	fmt.Println(strings.Join(outputs, "\n"))
}

func fail(msg string, vals ...interface{}) {
	fmt.Fprintf(os.Stderr, msg, vals...)
	os.Exit(1)
}
