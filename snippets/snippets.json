{
    "Generate CRUD SQL": {
        "prefix": "goa-sql",
        "body": [
            "-- name: GetAll${2:name} :many",
            "SELECT * FROM ${1:table}",
            "WHERE deleted_at IS NULL;",
            "",
            "-- name: Get${2:name}ByID :one",
            "SELECT * FROM ${1:table}",
            "WHERE id = 1",
            "AND deleted_at IS NULL",
            "LIMIT 1;",
            "",
            "-- name: Delete${2:name}ByID :exec",
            "UPDATE",
            "\t${1:table}",
            "SET",
            "\tdeleted_at = NOW()",
            "WHERE ",
            "\tid = 1;",
            "",
            "-- name: Update${2:name} :exec",
            "UPDATE ",
            "\t${1:table}",
            "SET",
            "\tupdated_at = NOW()",
            "WHERE",
            "\tid = 1",
            "RETURNING *;",
            "",
            "-- name: Insert${2:name} :exec",
            "INSERT INTO ${1:table} () ",
            "VALUES ()",
            "RETURNING *;"
        ],
        "description": "Generate CRUD SQL"
    },
    "Create Design GOA": {
		"prefix": "goa-api",
		"body": [
			"package design",
			"",
			"import . \"goa.design/goa/v3/dsl\"",
			"",
			"// Service describes a service",
			"var _ = Service(\"${1:many}\", func() {",
			"\tDescription(\"${1:many} of the api\")",
			"",
			"\tError(\"timeout\", func() { // Use default error type",
			"\t\tTimeout()",
			"\t})",
			"",
			"\tSecurity(OAuth2, JWTAuth)",
			"",
			"\tError(\"unknown_error\", unknownError, \"Error not identified (500)\")",
			"",
			"\tHTTP(func() {",
			"\t\tPath(\"/web\")",
			"\t\tHeader(\"oauth:Authorization\", String, \"OAuth token\", func() {",
			"\t\t\tPattern(\"^Bearer [^ ]+\\$\")",
			"\t\t})",
			"\t\tHeader(\"jwtToken:jwtToken\", String, \"Jwt token\", func() {",
			"\t\t\tPattern(\"^Bearer [^ ]+\\$\")",
			"\t\t})",
			"\t\tResponse(\"unknown_error\", StatusInternalServerError)",
			"\t})",
			"",
			"\tMethod(\"getAll${1:many}\", func() {",
			"\t\tDescription(\"Get All ${1:many}\")",
			"\t\tPayload(func() {",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tGET(\"/${1:many}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${1:many}\", ArrayOf(res${2:one}), \"All ${1:many} by category\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${1:many}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"delete${2:one}\", func() {",
			"\t\tDescription(\"Delete one ${2:one} by ID\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"id\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tDELETE(\"/${2:one}/remove/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"create${2:one}\", func() {",
			"\t\tDescription(\"Create one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"${2:one}\", payload${2:one})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"${2:one}\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tPOST(\"/${2:one}/add\")",
			"\t\t\tResponse(StatusCreated)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"update${2:one}\", func() {",
			"\t\tDescription(\"Update one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tAttribute(\"${2:one}\", payload${2:one})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"${2:one}\", \"id\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tPUT(\"/${2:one}/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an Object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"get${2:one}\", func() {",
			"\t\tDescription(\"Get one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tDescription(\"Unique ID of the ${2:one}\")",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"id\")",
			"\t\t})",
			"",
			"\t\tHTTP(func() {",
			"\t\t\tGET(\"/${2:one}/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"})",
			"",
			"var res${2:one} = Type(\"res${2:one}\", func() {",
			"\tAttribute(\"id\", String, func() {",
			"\t\tFormat(FormatUUID)",
			"\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t})",
			"\tRequired(\"id\")",
			"})",
			"",
			"var payload${2:one} = Type(\"payload${2:one}\", func() {",
			"\tAttribute(\"name\", String, func() {",
			"\t\tExample(\"Guillaume\")",
			"\t\tMinLength(3)",
			"\t})",
			"\tRequired(\"name\")",
			"})"
		],
		"description": "Create Design GOA"
	},
	"ExecTx": {
		"prefix": "goa-exec",
		"body": [
			"err = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\t",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_${1:error}\", err)",
			"\t}"
		],
		"description": "ExecTx"
	}
}