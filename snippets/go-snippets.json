{
    "Create Design GOA": {
		"prefix": "goa-api",
		"body": [
			"package design",
			"",
			"import . \"goa.design/goa/v3/dsl\"",
			"",
			"// Service describes a service",
			"var _ = Service(\"${1:many}\", func() {",
			"\tDescription(\"${1:many} of the api\")",
			"",
			"\tError(\"timeout\", func() { // Use default error type",
			"\t\tTimeout()",
			"\t})",
			"",
			"\tSecurity(OAuth2, JWTAuth)",
			"",
			"\tError(\"unknown_error\", unknownError, \"Error not identified (500)\")",
			"",
			"\tHTTP(func() {",
			"\t\tPath(\"/web\")",
			"\t\tHeader(\"oauth:Authorization\", String, \"OAuth token\", func() {",
			"\t\t\tPattern(\"^Bearer [^ ]+\\$\")",
			"\t\t})",
			"\t\tHeader(\"jwtToken:jwtToken\", String, \"Jwt token\", func() {",
			"\t\t\tPattern(\"^Bearer [^ ]+\\$\")",
			"\t\t})",
			"\t\tResponse(\"unknown_error\", StatusInternalServerError)",
			"\t})",
			"",
			"\tMethod(\"getAll${1:many}\", func() {",
			"\t\tDescription(\"Get All ${1:many}\")",
			"\t\tPayload(func() {",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tGET(\"/${1:many}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${1:many}\", ArrayOf(res${2:one}), \"All ${1:many} by category\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${1:many}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"delete${2:one}\", func() {",
			"\t\tDescription(\"Delete one ${2:one} by ID\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"id\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tDELETE(\"/${2:one}/remove/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"create${2:one}\", func() {",
			"\t\tDescription(\"Create one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"${2:one}\", payload${2:one})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"${2:one}\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tPOST(\"/${2:one}/add\")",
			"\t\t\tResponse(StatusCreated)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"update${2:one}\", func() {",
			"\t\tDescription(\"Update one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tAttribute(\"${2:one}\", payload${2:one})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"${2:one}\", \"id\")",
			"\t\t})",
			"\t\tHTTP(func() {",
			"\t\t\tPUT(\"/${2:one}/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an Object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"",
			"\tMethod(\"get${2:one}\", func() {",
			"\t\tDescription(\"Get one ${2:one}\")",
			"\t\tPayload(func() {",
			"\t\t\tAttribute(\"id\", String, func() {",
			"\t\t\t\tFormat(FormatUUID)",
			"\t\t\t\tDescription(\"Unique ID of the ${2:one}\")",
			"\t\t\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t\t\t})",
			"\t\t\tTokenField(1, \"jwtToken\", String, func() {",
			"\t\t\t\tDescription(\"JWT used for authentication after Signin/Signup\")",
			"\t\t\t})",
			"\t\t\tAccessTokenField(2, \"oauth\", String, func() {",
			"\t\t\t\tDescription(\"Use to generate Oauth with /authorization\")",
			"\t\t\t})",
			"\t\t\tRequired(\"id\")",
			"\t\t})",
			"",
			"\t\tHTTP(func() {",
			"\t\t\tGET(\"/${2:one}/{id}\")",
			"\t\t\tResponse(StatusOK)",
			"\t\t})",
			"\t\tResult(func() {",
			"\t\t\tAttribute(\"${2:one}\", res${2:one}, \"Result is an object\")",
			"\t\t\tAttribute(\"success\", Boolean)",
			"\t\t\tRequired(\"${2:one}\", \"success\")",
			"\t\t})",
			"\t})",
			"})",
			"",
			"var res${2:one} = Type(\"res${2:one}\", func() {",
			"\tAttribute(\"id\", String, func() {",
			"\t\tFormat(FormatUUID)",
			"\t\tExample(\"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\")",
			"\t})",
			"\tRequired(\"id\")",
			"})",
			"",
			"var payload${2:one} = Type(\"payload${2:one}\", func() {",
			"\tAttribute(\"name\", String, func() {",
			"\t\tExample(\"Guillaume\")",
			"\t\tMinLength(3)",
			"\t})",
			"\tRequired(\"name\")",
			"})"
		],
		"description": "Create Design GOA"
	},
	"ExecTx": {
		"prefix": "goa-exec",
		"body": [
			"err = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\t",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_${1:error}\", err)",
			"\t}"
		],
		"description": "ExecTx"
	},
	"Generate GET ALL method": {
		"prefix": "goa-gets",
		"body": [
			"err = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\tuS, err := q.GetAll${4:TitleS}(ctx)",
			"\t\tif err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_GET_ALL_${1:UppercaseS} %v\", err)",
			"\t\t}",
			"\t\tvar all${4:TitleS} []*${2:Lowercase}.Res${3:Title}",
			"\t\tfor _, v := range uS {",
			"\t\t\tall${4:TitleS} = append(all${4:TitleS}, &${2:Lowercase}.Res${3:Title}{",
			"\t\t\t\tID:        v.ID.String(),",
			"\t\t\t})",
			"\t\t}",
			"\t\tres = &${2:Lowercase}.GetAll${4:Lowercase}Result{",
			"\t\t\t${4:Titles}:   all${4:Titles},",
			"\t\t\tSuccess: true,",
			"\t\t}",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_GET_ALL_${1:UppercaseS}\", err)",
			"\t}",
			"\treturn res, nil"
		],
		"description": "Generate GET ALL method"
	},
	"Generate DELETE method": {
		"prefix": "goa-delete",
		"body": [
			"\terr = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\tif err := q.Delete${2:Title}ByID(ctx, uuid.MustParse(p.ID)); err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_DELETE_${1:Uppercase}_BY_ID %v\", err)",
			"\t\t}",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_DELETE_${1:Uppercase}\", err)",
			"\t}",
			"\treturn &${3:Lowercase}.Delete${2:Title}Result{Success: true}, nil"
		],
		"description": "Generate DELETE method"
	},
	"Generate CREATE method": {
		"prefix": "goa-create",
		"body": [
			"err = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\targ := db.Create${1:Title}Params{",
			"\t\t\tFirstname: p.${1:Title}.Firstname,",
			"\t\t}",
			"\t\tcreate${1:Title}, err := q.Create${1:Title}(ctx, arg)",
			"\t\tif err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_CREATE_${3:Uppercase} %v\", err)",
			"\t\t}",
			"\t\tNew${2:TitleS}, err := q.Get${1:Title}ByID(ctx, create${1:Title}.ID)",
			"\t\tif err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_GET_${3:Uppercase}_BY_ID %v\", err)",
			"\t\t}",
			"\t\tres = &${4:LowercaseS}.Create${1:Title}Result{",
			"\t\t\t${1:Title}: &${4:LowercaseS}.Res${1:Title}{",
			"\t\t\t\tFirstname: &New${2:TitleS}.Firstname,",
			"\t\t\t},",
			"\t\t\tSuccess: true,",
			"\t\t}",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_CREATE_${3:Uppercase}\", err)",
			"\t}",
			"\treturn res, nil"
		],
		"description": "Generate CREATE method"
	},
	"Generate UPDATE method": {
		"prefix": "goa-update",
		"body": [
			"\terr = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\targ := db.Update${2:Title}Params{",
			"\t\t\tID:        uuid.MustParse(p.ID),",
			"\t\t}",
			"\t\tif err := q.Update${2:Title}(ctx, arg); err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_UPDATE_${1:Uppercase} %v\", err)",
			"\t\t}",
			"\t\tNew${4:UppercaseS}, err := q.Get${2:Title}ByID(ctx, uuid.MustParse(p.ID))",
			"\t\tif err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_GET_${1:Uppercase}_BY_ID %v\", err)",
			"\t\t}",
			"\t\tres = &${3:Uppercase}.Update${2:Title}Result{",
			"\t\t\tSuccess: true,",
			"\t\t\t${2:Title}: &${3:Uppercase}.Res${2:Title}{",
			"\t\t\t\tFirstname: &New${4:UppercaseS}.Firstname,",
			"\t\t\t},",
			"\t\t}",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_UPDATE_${1:Uppercase}\", err)",
			"\t}",
			"\treturn res, nil"
		],
		"description": "Generate UPDATE method"
	},
	"Generate GET method": {
		"prefix": "goa-get",
		"body": [
			"err = s.server.Store.ExecTx(ctx, func(q *db.Queries) error {",
			"\t\tu, err := q.Get${2:Title}ByID(ctx, uuid.MustParse(p.ID))",
			"\t\tif err != nil {",
			"\t\t\treturn fmt.Errorf(\"ERROR_GET_${1:UPPERCASE}_BY_ID %v\", err)",
			"\t\t}",
			"\t\tres = &${3:lowercases}.Get${2:Title}Result{",
			"\t\t\t${2:Title}: &${3:lowercases}.Res${2:Title}{",
			"\t\t\t\tID:        u.ID.String(),",
			"\t\t\t},",
			"\t\t\tSuccess: true,",
			"\t\t}",
			"\t\treturn nil",
			"\t})",
			"\tif err != nil {",
			"\t\treturn nil, s.errorResponse(\"TX_GET_${1:UPPERCASE}_BY_ID\", err)",
			"\t}",
			"\treturn res, nil"
		],
		"description": "Generate GET method"
	}
}