// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBookStmt, err = db.PrepareContext(ctx, createBook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBook: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createRefreshTokenStmt, err = db.PrepareContext(ctx, createRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRefreshToken: %w", err)
	}
	if q.deleteBookStmt, err = db.PrepareContext(ctx, deleteBook); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBook: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.deleteOldRefreshTokenStmt, err = db.PrepareContext(ctx, deleteOldRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldRefreshToken: %w", err)
	}
	if q.deleteRefreshTokenStmt, err = db.PrepareContext(ctx, deleteRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRefreshToken: %w", err)
	}
	if q.existGetUserByFireBaseUidStmt, err = db.PrepareContext(ctx, existGetUserByFireBaseUid); err != nil {
		return nil, fmt.Errorf("error preparing query ExistGetUserByFireBaseUid: %w", err)
	}
	if q.existUserByEmailStmt, err = db.PrepareContext(ctx, existUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistUserByEmail: %w", err)
	}
	if q.findUserByEmailStmt, err = db.PrepareContext(ctx, findUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByEmail: %w", err)
	}
	if q.getBookStmt, err = db.PrepareContext(ctx, getBook); err != nil {
		return nil, fmt.Errorf("error preparing query GetBook: %w", err)
	}
	if q.getBooksStmt, err = db.PrepareContext(ctx, getBooks); err != nil {
		return nil, fmt.Errorf("error preparing query GetBooks: %w", err)
	}
	if q.getFileByURLStmt, err = db.PrepareContext(ctx, getFileByURL); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByURL: %w", err)
	}
	if q.getRefreshTokenStmt, err = db.PrepareContext(ctx, getRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshToken: %w", err)
	}
	if q.getUserByFireBaseUidStmt, err = db.PrepareContext(ctx, getUserByFireBaseUid); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByFireBaseUid: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listRefreshTokenByUserIDStmt, err = db.PrepareContext(ctx, listRefreshTokenByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListRefreshTokenByUserID: %w", err)
	}
	if q.loginUserStmt, err = db.PrepareContext(ctx, loginUser); err != nil {
		return nil, fmt.Errorf("error preparing query LoginUser: %w", err)
	}
	if q.signProviderStmt, err = db.PrepareContext(ctx, signProvider); err != nil {
		return nil, fmt.Errorf("error preparing query SignProvider: %w", err)
	}
	if q.signupStmt, err = db.PrepareContext(ctx, signup); err != nil {
		return nil, fmt.Errorf("error preparing query Signup: %w", err)
	}
	if q.updateBookStmt, err = db.PrepareContext(ctx, updateBook); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBook: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserProviderStmt, err = db.PrepareContext(ctx, updateUserProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProvider: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBookStmt != nil {
		if cerr := q.createBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createRefreshTokenStmt != nil {
		if cerr := q.createRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRefreshTokenStmt: %w", cerr)
		}
	}
	if q.deleteBookStmt != nil {
		if cerr := q.deleteBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBookStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.deleteOldRefreshTokenStmt != nil {
		if cerr := q.deleteOldRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldRefreshTokenStmt: %w", cerr)
		}
	}
	if q.deleteRefreshTokenStmt != nil {
		if cerr := q.deleteRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRefreshTokenStmt: %w", cerr)
		}
	}
	if q.existGetUserByFireBaseUidStmt != nil {
		if cerr := q.existGetUserByFireBaseUidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existGetUserByFireBaseUidStmt: %w", cerr)
		}
	}
	if q.existUserByEmailStmt != nil {
		if cerr := q.existUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existUserByEmailStmt: %w", cerr)
		}
	}
	if q.findUserByEmailStmt != nil {
		if cerr := q.findUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByEmailStmt: %w", cerr)
		}
	}
	if q.getBookStmt != nil {
		if cerr := q.getBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBookStmt: %w", cerr)
		}
	}
	if q.getBooksStmt != nil {
		if cerr := q.getBooksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBooksStmt: %w", cerr)
		}
	}
	if q.getFileByURLStmt != nil {
		if cerr := q.getFileByURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByURLStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenStmt != nil {
		if cerr := q.getRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getUserByFireBaseUidStmt != nil {
		if cerr := q.getUserByFireBaseUidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByFireBaseUidStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listRefreshTokenByUserIDStmt != nil {
		if cerr := q.listRefreshTokenByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRefreshTokenByUserIDStmt: %w", cerr)
		}
	}
	if q.loginUserStmt != nil {
		if cerr := q.loginUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing loginUserStmt: %w", cerr)
		}
	}
	if q.signProviderStmt != nil {
		if cerr := q.signProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing signProviderStmt: %w", cerr)
		}
	}
	if q.signupStmt != nil {
		if cerr := q.signupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing signupStmt: %w", cerr)
		}
	}
	if q.updateBookStmt != nil {
		if cerr := q.updateBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserProviderStmt != nil {
		if cerr := q.updateUserProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProviderStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createBookStmt                *sql.Stmt
	createFileStmt                *sql.Stmt
	createRefreshTokenStmt        *sql.Stmt
	deleteBookStmt                *sql.Stmt
	deleteFileStmt                *sql.Stmt
	deleteOldRefreshTokenStmt     *sql.Stmt
	deleteRefreshTokenStmt        *sql.Stmt
	existGetUserByFireBaseUidStmt *sql.Stmt
	existUserByEmailStmt          *sql.Stmt
	findUserByEmailStmt           *sql.Stmt
	getBookStmt                   *sql.Stmt
	getBooksStmt                  *sql.Stmt
	getFileByURLStmt              *sql.Stmt
	getRefreshTokenStmt           *sql.Stmt
	getUserByFireBaseUidStmt      *sql.Stmt
	getUserByIDStmt               *sql.Stmt
	listRefreshTokenByUserIDStmt  *sql.Stmt
	loginUserStmt                 *sql.Stmt
	signProviderStmt              *sql.Stmt
	signupStmt                    *sql.Stmt
	updateBookStmt                *sql.Stmt
	updateUserPasswordStmt        *sql.Stmt
	updateUserProviderStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createBookStmt:                q.createBookStmt,
		createFileStmt:                q.createFileStmt,
		createRefreshTokenStmt:        q.createRefreshTokenStmt,
		deleteBookStmt:                q.deleteBookStmt,
		deleteFileStmt:                q.deleteFileStmt,
		deleteOldRefreshTokenStmt:     q.deleteOldRefreshTokenStmt,
		deleteRefreshTokenStmt:        q.deleteRefreshTokenStmt,
		existGetUserByFireBaseUidStmt: q.existGetUserByFireBaseUidStmt,
		existUserByEmailStmt:          q.existUserByEmailStmt,
		findUserByEmailStmt:           q.findUserByEmailStmt,
		getBookStmt:                   q.getBookStmt,
		getBooksStmt:                  q.getBooksStmt,
		getFileByURLStmt:              q.getFileByURLStmt,
		getRefreshTokenStmt:           q.getRefreshTokenStmt,
		getUserByFireBaseUidStmt:      q.getUserByFireBaseUidStmt,
		getUserByIDStmt:               q.getUserByIDStmt,
		listRefreshTokenByUserIDStmt:  q.listRefreshTokenByUserIDStmt,
		loginUserStmt:                 q.loginUserStmt,
		signProviderStmt:              q.signProviderStmt,
		signupStmt:                    q.signupStmt,
		updateBookStmt:                q.updateBookStmt,
		updateUserPasswordStmt:        q.updateUserPasswordStmt,
		updateUserProviderStmt:        q.updateUserProviderStmt,
	}
}
