// Code generated by sqlc. DO NOT EDIT.
// source: file.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (name, url, mime, size) 
VALUES ($1, $2, $3, $4)
RETURNING id, name, url, mime, size
`

type CreateFileParams struct {
	Name sql.NullString `json:"name"`
	Url  sql.NullString `json:"url"`
	Mime sql.NullString `json:"mime"`
	Size sql.NullInt64  `json:"size"`
}

type CreateFileRow struct {
	ID   uuid.UUID      `json:"id"`
	Name sql.NullString `json:"name"`
	Url  sql.NullString `json:"url"`
	Mime sql.NullString `json:"mime"`
	Size sql.NullInt64  `json:"size"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (CreateFileRow, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.Name,
		arg.Url,
		arg.Mime,
		arg.Size,
	)
	var i CreateFileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Mime,
		&i.Size,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE url = $1
`

func (q *Queries) DeleteFile(ctx context.Context, url sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteFile, url)
	return err
}

const getFileByURL = `-- name: GetFileByURL :one
SELECT id, created_at, updated_at, deleted_at, name, url, mime, size FROM files
WHERE deleted_at IS NULL
AND url = $1
`

func (q *Queries) GetFileByURL(ctx context.Context, url sql.NullString) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByURL, url)
	var i File
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Url,
		&i.Mime,
		&i.Size,
	)
	return i, err
}
