// Code generated by sqlc. DO NOT EDIT.
// source: auth.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const existUserByEmail = `-- name: ExistUserByEmail :one
SELECT EXISTS(
    SELECT id, created_at, updated_at, role, deleted_at, email, password, lastname, firstname FROM users
    WHERE email = $1
    AND deleted_at IS NULL
)
`

func (q *Queries) ExistUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.existUserByEmailStmt, existUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, firstname, lastname, email, role FROM users
WHERE email = $1
AND password = crypt($2, password)
AND deleted_at IS NULL
`

type LoginUserParams struct {
	Email string      `json:"email"`
	Crypt interface{} `json:"crypt"`
}

type LoginUserRow struct {
	ID        uuid.UUID `json:"id"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Email     string    `json:"email"`
	Role      Role      `json:"role"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.queryRow(ctx, q.loginUserStmt, loginUser, arg.Email, arg.Crypt)
	var i LoginUserRow
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const signup = `-- name: Signup :one
INSERT INTO users (firstname, lastname, email, role, password) 
VALUES ($1, $2, $3, $4, crypt($5, gen_salt('bf')))
RETURNING id, created_at, updated_at, role, deleted_at, email, password, lastname, firstname
`

type SignupParams struct {
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Email     string      `json:"email"`
	Role      Role        `json:"role"`
	Crypt     interface{} `json:"crypt"`
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) (User, error) {
	row := q.queryRow(ctx, q.signupStmt, signup,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Role,
		arg.Crypt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Lastname,
		&i.Firstname,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = crypt($2, gen_salt('bf')), updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID    uuid.UUID   `json:"id"`
	Crypt interface{} `json:"crypt"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.ID, arg.Crypt)
	return err
}
