// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
UPDATE
    users
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getEmailByUserID = `-- name: GetEmailByUserID :one
SELECT email FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetEmailByUserID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmailByUserID, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, password_confirm_code, role, avatar FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.PasswordConfirmCode,
		&i.Role,
		&i.Avatar,
	)
	return i, err
}

const getUserRandom = `-- name: GetUserRandom :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, password_confirm_code, role, avatar FROM users
WHERE deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserRandom(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserRandom)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.PasswordConfirmCode,
		&i.Role,
		&i.Avatar,
	)
	return i, err
}

const updateAvatarUser = `-- name: UpdateAvatarUser :exec
UPDATE users
SET avatar = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateAvatarUserParams struct {
	Avatar sql.NullString `json:"avatar"`
	ID     uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateAvatarUser(ctx context.Context, arg UpdateAvatarUserParams) error {
	_, err := q.db.ExecContext(ctx, updateAvatarUser, arg.Avatar, arg.ID)
	return err
}

const updateDescriptionUser = `-- name: UpdateDescriptionUser :exec
UPDATE users
SET firstname = $1,
    lastname = $2,
    updated_at = NOW()
WHERE id = $3
`

type UpdateDescriptionUserParams struct {
	Firstname sql.NullString `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateDescriptionUser(ctx context.Context, arg UpdateDescriptionUserParams) error {
	_, err := q.db.ExecContext(ctx, updateDescriptionUser, arg.Firstname, arg.Lastname, arg.ID)
	return err
}
