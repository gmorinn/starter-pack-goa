// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBookStmt, err = db.PrepareContext(ctx, createBook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBook: %w", err)
	}
	if q.deleteBookStmt, err = db.PrepareContext(ctx, deleteBook); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBook: %w", err)
	}
	if q.existUserByEmailStmt, err = db.PrepareContext(ctx, existUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistUserByEmail: %w", err)
	}
	if q.getBookStmt, err = db.PrepareContext(ctx, getBook); err != nil {
		return nil, fmt.Errorf("error preparing query GetBook: %w", err)
	}
	if q.getBooksStmt, err = db.PrepareContext(ctx, getBooks); err != nil {
		return nil, fmt.Errorf("error preparing query GetBooks: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.signupStmt, err = db.PrepareContext(ctx, signup); err != nil {
		return nil, fmt.Errorf("error preparing query Signup: %w", err)
	}
	if q.updateBookStmt, err = db.PrepareContext(ctx, updateBook); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBook: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBookStmt != nil {
		if cerr := q.createBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookStmt: %w", cerr)
		}
	}
	if q.deleteBookStmt != nil {
		if cerr := q.deleteBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBookStmt: %w", cerr)
		}
	}
	if q.existUserByEmailStmt != nil {
		if cerr := q.existUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existUserByEmailStmt: %w", cerr)
		}
	}
	if q.getBookStmt != nil {
		if cerr := q.getBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBookStmt: %w", cerr)
		}
	}
	if q.getBooksStmt != nil {
		if cerr := q.getBooksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBooksStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.signupStmt != nil {
		if cerr := q.signupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing signupStmt: %w", cerr)
		}
	}
	if q.updateBookStmt != nil {
		if cerr := q.updateBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBookStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createBookStmt       *sql.Stmt
	deleteBookStmt       *sql.Stmt
	existUserByEmailStmt *sql.Stmt
	getBookStmt          *sql.Stmt
	getBooksStmt         *sql.Stmt
	getUserByIDStmt      *sql.Stmt
	signupStmt           *sql.Stmt
	updateBookStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createBookStmt:       q.createBookStmt,
		deleteBookStmt:       q.deleteBookStmt,
		existUserByEmailStmt: q.existUserByEmailStmt,
		getBookStmt:          q.getBookStmt,
		getBooksStmt:         q.getBooksStmt,
		getUserByIDStmt:      q.getUserByIDStmt,
		signupStmt:           q.signupStmt,
		updateBookStmt:       q.updateBookStmt,
	}
}
