// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const existUserByEmail = `-- name: ExistUserByEmail :one
SELECT EXISTS(
    SELECT id, created_at, updated_at, deleted_at, email, password, lastname, firstname FROM users
    WHERE email = $1
    AND deleted_at IS NULL
)
`

func (q *Queries) ExistUserByEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.existUserByEmailStmt, existUserByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, email, password, lastname, firstname FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Lastname,
		&i.Firstname,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, firstname, lastname, email FROM users
WHERE email = $1
AND password = crypt($2, password)
AND deleted_at IS NULL
`

type LoginUserParams struct {
	Email string      `json:"email"`
	Crypt interface{} `json:"crypt"`
}

type LoginUserRow struct {
	ID        uuid.UUID `json:"id"`
	Firstname string    `json:"firstname"`
	Lastname  string    `json:"lastname"`
	Email     string    `json:"email"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.queryRow(ctx, q.loginUserStmt, loginUser, arg.Email, arg.Crypt)
	var i LoginUserRow
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
	)
	return i, err
}

const signup = `-- name: Signup :one
INSERT INTO users (firstname, lastname, email, password) 
VALUES ($1, $2, $3, crypt($4, gen_salt('bf')))
RETURNING id, created_at, updated_at, deleted_at, email, password, lastname, firstname
`

type SignupParams struct {
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Email     string      `json:"email"`
	Crypt     interface{} `json:"crypt"`
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) (User, error) {
	row := q.queryRow(ctx, q.signupStmt, signup,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Crypt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Lastname,
		&i.Firstname,
	)
	return i, err
}
