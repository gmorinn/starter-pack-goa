// Code generated by goa v3.5.2, DO NOT EDIT.
//
// book client HTTP transport
//
// Command:
// $ goa gen api_crud/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the book service endpoint HTTP clients.
type Client struct {
	// GetBook Doer is the HTTP client used to make requests to the getBook
	// endpoint.
	GetBookDoer goahttp.Doer

	// UpdateBook Doer is the HTTP client used to make requests to the updateBook
	// endpoint.
	UpdateBookDoer goahttp.Doer

	// GetAllBooks Doer is the HTTP client used to make requests to the getAllBooks
	// endpoint.
	GetAllBooksDoer goahttp.Doer

	// DeleteBook Doer is the HTTP client used to make requests to the deleteBook
	// endpoint.
	DeleteBookDoer goahttp.Doer

	// CreateBook Doer is the HTTP client used to make requests to the createBook
	// endpoint.
	CreateBookDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the book service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetBookDoer:         doer,
		UpdateBookDoer:      doer,
		GetAllBooksDoer:     doer,
		DeleteBookDoer:      doer,
		CreateBookDoer:      doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// GetBook returns an endpoint that makes HTTP requests to the book service
// getBook server.
func (c *Client) GetBook() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetBookRequest(c.encoder)
		decodeResponse = DecodeGetBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("book", "getBook", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateBook returns an endpoint that makes HTTP requests to the book service
// updateBook server.
func (c *Client) UpdateBook() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateBookRequest(c.encoder)
		decodeResponse = DecodeUpdateBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("book", "updateBook", err)
		}
		return decodeResponse(resp)
	}
}

// GetAllBooks returns an endpoint that makes HTTP requests to the book service
// getAllBooks server.
func (c *Client) GetAllBooks() goa.Endpoint {
	var (
		decodeResponse = DecodeGetAllBooksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAllBooksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllBooksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("book", "getAllBooks", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteBook returns an endpoint that makes HTTP requests to the book service
// deleteBook server.
func (c *Client) DeleteBook() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("book", "deleteBook", err)
		}
		return decodeResponse(resp)
	}
}

// CreateBook returns an endpoint that makes HTTP requests to the book service
// createBook server.
func (c *Client) CreateBook() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateBookRequest(c.encoder)
		decodeResponse = DecodeCreateBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("book", "createBook", err)
		}
		return decodeResponse(resp)
	}
}
