// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen starter-pack-goa/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// users of the api
type Service interface {
	// Delete one User by ID
	DeleteUser(context.Context, *DeleteUserPayload) (res *DeleteUserResult, err error)
	// Get one User
	GetUserByID(context.Context, *GetUserByIDPayload) (res *GetUserByIDResult, err error)
	// Update main info like email, firstname, lastname
	UpdateDescription(context.Context, *UpdateDescriptionPayload) (res *UpdateDescriptionResult, err error)
	// Update avatar
	UpdateAvatar(context.Context, *UpdateAvatarPayload) (res *UpdateAvatarResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"deleteUser", "getUserByID", "updateDescription", "updateAvatar"}

// DeleteUserPayload is the payload type of the users service deleteUser method.
type DeleteUserPayload struct {
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteUserResult is the result type of the users service deleteUser method.
type DeleteUserResult struct {
	Success bool
}

// GetUserByIDPayload is the payload type of the users service getUserByID
// method.
type GetUserByIDPayload struct {
	// Unique ID of the User
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetUserByIDResult is the result type of the users service getUserByID method.
type GetUserByIDResult struct {
	// Result is an object
	User    *ResUser
	Success bool
}

type ResUser struct {
	ID        string
	Firstname string
	Lastname  string
	Email     string
	// User is admin or not
	Role   *string
	Avatar string
}

// UpdateAvatarPayload is the payload type of the users service updateAvatar
// method.
type UpdateAvatarPayload struct {
	ID string
	// Url of the avatar and stock in db
	Avatar string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// UpdateAvatarResult is the result type of the users service updateAvatar
// method.
type UpdateAvatarResult struct {
	Success bool
	// Result is an Object
	User *ResUser
}

// UpdateDescriptionPayload is the payload type of the users service
// updateDescription method.
type UpdateDescriptionPayload struct {
	ID        string
	Email     string
	Firstname *string
	Lastname  *string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// UpdateDescriptionResult is the result type of the users service
// updateDescription method.
type UpdateDescriptionResult struct {
	Success bool
	// Result is an Object
	User *ResUser
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnknownError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unknownError".
func (e *UnknownError) GoaErrorName() string {
	return "unknown_error"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "timeout", true, false, false)
}
