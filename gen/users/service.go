// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen api_crud/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// users of the api
type Service interface {
	// Get one User
	GetUser(context.Context, *GetUserPayload) (res *GetUserResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getUser"}

// GetUserPayload is the payload type of the users service getUser method.
type GetUserPayload struct {
	// Unique ID of the User
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetUserResult is the result type of the users service getUser method.
type GetUserResult struct {
	// Result is an object
	User    *ResUser
	Success bool
}

type ResUser struct {
	ID        string
	Firstname *string
	Lastname  *string
	Email     string
	Birthday  string
	Phone     string
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
func (e *UnknownError) ErrorName() string {
	return "unknown_error"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Timeout: true,
	}
}
