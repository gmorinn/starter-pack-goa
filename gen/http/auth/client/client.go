// Code generated by goa v3.5.2, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen api_crud/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// EmailExist Doer is the HTTP client used to make requests to the email-exist
	// endpoint.
	EmailExistDoer goahttp.Doer

	// SendConfirmation Doer is the HTTP client used to make requests to the
	// send-confirmation endpoint.
	SendConfirmationDoer goahttp.Doer

	// ResetPassword Doer is the HTTP client used to make requests to the
	// reset-password endpoint.
	ResetPasswordDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		EmailExistDoer:       doer,
		SendConfirmationDoer: doer,
		ResetPasswordDoer:    doer,
		CORSDoer:             doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// EmailExist returns an endpoint that makes HTTP requests to the auth service
// email-exist server.
func (c *Client) EmailExist() goa.Endpoint {
	var (
		encodeRequest  = EncodeEmailExistRequest(c.encoder)
		decodeResponse = DecodeEmailExistResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEmailExistRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EmailExistDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "email-exist", err)
		}
		return decodeResponse(resp)
	}
}

// SendConfirmation returns an endpoint that makes HTTP requests to the auth
// service send-confirmation server.
func (c *Client) SendConfirmation() goa.Endpoint {
	var (
		encodeRequest  = EncodeSendConfirmationRequest(c.encoder)
		decodeResponse = DecodeSendConfirmationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSendConfirmationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendConfirmationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "send-confirmation", err)
		}
		return decodeResponse(resp)
	}
}

// ResetPassword returns an endpoint that makes HTTP requests to the auth
// service reset-password server.
func (c *Client) ResetPassword() goa.Endpoint {
	var (
		encodeRequest  = EncodeResetPasswordRequest(c.encoder)
		decodeResponse = DecodeResetPasswordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildResetPasswordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResetPasswordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "reset-password", err)
		}
		return decodeResponse(resp)
	}
}
