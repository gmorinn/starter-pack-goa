// Code generated by goa v3.5.2, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	auth "api_crud/gen/auth"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// EmailExistRequestBody is the type of the "auth" service "email-exist"
// endpoint HTTP request body.
type EmailExistRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// SendConfirmationRequestBody is the type of the "auth" service
// "send-confirmation" endpoint HTTP request body.
type SendConfirmationRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ResetPasswordRequestBody is the type of the "auth" service "reset-password"
// endpoint HTTP request body.
type ResetPasswordRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Code  *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Minimum 8 charactères / Chiffre Obligatoire
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Minimum 8 charactères / Chiffre Obligatoire
	ConfirmPassword *string `form:"confirm_password,omitempty" json:"confirm_password,omitempty" xml:"confirm_password,omitempty"`
}

// EmailExistResponseBody is the type of the "auth" service "email-exist"
// endpoint HTTP response body.
type EmailExistResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
	Exist   bool `form:"exist" json:"exist" xml:"exist"`
}

// SendConfirmationResponseBody is the type of the "auth" service
// "send-confirmation" endpoint HTTP response body.
type SendConfirmationResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
	Exist   bool `form:"exist" json:"exist" xml:"exist"`
}

// ResetPasswordResponseBody is the type of the "auth" service "reset-password"
// endpoint HTTP response body.
type ResetPasswordResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// EmailExistUnknownErrorResponseBody is the type of the "auth" service
// "email-exist" endpoint HTTP response body for the "unknown_error" error.
type EmailExistUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// SendConfirmationUnknownErrorResponseBody is the type of the "auth" service
// "send-confirmation" endpoint HTTP response body for the "unknown_error"
// error.
type SendConfirmationUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResetPasswordUnknownErrorResponseBody is the type of the "auth" service
// "reset-password" endpoint HTTP response body for the "unknown_error" error.
type ResetPasswordUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// NewEmailExistResponseBody builds the HTTP response body from the result of
// the "email-exist" endpoint of the "auth" service.
func NewEmailExistResponseBody(res *auth.EmailExistResult) *EmailExistResponseBody {
	body := &EmailExistResponseBody{
		Success: res.Success,
		Exist:   res.Exist,
	}
	return body
}

// NewSendConfirmationResponseBody builds the HTTP response body from the
// result of the "send-confirmation" endpoint of the "auth" service.
func NewSendConfirmationResponseBody(res *auth.SendConfirmationResult) *SendConfirmationResponseBody {
	body := &SendConfirmationResponseBody{
		Success: res.Success,
		Exist:   res.Exist,
	}
	return body
}

// NewResetPasswordResponseBody builds the HTTP response body from the result
// of the "reset-password" endpoint of the "auth" service.
func NewResetPasswordResponseBody(res *auth.ResetPasswordResult) *ResetPasswordResponseBody {
	body := &ResetPasswordResponseBody{
		Success: res.Success,
	}
	return body
}

// NewEmailExistUnknownErrorResponseBody builds the HTTP response body from the
// result of the "email-exist" endpoint of the "auth" service.
func NewEmailExistUnknownErrorResponseBody(res *auth.UnknownError) *EmailExistUnknownErrorResponseBody {
	body := &EmailExistUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewSendConfirmationUnknownErrorResponseBody builds the HTTP response body
// from the result of the "send-confirmation" endpoint of the "auth" service.
func NewSendConfirmationUnknownErrorResponseBody(res *auth.UnknownError) *SendConfirmationUnknownErrorResponseBody {
	body := &SendConfirmationUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewResetPasswordUnknownErrorResponseBody builds the HTTP response body from
// the result of the "reset-password" endpoint of the "auth" service.
func NewResetPasswordUnknownErrorResponseBody(res *auth.UnknownError) *ResetPasswordUnknownErrorResponseBody {
	body := &ResetPasswordUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewEmailExistPayload builds a auth service email-exist endpoint payload.
func NewEmailExistPayload(body *EmailExistRequestBody, oauth *string) *auth.EmailExistPayload {
	v := &auth.EmailExistPayload{
		Email: *body.Email,
	}
	v.Oauth = oauth

	return v
}

// NewSendConfirmationPayload builds a auth service send-confirmation endpoint
// payload.
func NewSendConfirmationPayload(body *SendConfirmationRequestBody, oauth *string) *auth.SendConfirmationPayload {
	v := &auth.SendConfirmationPayload{
		Email: *body.Email,
	}
	v.Oauth = oauth

	return v
}

// NewResetPasswordPayload builds a auth service reset-password endpoint
// payload.
func NewResetPasswordPayload(body *ResetPasswordRequestBody, oauth *string) *auth.ResetPasswordPayload {
	v := &auth.ResetPasswordPayload{
		Email:           *body.Email,
		Code:            *body.Code,
		Password:        *body.Password,
		ConfirmPassword: *body.ConfirmPassword,
	}
	v.Oauth = oauth

	return v
}

// ValidateEmailExistRequestBody runs the validations defined on
// Email-ExistRequestBody
func ValidateEmailExistRequestBody(body *EmailExistRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateSendConfirmationRequestBody runs the validations defined on
// Send-ConfirmationRequestBody
func ValidateSendConfirmationRequestBody(body *SendConfirmationRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateResetPasswordRequestBody runs the validations defined on
// Reset-PasswordRequestBody
func ValidateResetPasswordRequestBody(body *ResetPasswordRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirm_password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "\\d"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.ConfirmPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm_password", *body.ConfirmPassword, "\\d"))
	}
	if body.ConfirmPassword != nil {
		if utf8.RuneCountInString(*body.ConfirmPassword) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm_password", *body.ConfirmPassword, utf8.RuneCountInString(*body.ConfirmPassword), 8, true))
		}
	}
	return
}
