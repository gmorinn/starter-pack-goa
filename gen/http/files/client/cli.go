// Code generated by goa v3.10.2, DO NOT EDIT.
//
// files HTTP client CLI support package
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	"encoding/json"
	"fmt"
	files "starter-pack-goa/gen/files"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildImportFilePayload builds the payload for the files importFile endpoint
// from CLI flags.
func BuildImportFilePayload(filesImportFileBody string, filesImportFileOauth string) (*files.ImportFilePayload, error) {
	var err error
	var body ImportFileRequestBody
	{
		err = json.Unmarshal([]byte(filesImportFileBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"files\": [\n         {\n            \"content\": \"RGVsZW5pdGkgcmVwZWxsZW5kdXMu\",\n            \"filename\": \"foo.jpg\",\n            \"format\": \"image/jpeg\",\n            \"h\": 453901555597122463,\n            \"size\": 4908872163727939995,\n            \"url\": \"Similique tenetur ratione est.\",\n            \"w\": 6121017000915498524\n         },\n         {\n            \"content\": \"RGVsZW5pdGkgcmVwZWxsZW5kdXMu\",\n            \"filename\": \"foo.jpg\",\n            \"format\": \"image/jpeg\",\n            \"h\": 453901555597122463,\n            \"size\": 4908872163727939995,\n            \"url\": \"Similique tenetur ratione est.\",\n            \"w\": 6121017000915498524\n         },\n         {\n            \"content\": \"RGVsZW5pdGkgcmVwZWxsZW5kdXMu\",\n            \"filename\": \"foo.jpg\",\n            \"format\": \"image/jpeg\",\n            \"h\": 453901555597122463,\n            \"size\": 4908872163727939995,\n            \"url\": \"Similique tenetur ratione est.\",\n            \"w\": 6121017000915498524\n         }\n      ]\n   }'")
		}
		if body.Files == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("files", "body"))
		}
		for _, e := range body.Files {
			if e != nil {
				if err2 := ValidatePayloadFileRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if filesImportFileOauth != "" {
			oauth = &filesImportFileOauth
		}
	}
	v := &files.ImportFilePayload{}
	if body.Files != nil {
		v.Files = make([]*files.PayloadFile, len(body.Files))
		for i, val := range body.Files {
			v.Files[i] = marshalPayloadFileRequestBodyToFilesPayloadFile(val)
		}
	}
	v.Oauth = oauth

	return v, nil
}

// BuildDeleteFilePayload builds the payload for the files deleteFile endpoint
// from CLI flags.
func BuildDeleteFilePayload(filesDeleteFileBody string, filesDeleteFileOauth string) (*files.DeleteFilePayload, error) {
	var err error
	var body DeleteFileRequestBody
	{
		err = json.Unmarshal([]byte(filesDeleteFileBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"url\": \"/public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png\"\n   }'")
		}
		if utf8.RuneCountInString(body.URL) < 23 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.url", body.URL, utf8.RuneCountInString(body.URL), 23, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if filesDeleteFileOauth != "" {
			oauth = &filesDeleteFileOauth
		}
	}
	v := &files.DeleteFilePayload{
		URL: body.URL,
	}
	v.Oauth = oauth

	return v, nil
}
