// Code generated by goa v3.5.2, DO NOT EDIT.
//
// files HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package client

import (
	files "api_crud/gen/files"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildImportFilePayload builds the payload for the files importFile endpoint
// from CLI flags.
func BuildImportFilePayload(filesImportFileBody string, filesImportFileOauth string, filesImportFileJWTToken string) (*files.ImportFilePayload, error) {
	var err error
	var body ImportFileRequestBody
	{
		err = json.Unmarshal([]byte(filesImportFileBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": \"QWxpYXMgcmF0aW9uZSBpbnZlbnRvcmUgbnVtcXVhbSB1dCBtYWduYW0gc2VkLg==\",\n      \"file_name\": \"foo.jpg\",\n      \"format\": \"image/jpeg\"\n   }'")
		}
		if body.Content == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if filesImportFileOauth != "" {
			oauth = &filesImportFileOauth
		}
	}
	var jwtToken *string
	{
		if filesImportFileJWTToken != "" {
			jwtToken = &filesImportFileJWTToken
		}
	}
	v := &files.ImportFilePayload{
		FileName: body.FileName,
		Content:  body.Content,
		Format:   body.Format,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
