// Code generated by goa v3.10.2, DO NOT EDIT.
//
// files HTTP server types
//
// Command:
// $ goa gen starter-pack-goa/design

package server

import (
	files "starter-pack-goa/gen/files"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// ImportFileRequestBody is the type of the "files" service "importFile"
// endpoint HTTP request body.
type ImportFileRequestBody struct {
	// uploaded file name
	Filename *string `form:"filename,omitempty" json:"filename,omitempty" xml:"filename,omitempty"`
	// url file
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// width of image if you crop
	W *int64 `form:"w,omitempty" json:"w,omitempty" xml:"w,omitempty"`
	// height of image if you crop
	H *int64 `form:"h,omitempty" json:"h,omitempty" xml:"h,omitempty"`
	// url file
	Mime *string `form:"mime,omitempty" json:"mime,omitempty" xml:"mime,omitempty"`
	// content of image
	Content []byte `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// size of image
	Size *int64 `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// uploaded file format
	Format *string `form:"format,omitempty" json:"format,omitempty" xml:"format,omitempty"`
}

// DeleteFileRequestBody is the type of the "files" service "deleteFile"
// endpoint HTTP request body.
type DeleteFileRequestBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ImportFileResponseBody is the type of the "files" service "importFile"
// endpoint HTTP response body.
type ImportFileResponseBody struct {
	File    *ResFileResponseBody `form:"file" json:"file" xml:"file"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// DeleteFileResponseBody is the type of the "files" service "deleteFile"
// endpoint HTTP response body.
type DeleteFileResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// ImportFileUnknownErrorResponseBody is the type of the "files" service
// "importFile" endpoint HTTP response body for the "unknown_error" error.
type ImportFileUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteFileUnknownErrorResponseBody is the type of the "files" service
// "deleteFile" endpoint HTTP response body for the "unknown_error" error.
type DeleteFileUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResFileResponseBody is used to define fields on response body types.
type ResFileResponseBody struct {
	ID   string  `form:"id" json:"id" xml:"id"`
	Name string  `form:"name" json:"name" xml:"name"`
	URL  string  `form:"url" json:"url" xml:"url"`
	Mime *string `form:"mime,omitempty" json:"mime,omitempty" xml:"mime,omitempty"`
	Size *int64  `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
}

// NewImportFileResponseBody builds the HTTP response body from the result of
// the "importFile" endpoint of the "files" service.
func NewImportFileResponseBody(res *files.ImportFileResult) *ImportFileResponseBody {
	body := &ImportFileResponseBody{
		Success: res.Success,
	}
	if res.File != nil {
		body.File = marshalFilesResFileToResFileResponseBody(res.File)
	}
	return body
}

// NewDeleteFileResponseBody builds the HTTP response body from the result of
// the "deleteFile" endpoint of the "files" service.
func NewDeleteFileResponseBody(res *files.DeleteFileResult) *DeleteFileResponseBody {
	body := &DeleteFileResponseBody{
		Success: res.Success,
	}
	return body
}

// NewImportFileUnknownErrorResponseBody builds the HTTP response body from the
// result of the "importFile" endpoint of the "files" service.
func NewImportFileUnknownErrorResponseBody(res *files.UnknownError) *ImportFileUnknownErrorResponseBody {
	body := &ImportFileUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteFileUnknownErrorResponseBody builds the HTTP response body from the
// result of the "deleteFile" endpoint of the "files" service.
func NewDeleteFileUnknownErrorResponseBody(res *files.UnknownError) *DeleteFileUnknownErrorResponseBody {
	body := &DeleteFileUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewImportFilePayload builds a files service importFile endpoint payload.
func NewImportFilePayload(body *ImportFileRequestBody, oauth *string, jwtToken *string) *files.ImportFilePayload {
	v := &files.ImportFilePayload{
		Filename: *body.Filename,
		URL:      body.URL,
		W:        body.W,
		H:        body.H,
		Mime:     body.Mime,
		Content:  body.Content,
		Size:     body.Size,
		Format:   *body.Format,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteFilePayload builds a files service deleteFile endpoint payload.
func NewDeleteFilePayload(body *DeleteFileRequestBody, oauth *string, jwtToken *string) *files.DeleteFilePayload {
	v := &files.DeleteFilePayload{
		URL: *body.URL,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateImportFileRequestBody runs the validations defined on
// ImportFileRequestBody
func ValidateImportFileRequestBody(body *ImportFileRequestBody) (err error) {
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Format == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("format", "body"))
	}
	if body.Filename != nil {
		if utf8.RuneCountInString(*body.Filename) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.filename", *body.Filename, utf8.RuneCountInString(*body.Filename), 2, true))
		}
	}
	if body.Format != nil {
		if !(*body.Format == "image/jpeg" || *body.Format == "image/png" || *body.Format == "image/jpg") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.format", *body.Format, []interface{}{"image/jpeg", "image/png", "image/jpg"}))
		}
	}
	return
}

// ValidateDeleteFileRequestBody runs the validations defined on
// DeleteFileRequestBody
func ValidateDeleteFileRequestBody(body *DeleteFileRequestBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.URL != nil {
		if utf8.RuneCountInString(*body.URL) < 23 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.url", *body.URL, utf8.RuneCountInString(*body.URL), 23, true))
		}
	}
	return
}
