// Code generated by goa v3.10.2, DO NOT EDIT.
//
// files HTTP server
//
// Command:
// $ goa gen starter-pack-goa/design

package server

import (
	"context"
	"mime/multipart"
	"net/http"
	"regexp"
	files "starter-pack-goa/gen/files"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the files service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	ImportFile http.Handler
	DeleteFile http.Handler
	CORS       http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// FilesImportFileDecoderFunc is the type to decode multipart request for the
// "files" service "importFile" endpoint.
type FilesImportFileDecoderFunc func(*multipart.Reader, **files.ImportFilePayload) error

// New instantiates HTTP handlers for all the files service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *files.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	filesImportFileDecoderFn FilesImportFileDecoderFunc,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ImportFile", "POST", "/v1/file/add"},
			{"DeleteFile", "PATCH", "/v1/file/remove"},
			{"CORS", "OPTIONS", "/v1/file/add"},
			{"CORS", "OPTIONS", "/v1/file/remove"},
		},
		ImportFile: NewImportFileHandler(e.ImportFile, mux, NewFilesImportFileDecoder(mux, filesImportFileDecoderFn), encoder, errhandler, formatter),
		DeleteFile: NewDeleteFileHandler(e.DeleteFile, mux, decoder, encoder, errhandler, formatter),
		CORS:       NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "files" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ImportFile = m(s.ImportFile)
	s.DeleteFile = m(s.DeleteFile)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return files.MethodNames[:] }

// Mount configures the mux to serve the files endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountImportFileHandler(mux, h.ImportFile)
	MountDeleteFileHandler(mux, h.DeleteFile)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the files endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountImportFileHandler configures the mux to serve the "files" service
// "importFile" endpoint.
func MountImportFileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFilesOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/file/add", f)
}

// NewImportFileHandler creates a HTTP handler which loads the HTTP request and
// calls the "files" service "importFile" endpoint.
func NewImportFileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeImportFileRequest(mux, decoder)
		encodeResponse = EncodeImportFileResponse(encoder)
		encodeError    = EncodeImportFileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "importFile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "files")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteFileHandler configures the mux to serve the "files" service
// "deleteFile" endpoint.
func MountDeleteFileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFilesOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/v1/file/remove", f)
}

// NewDeleteFileHandler creates a HTTP handler which loads the HTTP request and
// calls the "files" service "deleteFile" endpoint.
func NewDeleteFileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteFileRequest(mux, decoder)
		encodeResponse = EncodeDeleteFileResponse(encoder)
		encodeError    = EncodeDeleteFileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteFile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "files")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service files.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleFilesOrigin(h)
	mux.Handle("OPTIONS", "/v1/file/add", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/file/remove", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleFilesOrigin applies the CORS response headers corresponding to the
// origin for the service files.
func HandleFilesOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "Content-Type, Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type, jwtToken, Origin")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
