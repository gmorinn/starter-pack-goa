// Code generated by goa v3.5.2, DO NOT EDIT.
//
// products HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	products "api_crud/gen/products"
)

// GetAllProductsByCategoryResponseBody is the type of the "products" service
// "getAllProductsByCategory" endpoint HTTP response body.
type GetAllProductsByCategoryResponseBody struct {
	// Result is an array of object
	Products []*ResProductResponseBody `form:"products" json:"products" xml:"products"`
	Success  bool                      `form:"success" json:"success" xml:"success"`
}

// GetProductResponseBody is the type of the "products" service "getProduct"
// endpoint HTTP response body.
type GetProductResponseBody struct {
	// Result is an object
	Product *ResProductResponseBody `form:"product" json:"product" xml:"product"`
	Success bool                    `form:"success" json:"success" xml:"success"`
}

// GetAllProductsByCategoryUnknownErrorResponseBody is the type of the
// "products" service "getAllProductsByCategory" endpoint HTTP response body
// for the "unknown_error" error.
type GetAllProductsByCategoryUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetProductUnknownErrorResponseBody is the type of the "products" service
// "getProduct" endpoint HTTP response body for the "unknown_error" error.
type GetProductUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResProductResponseBody is used to define fields on response body types.
type ResProductResponseBody struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Name     string  `form:"name" json:"name" xml:"name"`
	Price    float64 `form:"price" json:"price" xml:"price"`
	Cover    string  `form:"cover" json:"cover" xml:"cover"`
	Category string  `form:"category" json:"category" xml:"category"`
}

// NewGetAllProductsByCategoryResponseBody builds the HTTP response body from
// the result of the "getAllProductsByCategory" endpoint of the "products"
// service.
func NewGetAllProductsByCategoryResponseBody(res *products.GetAllProductsByCategoryResult) *GetAllProductsByCategoryResponseBody {
	body := &GetAllProductsByCategoryResponseBody{
		Success: res.Success,
	}
	if res.Products != nil {
		body.Products = make([]*ResProductResponseBody, len(res.Products))
		for i, val := range res.Products {
			body.Products[i] = marshalProductsResProductToResProductResponseBody(val)
		}
	}
	return body
}

// NewGetProductResponseBody builds the HTTP response body from the result of
// the "getProduct" endpoint of the "products" service.
func NewGetProductResponseBody(res *products.GetProductResult) *GetProductResponseBody {
	body := &GetProductResponseBody{
		Success: res.Success,
	}
	if res.Product != nil {
		body.Product = marshalProductsResProductToResProductResponseBody(res.Product)
	}
	return body
}

// NewGetAllProductsByCategoryUnknownErrorResponseBody builds the HTTP response
// body from the result of the "getAllProductsByCategory" endpoint of the
// "products" service.
func NewGetAllProductsByCategoryUnknownErrorResponseBody(res *products.UnknownError) *GetAllProductsByCategoryUnknownErrorResponseBody {
	body := &GetAllProductsByCategoryUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetProductUnknownErrorResponseBody builds the HTTP response body from the
// result of the "getProduct" endpoint of the "products" service.
func NewGetProductUnknownErrorResponseBody(res *products.UnknownError) *GetProductUnknownErrorResponseBody {
	body := &GetProductUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetAllProductsByCategoryPayload builds a products service
// getAllProductsByCategory endpoint payload.
func NewGetAllProductsByCategoryPayload(category string, oauth *string) *products.GetAllProductsByCategoryPayload {
	v := &products.GetAllProductsByCategoryPayload{}
	v.Category = category
	v.Oauth = oauth

	return v
}

// NewGetProductPayload builds a products service getProduct endpoint payload.
func NewGetProductPayload(id string, oauth *string) *products.GetProductPayload {
	v := &products.GetProductPayload{}
	v.ID = id
	v.Oauth = oauth

	return v
}
