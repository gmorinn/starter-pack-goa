// Code generated by goa v3.5.2, DO NOT EDIT.
//
// products HTTP server encoders and decoders
//
// Command:
// $ goa gen api_crud/design

package server

import (
	products "api_crud/gen/products"
	"context"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAllProductsByCategoryResponse returns an encoder for responses
// returned by the products getAllProductsByCategory endpoint.
func EncodeGetAllProductsByCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*products.GetAllProductsByCategoryResult)
		enc := encoder(ctx, w)
		body := NewGetAllProductsByCategoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAllProductsByCategoryRequest returns a decoder for requests sent to
// the products getAllProductsByCategory endpoint.
func DecodeGetAllProductsByCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			category string
			oauth    *string
			err      error

			params = mux.Vars(r)
		)
		category = params["category"]
		if !(category == "men" || category == "women" || category == "hat" || category == "jacket" || category == "sneaker" || category == "nothing") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("category", category, []interface{}{"men", "women", "hat", "jacket", "sneaker", "nothing"}))
		}
		oauthRaw := r.Header.Get("Authorization")
		if oauthRaw != "" {
			oauth = &oauthRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAllProductsByCategoryPayload(category, oauth)
		if payload.Oauth != nil {
			if strings.Contains(*payload.Oauth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth, " ", 2)[1]
				payload.Oauth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetAllProductsByCategoryError returns an encoder for errors returned
// by the getAllProductsByCategory products endpoint.
func EncodeGetAllProductsByCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			res := v.(*products.UnknownError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllProductsByCategoryUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetProductResponse returns an encoder for responses returned by the
// products getProduct endpoint.
func EncodeGetProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*products.GetProductResult)
		enc := encoder(ctx, w)
		body := NewGetProductResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetProductRequest returns a decoder for requests sent to the products
// getProduct endpoint.
func DecodeGetProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id    string
			oauth *string
			err   error

			params = mux.Vars(r)
		)
		id = params["id"]
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		oauthRaw := r.Header.Get("Authorization")
		if oauthRaw != "" {
			oauth = &oauthRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetProductPayload(id, oauth)
		if payload.Oauth != nil {
			if strings.Contains(*payload.Oauth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth, " ", 2)[1]
				payload.Oauth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetProductError returns an encoder for errors returned by the
// getProduct products endpoint.
func EncodeGetProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			res := v.(*products.UnknownError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetProductUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalProductsResProductToResProductResponseBody builds a value of type
// *ResProductResponseBody from a value of type *products.ResProduct.
func marshalProductsResProductToResProductResponseBody(v *products.ResProduct) *ResProductResponseBody {
	res := &ResProductResponseBody{
		ID:       v.ID,
		Name:     v.Name,
		Price:    v.Price,
		Cover:    v.Cover,
		Category: v.Category,
	}

	return res
}
