swagger: "2.0"
info:
  title: Test
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    email: guillaume.morin@epitech.eu
    url: https://guillaume-morin.fr/
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
host: localhost:8088
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      parameters:
      - name: OAuthRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/OAuthOAuthRequestBody'
          required:
          - client_id
          - client_secret
          - grant_type
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/OAuthOAuthCreatedResponseBody'
            required:
            - access_token
            - token_type
            - expires_in
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/OAuthOAuthBadRequestResponseBody'
            required:
            - access_token
            - token_type
            - expires_in
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/OAuthOAuthInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /bo/signin:
    post:
      tags:
      - jwtToken
      summary: signin Bo jwtToken
      description: signin Bo
      operationId: jwtToken#signin Bo
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: Signin BoRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSigninBoRequestBody'
          required:
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSigninBoResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSigninBoEmailAlreadyExistResponseBody'
            required:
            - err
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSigninBoUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSigninBoInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSigninBoUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: RefreshRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenRefreshRequestBody'
          required:
          - refresh_token
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshEmailAlreadyExistResponseBody'
            required:
            - err
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /sign-providers:
    post:
      tags:
      - jwtToken
      summary: auth-providers jwtToken
      description: Register or login by Google, Facebook
      operationId: jwtToken#auth-providers
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: Auth-ProvidersRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenAuthProvidersRequestBody'
          required:
          - email
          - firstname
          - lastname
          - firebase_id_token
          - firebase_uid
          - firebase_provider
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/JWTTokenAuthProvidersCreatedResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenAuthProvidersEmailAlreadyExistResponseBody'
            required:
            - err
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenAuthProvidersUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenAuthProvidersInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenAuthProvidersUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: SigninRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSigninRequestBody'
          required:
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSigninResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSigninEmailAlreadyExistResponseBody'
            required:
            - err
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSigninInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: SignupRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSignupRequestBody'
          required:
          - firstname
          - lastname
          - password
          - email
          - confirm_password
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSignupResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSignupEmailAlreadyExistResponseBody'
            required:
            - err
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSignupInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/bo/product/{id}:
    get:
      tags:
      - boProducts
      summary: getProduct boProducts
      description: Get one product
      operationId: boProducts#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsGetProductResponseBody'
            required:
            - product
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsGetProductUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
    put:
      tags:
      - boProducts
      summary: updateProduct boProducts
      description: Update one product
      operationId: boProducts#updateProduct
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: UpdateProductRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoProductsUpdateProductRequestBody'
          required:
          - product
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsUpdateProductResponseBody'
            required:
            - product
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsUpdateProductUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/product/add:
    post:
      tags:
      - boProducts
      summary: createProduct boProducts
      description: Create one product
      operationId: boProducts#createProduct
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: CreateProductRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoProductsCreateProductRequestBody'
          required:
          - product
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/BoProductsCreateProductResponseBody'
            required:
            - product
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsCreateProductUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/product/remove/{id}:
    delete:
      tags:
      - boProducts
      summary: deleteProduct boProducts
      description: Delete one product by ID
      operationId: boProducts#deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsDeleteProductResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsDeleteProductUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/products/{offset}/{limit}:
    get:
      tags:
      - boProducts
      summary: getAllProducts boProducts
      description: Get All products
      operationId: boProducts#getAllProducts
      parameters:
      - name: field
        in: query
        description: Items order by {field}
        required: false
        type: string
        default: name
      - name: direction
        in: query
        description: Items order by {field} ASC/DESC
        required: false
        type: string
        default: asc
        enum:
        - asc
        - desc
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        type: integer
        format: int32
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        type: integer
        format: int32
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsGetAllProductsResponseBody'
            required:
            - products
            - success
            - count
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsGetAllProductsUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/products/category/{category}:
    get:
      tags:
      - boProducts
      summary: getAllProductsByCategory boProducts
      description: Get All products by category
      operationId: boProducts#getAllProductsByCategory
      parameters:
      - name: category
        in: path
        required: true
        type: string
        default: nothing
        enum:
        - men
        - women
        - hat
        - jacket
        - sneaker
        - nothing
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsGetAllProductsByCategoryResponseBody'
            required:
            - products
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsGetAllProductsByCategoryUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/products/remove:
    patch:
      tags:
      - boProducts
      summary: deleteManyProducts boProducts
      description: Delete many products with IDs send in body
      operationId: boProducts#deleteManyProducts
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: DeleteManyProductsRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoProductsDeleteManyProductsRequestBody'
          required:
          - tab
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoProductsDeleteManyProductsResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoProductsDeleteManyProductsUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/user/{id}:
    get:
      tags:
      - boUsers
      summary: getUser boUsers
      description: Get one User
      operationId: boUsers#getUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersGetUserResponseBody'
            required:
            - user
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersGetUserUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
    put:
      tags:
      - boUsers
      summary: updateUser boUsers
      description: Update one User
      operationId: boUsers#updateUser
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: UpdateUserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoUsersUpdateUserRequestBody'
          required:
          - User
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersUpdateUserResponseBody'
            required:
            - user
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersUpdateUserUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/user/add:
    post:
      tags:
      - boUsers
      summary: createUser boUsers
      description: Create one User
      operationId: boUsers#createUser
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: CreateUserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoUsersCreateUserRequestBody'
          required:
          - email
          - firstname
          - lastname
          - password
          - confirm_password
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/BoUsersCreateUserResponseBody'
            required:
            - user
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersCreateUserUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/user/change/password/{id}:
    patch:
      tags:
      - boUsers
      summary: newPassword boUsers
      description: Change your current password from Back Office
      operationId: boUsers#newPassword
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: NewPasswordRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoUsersNewPasswordRequestBody'
          required:
          - password
          - confirm
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersNewPasswordResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersNewPasswordUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/user/remove/{id}:
    delete:
      tags:
      - boUsers
      summary: deleteUser boUsers
      description: Delete one User by ID
      operationId: boUsers#deleteUser
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersDeleteUserResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersDeleteUserUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/users/{offset}/{limit}:
    get:
      tags:
      - boUsers
      summary: getAllusers boUsers
      description: Get All users
      operationId: boUsers#getAllusers
      parameters:
      - name: field
        in: query
        description: Items order by {field}
        required: false
        type: string
        default: name
      - name: direction
        in: query
        description: Items order by {field} ASC/DESC
        required: false
        type: string
        default: asc
        enum:
        - asc
        - desc
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        type: integer
        format: int32
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        type: integer
        format: int32
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersGetAllusersResponseBody'
            required:
            - users
            - success
            - count
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersGetAllusersUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/bo/users/remove:
    patch:
      tags:
      - boUsers
      summary: deleteManyUsers boUsers
      description: Delete many users with IDs send in body
      operationId: boUsers#deleteManyUsers
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: DeleteManyUsersRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BoUsersDeleteManyUsersRequestBody'
          required:
          - tab
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BoUsersDeleteManyUsersResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BoUsersDeleteManyUsersUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /v1/email-exist:
    post:
      tags:
      - auth
      summary: email-exist auth
      description: Check if email exist in database
      operationId: auth#email-exist
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: Email-ExistRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AuthEmailExistRequestBody'
          required:
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AuthEmailExistResponseBody'
            required:
            - exist
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/AuthEmailExistUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/lost:
    post:
      tags:
      - auth
      summary: send-confirmation auth
      description: Check if email exist in database and send code by email to reset
        password
      operationId: auth#send-confirmation
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: Send-ConfirmationRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AuthSendConfirmationRequestBody'
          required:
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AuthSendConfirmationResponseBody'
            required:
            - exist
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/AuthSendConfirmationUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/reset-password:
    put:
      tags:
      - auth
      summary: reset-password auth
      description: Reset forget password of the user with the correct confirm code
      operationId: auth#reset-password
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: Reset-PasswordRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AuthResetPasswordRequestBody'
          required:
          - email
          - code
          - password
          - confirm_password
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AuthResetPasswordResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/AuthResetPasswordUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/web/product/{id}:
    get:
      tags:
      - products
      summary: getProduct products
      description: Get one product
      operationId: products#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ProductsGetProductResponseBody'
            required:
            - product
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ProductsGetProductUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/web/products:
    get:
      tags:
      - products
      summary: getAllProducts products
      description: Get All products
      operationId: products#getAllProducts
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ProductsGetAllProductsResponseBody'
            required:
            - products
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ProductsGetAllProductsUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/web/products/category/{category}:
    get:
      tags:
      - products
      summary: getAllProductsByCategory products
      description: Get All products by category
      operationId: products#getAllProductsByCategory
      parameters:
      - name: category
        in: path
        required: true
        type: string
        default: nothing
        enum:
        - men
        - women
        - hat
        - jacket
        - sneaker
        - nothing
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/ProductsGetAllProductsByCategoryResponseBody'
            required:
            - products
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/ProductsGetAllProductsByCategoryUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
  /v1/web/user/{id}:
    get:
      tags:
      - users
      summary: getUser users
      description: Get one User
      operationId: users#getUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: false
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/UsersGetUserResponseBody'
            required:
            - user
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/UsersGetUserUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
definitions:
  AuthEmailExistRequestBody:
    title: AuthEmailExistRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@gmail.com
        format: email
    example:
      email: guillaume@gmail.com
    required:
    - email
  AuthEmailExistResponseBody:
    title: AuthEmailExistResponseBody
    type: object
    properties:
      exist:
        type: boolean
        example: false
      success:
        type: boolean
        example: true
    example:
      exist: false
      success: true
    required:
    - exist
    - success
  AuthEmailExistUnknownErrorResponseBody:
    title: AuthEmailExistUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  AuthResetPasswordRequestBody:
    title: AuthResetPasswordRequestBody
    type: object
    properties:
      code:
        type: string
        example: ZGI5EV
      confirm_password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      email:
        type: string
        example: guillaume@gmail.com
        format: email
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
    example:
      code: ZGI5EV
      confirm_password: JeSuisUnTest974
      email: guillaume@gmail.com
      password: JeSuisUnTest974
    required:
    - email
    - code
    - password
    - confirm_password
  AuthResetPasswordResponseBody:
    title: AuthResetPasswordResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
    example:
      success: true
    required:
    - success
  AuthResetPasswordUnknownErrorResponseBody:
    title: AuthResetPasswordUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  AuthSendConfirmationRequestBody:
    title: AuthSendConfirmationRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@gmail.com
        format: email
    example:
      email: guillaume@gmail.com
    required:
    - email
  AuthSendConfirmationResponseBody:
    title: AuthSendConfirmationResponseBody
    type: object
    properties:
      exist:
        type: boolean
        example: true
      success:
        type: boolean
        example: true
    example:
      exist: true
      success: true
    required:
    - exist
    - success
  AuthSendConfirmationUnknownErrorResponseBody:
    title: AuthSendConfirmationUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoProductsCreateProductRequestBody:
    title: BoProductsCreateProductRequestBody
    type: object
    properties:
      product:
        $ref: '#/definitions/payloadProductRequestBody'
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name: Guillaume
        price: 69
    required:
    - product
  BoProductsCreateProductResponseBody:
    title: BoProductsCreateProductResponseBody
    type: object
    properties:
      product:
        $ref: '#/definitions/resBoProductResponseBody'
      success:
        type: boolean
        example: true
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - product
    - success
  BoProductsCreateProductUnknownErrorResponseBody:
    title: BoProductsCreateProductUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoProductsDeleteManyProductsRequestBody:
    title: BoProductsDeleteManyProductsRequestBody
    type: object
    properties:
      tab:
        type: array
        items:
          type: string
          example: Laborum ab occaecati sit numquam voluptatem.
        example:
        - Dolores distinctio ut et expedita hic eos.
        - Neque ut ut facere hic quibusdam aut.
    example:
      tab:
      - Et fugiat quidem.
      - Ad magni corrupti veniam modi reiciendis.
      - Repellendus ad aliquid aut dolores.
    required:
    - tab
  BoProductsDeleteManyProductsResponseBody:
    title: BoProductsDeleteManyProductsResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: true
    example:
      success: true
    required:
    - success
  BoProductsDeleteManyProductsUnknownErrorResponseBody:
    title: BoProductsDeleteManyProductsUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoProductsDeleteProductResponseBody:
    title: BoProductsDeleteProductResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
    example:
      success: true
    required:
    - success
  BoProductsDeleteProductUnknownErrorResponseBody:
    title: BoProductsDeleteProductUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoProductsGetAllProductsByCategoryResponseBody:
    title: BoProductsGetAllProductsByCategoryResponseBody
    type: object
    properties:
      products:
        type: array
        items:
          $ref: '#/definitions/resBoProductResponseBody'
        description: Result is an array of object
        example:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
      success:
        type: boolean
        example: true
    example:
      products:
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - products
    - success
  BoProductsGetAllProductsByCategoryUnknownErrorResponseBody:
    title: BoProductsGetAllProductsByCategoryUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoProductsGetAllProductsResponseBody:
    title: BoProductsGetAllProductsResponseBody
    type: object
    properties:
      count:
        type: integer
        description: total of products
        example: 4409907116812894482
        format: int64
      products:
        type: array
        items:
          $ref: '#/definitions/resBoProductResponseBody'
        description: All products by category
        example:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
      success:
        type: boolean
        example: false
    example:
      count: 4477652529007045693
      products:
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - products
    - success
    - count
  BoProductsGetAllProductsUnknownErrorResponseBody:
    title: BoProductsGetAllProductsUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoProductsGetProductResponseBody:
    title: BoProductsGetProductResponseBody
    type: object
    properties:
      product:
        $ref: '#/definitions/resBoProductResponseBody'
      success:
        type: boolean
        example: false
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - product
    - success
  BoProductsGetProductUnknownErrorResponseBody:
    title: BoProductsGetProductUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoProductsUpdateProductRequestBody:
    title: BoProductsUpdateProductRequestBody
    type: object
    properties:
      product:
        $ref: '#/definitions/payloadProductRequestBody'
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name: Guillaume
        price: 69
    required:
    - product
  BoProductsUpdateProductResponseBody:
    title: BoProductsUpdateProductResponseBody
    type: object
    properties:
      product:
        $ref: '#/definitions/resBoProductResponseBody'
      success:
        type: boolean
        example: true
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - product
    - success
  BoProductsUpdateProductUnknownErrorResponseBody:
    title: BoProductsUpdateProductUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoUsersCreateUserRequestBody:
    title: BoUsersCreateUserRequestBody
    type: object
    properties:
      birthday:
        type: string
        default: ""
        example: 01/09/2002
      confirm_password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      email:
        type: string
        example: guillaume.morin@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
        minLength: 3
      lastname:
        type: string
        example: Morin
        minLength: 3
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      phone:
        type: string
        default: ""
        example: +262 692 12 34 56
      role:
        type: string
        default: user
        example: user
        enum:
        - user
        - pro
        - admin
    example:
      birthday: 01/09/2002
      confirm_password: JeSuisUnTest974
      email: guillaume.morin@epitech.eu
      firstname: Guillaume
      lastname: Morin
      password: JeSuisUnTest974
      phone: +262 692 12 34 56
      role: user
    required:
    - email
    - firstname
    - lastname
    - password
    - confirm_password
  BoUsersCreateUserResponseBody:
    title: BoUsersCreateUserResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: true
      user:
        $ref: '#/definitions/resBoUserResponseBody'
    example:
      success: false
      user:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
    required:
    - user
    - success
  BoUsersCreateUserUnknownErrorResponseBody:
    title: BoUsersCreateUserUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoUsersDeleteManyUsersRequestBody:
    title: BoUsersDeleteManyUsersRequestBody
    type: object
    properties:
      tab:
        type: array
        items:
          type: string
          example: Et tempore ipsam.
        example:
        - Vel quia aut id dolor reiciendis minus.
        - Et voluptas cumque accusantium.
    example:
      tab:
      - Autem praesentium consequatur dolor ratione ut.
      - Optio cum adipisci possimus mollitia ex ab.
      - Nihil sequi error.
      - Qui voluptates.
    required:
    - tab
  BoUsersDeleteManyUsersResponseBody:
    title: BoUsersDeleteManyUsersResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
    example:
      success: false
    required:
    - success
  BoUsersDeleteManyUsersUnknownErrorResponseBody:
    title: BoUsersDeleteManyUsersUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoUsersDeleteUserResponseBody:
    title: BoUsersDeleteUserResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: true
    example:
      success: true
    required:
    - success
  BoUsersDeleteUserUnknownErrorResponseBody:
    title: BoUsersDeleteUserUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoUsersGetAllusersResponseBody:
    title: BoUsersGetAllusersResponseBody
    type: object
    properties:
      count:
        type: integer
        description: total of users
        example: 6659443424815802565
        format: int64
      success:
        type: boolean
        example: true
      users:
        type: array
        items:
          $ref: '#/definitions/resBoUserResponseBody'
        description: All users
        example:
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
    example:
      count: 6880643530694030864
      success: false
      users:
      - birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
      - birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
      - birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
      - birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
    required:
    - users
    - success
    - count
  BoUsersGetAllusersUnknownErrorResponseBody:
    title: BoUsersGetAllusersUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  BoUsersGetUserResponseBody:
    title: BoUsersGetUserResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: true
      user:
        $ref: '#/definitions/resBoUserResponseBody'
    example:
      success: true
      user:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
    required:
    - user
    - success
  BoUsersGetUserUnknownErrorResponseBody:
    title: BoUsersGetUserUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoUsersNewPasswordRequestBody:
    title: BoUsersNewPasswordRequestBody
    type: object
    properties:
      confirm:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
    example:
      confirm: JeSuisUnTest974
      password: JeSuisUnTest974
    required:
    - password
    - confirm
  BoUsersNewPasswordResponseBody:
    title: BoUsersNewPasswordResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: true
    example:
      success: true
    required:
    - success
  BoUsersNewPasswordUnknownErrorResponseBody:
    title: BoUsersNewPasswordUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  BoUsersUpdateUserRequestBody:
    title: BoUsersUpdateUserRequestBody
    type: object
    properties:
      User:
        $ref: '#/definitions/payloadUserRequestBody'
    example:
      User:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
    required:
    - User
  BoUsersUpdateUserResponseBody:
    title: BoUsersUpdateUserResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
      user:
        $ref: '#/definitions/resBoUserResponseBody'
    example:
      success: false
      user:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
    required:
    - user
    - success
  BoUsersUpdateUserUnknownErrorResponseBody:
    title: BoUsersUpdateUserUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenAuthProvidersBadRequestResponseBody:
    title: JWTTokenAuthProvidersBadRequestResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenAuthProvidersCreatedResponseBody:
    title: JWTTokenAuthProvidersCreatedResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: false
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenAuthProvidersEmailAlreadyExistResponseBody:
    title: JWTTokenAuthProvidersEmailAlreadyExistResponseBody
    type: object
    properties:
      err:
        type: string
        example: Praesentium tempore dolores et ut.
      success:
        type: boolean
        default: false
        example: true
    description: When email already exist
    example:
      err: Qui assumenda.
      success: false
    required:
    - err
    - success
  JWTTokenAuthProvidersInvalidScopesResponseBody:
    title: JWTTokenAuthProvidersInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Quidem neque earum cum beatae numquam.
  JWTTokenAuthProvidersRequestBody:
    title: JWTTokenAuthProvidersRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      firebase_id_token:
        type: string
        example: 37f
        minLength: 400
      firebase_provider:
        type: string
        example: facebook.com
      firebase_uid:
        type: string
        example: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
        minLength: 15
      firstname:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 15
      lastname:
        type: string
        example: Morin
        minLength: 3
    example:
      email: guillaume@epitech.eu
      firebase_id_token: k7w
      firebase_provider: facebook.com
      firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
      firstname: Guillaume
      lastname: Morin
    required:
    - email
    - firstname
    - lastname
    - firebase_id_token
    - firebase_uid
    - firebase_provider
  JWTTokenAuthProvidersUnauthorizedResponseBody:
    title: JWTTokenAuthProvidersUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Quidem est possimus provident occaecati libero id.
  JWTTokenAuthProvidersUnknownErrorResponseBody:
    title: JWTTokenAuthProvidersUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenRefreshEmailAlreadyExistResponseBody:
    title: JWTTokenRefreshEmailAlreadyExistResponseBody
    type: object
    properties:
      err:
        type: string
        example: Quisquam quidem culpa nostrum qui.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      err: Cum magni ut qui eius.
      success: true
    required:
    - err
    - success
  JWTTokenRefreshInvalidScopesResponseBody:
    title: JWTTokenRefreshInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Aut et enim nam cum ad.
  JWTTokenRefreshRequestBody:
    title: JWTTokenRefreshRequestBody
    type: object
    properties:
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    example:
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    required:
    - refresh_token
  JWTTokenRefreshResponseBody:
    title: JWTTokenRefreshResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenRefreshUnauthorizedResponseBody:
    title: JWTTokenRefreshUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Blanditiis facilis nihil.
  JWTTokenRefreshUnknownErrorResponseBody:
    title: JWTTokenRefreshUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  JWTTokenSigninBoEmailAlreadyExistResponseBody:
    title: JWTTokenSigninBoEmailAlreadyExistResponseBody
    type: object
    properties:
      err:
        type: string
        example: Veniam possimus quidem.
      success:
        type: boolean
        default: false
        example: true
    description: When email already exist
    example:
      err: Atque ut explicabo omnis esse assumenda.
      success: true
    required:
    - err
    - success
  JWTTokenSigninBoInvalidScopesResponseBody:
    title: JWTTokenSigninBoInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Velit a fugit ut tempora.
  JWTTokenSigninBoRequestBody:
    title: JWTTokenSigninBoRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
    example:
      email: guillaume@epitech.eu
      password: JeSuisUnTest974
    required:
    - password
    - email
  JWTTokenSigninBoResponseBody:
    title: JWTTokenSigninBoResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: false
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSigninBoUnauthorizedResponseBody:
    title: JWTTokenSigninBoUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Asperiores placeat.
  JWTTokenSigninBoUnknownErrorResponseBody:
    title: JWTTokenSigninBoUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenSigninEmailAlreadyExistResponseBody:
    title: JWTTokenSigninEmailAlreadyExistResponseBody
    type: object
    properties:
      err:
        type: string
        example: Maiores deserunt ut voluptatem omnis et omnis.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      err: Nulla rem consequatur dolorum vero.
      success: true
    required:
    - err
    - success
  JWTTokenSigninInvalidScopesResponseBody:
    title: JWTTokenSigninInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Velit qui consequatur.
  JWTTokenSigninRequestBody:
    title: JWTTokenSigninRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
    example:
      email: guillaume@epitech.eu
      password: JeSuisUnTest974
    required:
    - password
    - email
  JWTTokenSigninResponseBody:
    title: JWTTokenSigninResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: false
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: false
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSigninUnauthorizedResponseBody:
    title: JWTTokenSigninUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Architecto laborum est et porro.
  JWTTokenSigninUnknownErrorResponseBody:
    title: JWTTokenSigninUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenSignupEmailAlreadyExistResponseBody:
    title: JWTTokenSignupEmailAlreadyExistResponseBody
    type: object
    properties:
      err:
        type: string
        example: Vero sit eius aperiam.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      err: Placeat dicta ratione autem eum alias quo.
      success: true
    required:
    - err
    - success
  JWTTokenSignupInvalidScopesResponseBody:
    title: JWTTokenSignupInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Consequatur nulla architecto perspiciatis et ullam.
  JWTTokenSignupRequestBody:
    title: JWTTokenSignupRequestBody
    type: object
    properties:
      birthday:
        type: string
        default: ""
        example: Iusto nesciunt libero.
      confirm_password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 15
      lastname:
        type: string
        example: Morin
        minLength: 3
      password:
        type: string
        description: Minimum 8 charactères / Chiffre Obligatoire
        example: JeSuisUnTest974
        pattern: \d
        minLength: 8
      phone:
        type: string
        default: ""
        example: +262 692 12 34 56
    example:
      birthday: Voluptas necessitatibus explicabo nam.
      confirm_password: JeSuisUnTest974
      email: guillaume@epitech.eu
      firstname: Guillaume
      lastname: Morin
      password: JeSuisUnTest974
      phone: +262 692 12 34 56
    required:
    - firstname
    - lastname
    - password
    - email
    - confirm_password
  JWTTokenSignupResponseBody:
    title: JWTTokenSignupResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSignupUnauthorizedResponseBody:
    title: JWTTokenSignupUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Omnis vel impedit saepe.
  JWTTokenSignupUnknownErrorResponseBody:
    title: JWTTokenSignupUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  OAuthOAuthBadRequestResponseBody:
    title: OAuthOAuthBadRequestResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Veritatis qui voluptas.
      expires_in:
        type: integer
        example: 9050124561622228567
        format: int64
      success:
        type: boolean
        example: false
      token_type:
        type: string
        example: Eligendi odio qui velit accusantium minus voluptate.
    example:
      access_token: Asperiores enim eum illo quasi in.
      expires_in: 1444740656100902353
      success: false
      token_type: Adipisci est quasi hic repudiandae architecto beatae.
    required:
    - access_token
    - token_type
    - expires_in
    - success
  OAuthOAuthCreatedResponseBody:
    title: OAuthOAuthCreatedResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Autem omnis soluta dolorem modi.
      expires_in:
        type: integer
        example: 5729602615357919089
        format: int64
      success:
        type: boolean
        example: false
      token_type:
        type: string
        example: Maxime molestias veritatis dignissimos perferendis.
    example:
      access_token: Et temporibus.
      expires_in: 8535814751586005998
      success: false
      token_type: Exercitationem voluptas natus.
    required:
    - access_token
    - token_type
    - expires_in
    - success
  OAuthOAuthInvalidScopesResponseBody:
    title: OAuthOAuthInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Quod fugit debitis et autem minima ut.
  OAuthOAuthRequestBody:
    title: OAuthOAuthRequestBody
    type: object
    properties:
      client_id:
        type: string
        example: Dolore vel aliquam.
      client_secret:
        type: string
        example: Ad suscipit eligendi culpa eius.
      grant_type:
        type: string
        example: Debitis repudiandae laboriosam id.
    example:
      client_id: Adipisci qui eius.
      client_secret: Corporis provident reiciendis cum qui quaerat tempora.
      grant_type: Et magni necessitatibus.
    required:
    - client_id
    - client_secret
    - grant_type
  OAuthOAuthUnauthorizedResponseBody:
    title: OAuthOAuthUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Itaque praesentium tempora.
  OAuthOAuthUnknownErrorResponseBody:
    title: OAuthOAuthUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  ProductsGetAllProductsByCategoryResponseBody:
    title: ProductsGetAllProductsByCategoryResponseBody
    type: object
    properties:
      products:
        type: array
        items:
          $ref: '#/definitions/resProductResponseBody'
        description: Result is an array of object
        example:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
      success:
        type: boolean
        example: true
    example:
      products:
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - products
    - success
  ProductsGetAllProductsByCategoryUnknownErrorResponseBody:
    title: ProductsGetAllProductsByCategoryUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: true
    required:
    - err
    - success
    - error_code
  ProductsGetAllProductsResponseBody:
    title: ProductsGetAllProductsResponseBody
    type: object
    properties:
      products:
        type: array
        items:
          $ref: '#/definitions/resProductResponseBody'
        description: Result is an array of object
        example:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
      success:
        type: boolean
        example: false
    example:
      products:
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: true
    required:
    - products
    - success
  ProductsGetAllProductsUnknownErrorResponseBody:
    title: ProductsGetAllProductsUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  ProductsGetProductResponseBody:
    title: ProductsGetProductResponseBody
    type: object
    properties:
      product:
        $ref: '#/definitions/resProductResponseBody'
      success:
        type: boolean
        example: false
    example:
      product:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - product
    - success
  ProductsGetProductUnknownErrorResponseBody:
    title: ProductsGetProductUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  UsersGetUserResponseBody:
    title: UsersGetUserResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
      user:
        $ref: '#/definitions/resUserResponseBody'
    example:
      success: false
      user:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
    required:
    - user
    - success
  UsersGetUserUnknownErrorResponseBody:
    title: UsersGetUserUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: sql no rows affected
      error_code:
        type: string
        example: TX_UPDATE_ITEM
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: sql no rows affected
      error_code: TX_UPDATE_ITEM
      success: false
    required:
    - err
    - success
    - error_code
  payloadProductRequestBody:
    title: payloadProductRequestBody
    type: object
    properties:
      category:
        type: string
        default: nothing
        example: men
        enum:
        - men
        - women
        - hat
        - jacket
        - sneaker
        - nothing
      cover:
        type: string
        example: https://i.ibb.co/ypkgK0X/blue-beanie.png
      name:
        type: string
        example: Guillaume
        minLength: 3
      price:
        type: number
        example: 69
        minimum: 0
    example:
      category: men
      cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
      name: Guillaume
      price: 69
    required:
    - name
    - price
    - cover
    - category
  payloadUserRequestBody:
    title: payloadUserRequestBody
    type: object
    properties:
      birthday:
        type: string
        default: ""
        example: 01/09/2002
      email:
        type: string
        example: guillaume.morin@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
        minLength: 3
      lastname:
        type: string
        example: Morin
        minLength: 3
      phone:
        type: string
        default: ""
        example: +262 692 12 34 56
      role:
        type: string
        default: user
        example: user
        enum:
        - user
        - pro
        - admin
    example:
      birthday: 01/09/2002
      email: guillaume.morin@epitech.eu
      firstname: Guillaume
      lastname: Morin
      phone: +262 692 12 34 56
      role: user
    required:
    - email
    - firstname
    - lastname
  resBoProductResponseBody:
    title: resBoProductResponseBody
    type: object
    properties:
      category:
        type: string
        example: men
      cover:
        type: string
        example: https://i.ibb.co/ypkgK0X/blue-beanie.png
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      name:
        type: string
        example: Guillaume
      price:
        type: number
        example: 69
        format: double
    example:
      category: men
      cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      name: Guillaume
      price: 69
    required:
    - id
    - name
    - price
    - cover
    - category
  resBoUserResponseBody:
    title: resBoUserResponseBody
    type: object
    properties:
      birthday:
        type: string
        default: ""
        example: 01/09/2002
      email:
        type: string
        example: guillaume.morin@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      lastname:
        type: string
        example: Morin
      phone:
        type: string
        default: ""
        example: +262 692 12 34 56
      role:
        type: string
        default: user
        example: user
        enum:
        - user
        - pro
        - admin
    example:
      birthday: 01/09/2002
      email: guillaume.morin@epitech.eu
      firstname: Guillaume
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      lastname: Morin
      phone: +262 692 12 34 56
      role: user
    required:
    - id
    - email
  resProductResponseBody:
    title: resProductResponseBody
    type: object
    properties:
      category:
        type: string
        example: men
      cover:
        type: string
        example: https://i.ibb.co/ypkgK0X/blue-beanie.png
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      name:
        type: string
        example: Guillaume
      price:
        type: number
        example: 69
        format: double
    example:
      category: men
      cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      name: Guillaume
      price: 69
    required:
    - id
    - name
    - price
    - cover
    - category
  resUserResponseBody:
    title: resUserResponseBody
    type: object
    properties:
      birthday:
        type: string
        default: ""
        example: 01/09/2002
      email:
        type: string
        example: guillaume.morin@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      lastname:
        type: string
        example: Morin
      phone:
        type: string
        default: ""
        example: +262 692 12 34 56
    example:
      birthday: 01/09/2002
      email: guillaume.morin@epitech.eu
      firstname: Guillaume
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      lastname: Morin
      phone: +262 692 12 34 56
    required:
    - id
    - email
securityDefinitions:
  OAuth2_header_Authorization:
    type: oauth2
    description: Use OAuth2 to authenticate
    flow: application
    tokenUrl: /authorization
    scopes:
      api:read: Provides read access
  jwt_header_jwtToken:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".

      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: jwtToken
    in: header
