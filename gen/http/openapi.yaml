swagger: "2.0"
info:
  title: Basic CRUD
  description: Exemple for api crud
  version: "1.0"
host: localhost:8088
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      parameters:
      - name: client_id
        in: header
        description: The client identifier ID
        required: true
        type: string
      - name: client_secret
        in: header
        description: The client identifier secret
        required: true
        type: string
      - name: grant_type
        in: header
        description: The type of grant
        required: false
        type: string
        default: client_credentials
      responses:
        "302":
          description: Found response.
          schema:
            $ref: '#/definitions/OAuthOAuthFoundResponseBody'
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/OAuthOAuthBadRequestResponseBody'
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/OAuthOAuthInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /book/{id}:
    get:
      tags:
      - crud
      summary: getBook crud
      description: Get one item
      operationId: crud#getBook
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: JWT used for authentication
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CrudGetBookResponseBody'
            required:
            - id
            - name
            - price
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/CrudGetBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - crud
      summary: updateBook crud
      description: Update one item
      operationId: crud#updateBook
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: UpdateBookRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/CrudUpdateBookRequestBody'
          required:
          - name
          - price
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CrudUpdateBookResponseBody'
            required:
            - id
            - name
            - price
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/CrudUpdateBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /book/add:
    post:
      tags:
      - crud
      summary: createBook crud
      description: Create one item
      operationId: crud#createBook
      parameters:
      - name: CreateBookRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/CrudCreateBookRequestBody'
          required:
          - name
          - price
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/CrudCreateBookResponseBody'
            required:
            - book
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/CrudCreateBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /book/remove/{id}:
    delete:
      tags:
      - crud
      summary: deleteBook crud
      description: Delete one item by ID
      operationId: crud#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CrudDeleteBookResponseBody'
            required:
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/CrudDeleteBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /books:
    get:
      tags:
      - crud
      summary: getAllBooks crud
      description: Read All items
      operationId: crud#getAllBooks
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/CrudGetAllBooksResponseBody'
            required:
            - books
            - success
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/CrudGetAllBooksUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      parameters:
      - name: SigninRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSigninRequestBody'
          required:
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSigninResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSigninEmailAlreadyExistResponseBody'
            required:
            - message
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSigninInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup
      operationId: jwtToken#signup
      parameters:
      - name: SignupRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSignupRequestBody'
          required:
          - firstname
          - lastname
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSignupResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSignupEmailAlreadyExistResponseBody'
            required:
            - message
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSignupInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - http
definitions:
  BookResponseResponseBody:
    title: BookResponseResponseBody
    type: object
    properties:
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      name:
        type: string
        example: Guillaume
      price:
        type: number
        example: 0.07407355386143681
        format: double
    example:
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      name: Guillaume
      price: 0.006907510638914587
    required:
    - id
    - name
    - price
  CrudCreateBookIDDoesntExistResponseBody:
    title: CrudCreateBookIDDoesntExistResponseBody
    type: object
    properties:
      err:
        type: string
        description: Returning error
        example: Ut delectus distinctio quia et.
      id:
        type: string
        example: Voluptate dignissimos aut rerum dolor.
      success:
        type: boolean
        default: false
        example: true
    description: When ID doesn't exist
    example:
      err: Quia suscipit.
      id: Ad dolores aperiam.
      success: false
    required:
    - err
    - success
    - id
  CrudCreateBookRequestBody:
    title: CrudCreateBookRequestBody
    type: object
    properties:
      name:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 10
      price:
        type: number
        example: 0.3327154769454272
        format: double
    example:
      name: Guillaume
      price: 0.011711926354456203
    required:
    - name
    - price
  CrudCreateBookResponseBody:
    title: CrudCreateBookResponseBody
    type: object
    properties:
      book:
        $ref: '#/definitions/BookResponseResponseBody'
      success:
        type: boolean
        example: true
    example:
      book:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.4805611818105851
      success: true
    required:
    - book
    - success
  CrudCreateBookUnknownErrorResponseBody:
    title: CrudCreateBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Rerum consectetur corporis consequatur possimus.
      error_code:
        type: string
        example: Nobis beatae eos praesentium dolores ut.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Tempore dolorem tenetur.
      error_code: Accusantium consequatur eos repellat.
      success: true
    required:
    - err
    - success
    - error_code
  CrudDeleteBookIDDoesntExistResponseBody:
    title: CrudDeleteBookIDDoesntExistResponseBody
    type: object
    properties:
      err:
        type: string
        description: Returning error
        example: Quia et est quis voluptate molestiae et.
      id:
        type: string
        example: Aut debitis voluptatem.
      success:
        type: boolean
        default: false
        example: true
    description: When ID doesn't exist
    example:
      err: Numquam eos laborum non.
      id: Reiciendis voluptas alias magni labore est.
      success: true
    required:
    - err
    - success
    - id
  CrudDeleteBookResponseBody:
    title: CrudDeleteBookResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
    example:
      success: false
    required:
    - success
  CrudDeleteBookUnknownErrorResponseBody:
    title: CrudDeleteBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Fugiat deserunt ipsum.
      error_code:
        type: string
        example: Quia aut dolores laboriosam a autem recusandae.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Corporis ut perspiciatis.
      error_code: Ipsum neque dolorum molestias voluptatum.
      success: true
    required:
    - err
    - success
    - error_code
  CrudGetAllBooksIDDoesntExistResponseBody:
    title: CrudGetAllBooksIDDoesntExistResponseBody
    type: object
    properties:
      err:
        type: string
        description: Returning error
        example: Ratione est ut.
      id:
        type: string
        example: Enim ad excepturi alias id.
      success:
        type: boolean
        default: false
        example: true
    description: When ID doesn't exist
    example:
      err: Autem itaque rerum est tenetur molestias.
      id: Culpa nobis doloribus nulla eos corrupti sit.
      success: false
    required:
    - err
    - success
    - id
  CrudGetAllBooksResponseBody:
    title: CrudGetAllBooksResponseBody
    type: object
    properties:
      books:
        type: array
        items:
          $ref: '#/definitions/BookResponseResponseBody'
        example:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.4805611818105851
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.4805611818105851
      success:
        type: boolean
        example: false
    example:
      books:
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.4805611818105851
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.4805611818105851
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.4805611818105851
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.4805611818105851
      success: true
    required:
    - books
    - success
  CrudGetAllBooksUnknownErrorResponseBody:
    title: CrudGetAllBooksUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Veniam quaerat sint consequatur.
      error_code:
        type: string
        example: Autem facere ad non.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Et et.
      error_code: Est quas atque.
      success: true
    required:
    - err
    - success
    - error_code
  CrudGetBookIDDoesntExistResponseBody:
    title: CrudGetBookIDDoesntExistResponseBody
    type: object
    properties:
      err:
        type: string
        description: Returning error
        example: Totam nihil dolorum ea voluptas dolorum.
      id:
        type: string
        example: Officiis necessitatibus nisi.
      success:
        type: boolean
        default: false
        example: true
    description: When ID doesn't exist
    example:
      err: Accusantium repudiandae possimus autem.
      id: Vel quod.
      success: true
    required:
    - err
    - success
    - id
  CrudGetBookResponseBody:
    title: CrudGetBookResponseBody
    type: object
    properties:
      id:
        type: string
        example: Nihil ut quasi sed nihil molestiae.
      name:
        type: string
        example: Sit ut.
      price:
        type: number
        example: 0.5885996697672798
        format: double
      success:
        type: boolean
        example: false
    example:
      id: Molestiae temporibus ipsa aut impedit sequi.
      name: Sint dignissimos blanditiis.
      price: 0.7627131481051412
      success: true
    required:
    - id
    - name
    - price
    - success
  CrudGetBookUnknownErrorResponseBody:
    title: CrudGetBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Animi ea ut mollitia tenetur et.
      error_code:
        type: string
        example: Qui sed.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Molestiae illum autem adipisci nulla velit.
      error_code: Enim molestiae.
      success: false
    required:
    - err
    - success
    - error_code
  CrudUpdateBookIDDoesntExistResponseBody:
    title: CrudUpdateBookIDDoesntExistResponseBody
    type: object
    properties:
      err:
        type: string
        description: Returning error
        example: Animi reiciendis dolor excepturi.
      id:
        type: string
        example: Beatae dolor atque officiis incidunt maxime sequi.
      success:
        type: boolean
        default: false
        example: false
    description: When ID doesn't exist
    example:
      err: Debitis repellat quia.
      id: Totam enim.
      success: false
    required:
    - err
    - success
    - id
  CrudUpdateBookRequestBody:
    title: CrudUpdateBookRequestBody
    type: object
    properties:
      name:
        type: string
        example: Guillaume
      price:
        type: number
        example: 0.26865427959662674
        format: double
    example:
      name: Guillaume
      price: 0.31948299228912014
    required:
    - name
    - price
  CrudUpdateBookResponseBody:
    title: CrudUpdateBookResponseBody
    type: object
    properties:
      id:
        type: string
        example: Cumque facere blanditiis tempora.
      name:
        type: string
        example: Quidem cupiditate excepturi sint.
      price:
        type: number
        example: 0.9950506242230167
        format: double
      success:
        type: boolean
        example: false
    example:
      id: Nam fugiat dicta explicabo.
      name: Fuga eos incidunt et fuga illo reprehenderit.
      price: 0.001243820780850633
      success: true
    required:
    - id
    - name
    - price
    - success
  CrudUpdateBookUnknownErrorResponseBody:
    title: CrudUpdateBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Repellendus repellendus.
      error_code:
        type: string
        example: Et porro minus minus iure.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Harum ad sequi accusantium id sed.
      error_code: Occaecati sed vel.
      success: true
    required:
    - err
    - success
    - error_code
  JWTTokenSigninEmailAlreadyExistResponseBody:
    title: JWTTokenSigninEmailAlreadyExistResponseBody
    type: object
    properties:
      message:
        type: string
        example: Tempora consequatur autem dicta veritatis.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      message: Accusantium unde occaecati ipsum quo.
      success: false
    required:
    - message
    - success
  JWTTokenSigninInvalidScopesResponseBody:
    title: JWTTokenSigninInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Nesciunt reprehenderit et.
  JWTTokenSigninRequestBody:
    title: JWTTokenSigninRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      password:
        type: string
        example: wi5
        minLength: 8
    example:
      email: guillaume@epitech.eu
      password: 71v
    required:
    - password
    - email
  JWTTokenSigninResponseBody:
    title: JWTTokenSigninResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSigninUnauthorizedResponseBody:
    title: JWTTokenSigninUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Architecto officiis eum magni sunt assumenda.
  JWTTokenSigninUnknownErrorResponseBody:
    title: JWTTokenSigninUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Quibusdam reprehenderit.
      error_code:
        type: string
        example: Voluptatum rem consequatur dolores veniam.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Nobis ut quos assumenda.
      error_code: Quo quia quam.
      success: true
    required:
    - err
    - success
    - error_code
  JWTTokenSignupEmailAlreadyExistResponseBody:
    title: JWTTokenSignupEmailAlreadyExistResponseBody
    type: object
    properties:
      message:
        type: string
        example: Ut dolorem numquam totam.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      message: Optio assumenda doloremque.
      success: true
    required:
    - message
    - success
  JWTTokenSignupInvalidScopesResponseBody:
    title: JWTTokenSignupInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Minima nemo et.
  JWTTokenSignupRequestBody:
    title: JWTTokenSignupRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 15
      lastname:
        type: string
        example: Morin
        minLength: 3
      password:
        type: string
        example: dew
        minLength: 8
    description: Use client ID and client secret to oAuth
    example:
      email: guillaume@epitech.eu
      firstname: Guillaume
      lastname: Morin
      password: 9tx
    required:
    - firstname
    - lastname
    - password
    - email
  JWTTokenSignupResponseBody:
    title: JWTTokenSignupResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: false
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: true
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSignupUnauthorizedResponseBody:
    title: JWTTokenSignupUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Blanditiis quis laudantium laboriosam culpa facilis.
  JWTTokenSignupUnknownErrorResponseBody:
    title: JWTTokenSignupUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Non tempore molestiae quia.
      error_code:
        type: string
        example: Alias et et quibusdam distinctio sit.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Eos asperiores.
      error_code: Ea culpa totam quisquam optio qui.
      success: false
    required:
    - err
    - success
    - error_code
  OAuthOAuthBadRequestResponseBody:
    title: OAuthOAuthBadRequestResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Quod hic officiis sit nihil dignissimos.
      expires_in:
        type: integer
        example: 8479232283260744175
        format: int64
      success:
        type: boolean
        example: true
      token_type:
        type: string
        example: Consequatur quia optio et vel.
    example:
      access_token: Cumque totam.
      expires_in: 4055415584478623205
      success: true
      token_type: Cumque minus qui doloribus omnis nam.
  OAuthOAuthFoundResponseBody:
    title: OAuthOAuthFoundResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Reiciendis quasi perspiciatis architecto sapiente quasi aspernatur.
      expires_in:
        type: integer
        example: 4572278782849290792
        format: int64
      success:
        type: boolean
        example: true
      token_type:
        type: string
        example: Nam ipsum in a.
    example:
      access_token: Incidunt quibusdam atque.
      expires_in: 4438067984530885649
      success: true
      token_type: Officiis autem a quas ut ea aut.
  OAuthOAuthInvalidScopesResponseBody:
    title: OAuthOAuthInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Tenetur eos tenetur.
  OAuthOAuthUnauthorizedResponseBody:
    title: OAuthOAuthUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Nihil officiis.
  OAuthOAuthUnknownErrorResponseBody:
    title: OAuthOAuthUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Odit aliquam quia asperiores eum et.
      error_code:
        type: string
        example: Voluptas maxime.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Voluptatem eius iusto dignissimos.
      error_code: Quam molestias possimus sunt.
      success: false
    required:
    - err
    - success
    - error_code
securityDefinitions:
  jwt_header_Authorization:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".

      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: Authorization
    in: header
