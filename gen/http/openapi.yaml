swagger: "2.0"
info:
  title: Starter Pack
  description: Best API REST building with GoaDesign
  contact:
    name: Thomas LEMAITRE
    email: support@squirrel.fr
    url: https://www.squirrel.fr/
  license:
    name: SQUIRREL X GM
    url: https://www.squirrel.fr/
  version: "1.0"
host: localhost:8088
consumes:
- application/json
- application/xml
- application/gob
produces:
- application/json
- application/xml
- application/gob
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      parameters:
      - name: OAuthRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/OAuthOAuthRequestBody'
          required:
          - client_id
          - client_secret
          - grant_type
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/OAuthOAuthCreatedResponseBody'
            required:
            - access_token
            - token_type
            - expires_in
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/OAuthOAuthBadRequestResponseBody'
            required:
            - access_token
            - token_type
            - expires_in
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/OAuthOAuthInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/OAuthOAuthUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - https
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      parameters:
      - name: RefreshRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenRefreshRequestBody'
          required:
          - refresh_token
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshEmailAlreadyExistResponseBody'
            required:
            - message
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenRefreshUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      parameters:
      - name: SigninRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSigninRequestBody'
          required:
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSigninResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSigninEmailAlreadyExistResponseBody'
            required:
            - message
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSigninInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSigninUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      parameters:
      - name: SignupRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/JWTTokenSignupRequestBody'
          required:
          - firstname
          - lastname
          - password
          - email
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/JWTTokenSignupResponseBody'
            required:
            - access_token
            - refresh_token
            - success
        "400":
          description: Bad Request response.
          schema:
            $ref: '#/definitions/JWTTokenSignupEmailAlreadyExistResponseBody'
            required:
            - message
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnauthorizedResponseBody'
        "403":
          description: Forbidden response.
          schema:
            $ref: '#/definitions/JWTTokenSignupInvalidScopesResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/JWTTokenSignupUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
  /web/book/{id}:
    get:
      tags:
      - book
      summary: getBook book
      description: Get one item
      operationId: book#getBook
      parameters:
      - name: id
        in: path
        description: Unique ID of the book
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BookGetBookResponseBody'
            required:
            - id
            - name
            - price
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/BookGetBookUnauthorizedResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BookGetBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
    put:
      tags:
      - book
      summary: updateBook book
      description: Update one item
      operationId: book#updateBook
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: UpdateBookRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BookUpdateBookRequestBody'
          required:
          - name
          - price
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BookUpdateBookResponseBody'
            required:
            - id
            - name
            - price
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/BookUpdateBookUnauthorizedResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BookUpdateBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /web/book/add:
    post:
      tags:
      - book
      summary: createBook book
      description: Create one item
      operationId: book#createBook
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: CreateBookRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/BookCreateBookRequestBody'
          required:
          - name
          - price
      responses:
        "201":
          description: Created response.
          schema:
            $ref: '#/definitions/BookCreateBookResponseBody'
            required:
            - book
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/BookCreateBookUnauthorizedResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BookCreateBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /web/book/remove/{id}:
    delete:
      tags:
      - book
      summary: deleteBook book
      description: Delete one item by ID
      operationId: book#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        type: string
        format: uuid
      - name: Authorization
        in: header
        description: OAuth token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BookDeleteBookResponseBody'
            required:
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/BookDeleteBookUnauthorizedResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BookDeleteBookUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
  /web/books:
    get:
      tags:
      - book
      summary: getAllBooks book
      description: Get All items
      operationId: book#getAllBooks
      parameters:
      - name: Authorization
        in: header
        description: OAuth token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      - name: jwtToken
        in: header
        description: Jwt token
        required: true
        type: string
        pattern: ^Bearer [^ ]+$
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/BookGetAllBooksResponseBody'
            required:
            - books
            - success
        "401":
          description: Unauthorized response.
          schema:
            $ref: '#/definitions/BookGetAllBooksUnauthorizedResponseBody'
        "500":
          description: Internal Server Error response.
          schema:
            $ref: '#/definitions/BookGetAllBooksUnknownErrorResponseBody'
            required:
            - err
            - success
            - error_code
      schemes:
      - https
      security:
      - OAuth2_header_Authorization: []
        jwt_header_jwtToken: []
definitions:
  BookCreateBookRequestBody:
    title: BookCreateBookRequestBody
    type: object
    properties:
      name:
        type: string
        description: Name of the book
        example: Guillaume
        minLength: 3
        maxLength: 10
      price:
        type: number
        description: Price of the book
        example: 0.7133895835358962
        minimum: 0.1
    example:
      name: Guillaume
      price: 0.3608816199231498
    required:
    - name
    - price
  BookCreateBookResponseBody:
    title: BookCreateBookResponseBody
    type: object
    properties:
      book:
        $ref: '#/definitions/BookResponseResponseBody'
      success:
        type: boolean
        example: true
    example:
      book:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: false
    required:
    - book
    - success
  BookCreateBookUnauthorizedResponseBody:
    title: BookCreateBookUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Unde quod.
  BookCreateBookUnknownErrorResponseBody:
    title: BookCreateBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Perspiciatis architecto sapiente quasi aspernatur dolor nam.
      error_code:
        type: string
        example: In a.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Eos incidunt quibusdam atque odit officiis.
      error_code: A quas ut ea aut.
      success: false
    required:
    - err
    - success
    - error_code
  BookDeleteBookResponseBody:
    title: BookDeleteBookResponseBody
    type: object
    properties:
      success:
        type: boolean
        example: false
    example:
      success: true
    required:
    - success
  BookDeleteBookUnauthorizedResponseBody:
    title: BookDeleteBookUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Et et nihil ut qui et est.
  BookDeleteBookUnknownErrorResponseBody:
    title: BookDeleteBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Dolores veniam cumque fuga nobis ut.
      error_code:
        type: string
        example: Assumenda dolorum quo quia.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Dolorem nesciunt reprehenderit et a architecto.
      error_code: Eum magni sunt.
      success: false
    required:
    - err
    - success
    - error_code
  BookGetAllBooksResponseBody:
    title: BookGetAllBooksResponseBody
    type: object
    properties:
      books:
        type: array
        items:
          $ref: '#/definitions/BookResponseResponseBody'
        description: Result is an array of object
        example:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
      success:
        type: boolean
        example: false
    example:
      books:
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      success: true
    required:
    - books
    - success
  BookGetAllBooksUnauthorizedResponseBody:
    title: BookGetAllBooksUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Reprehenderit architecto.
  BookGetAllBooksUnknownErrorResponseBody:
    title: BookGetAllBooksUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Culpa facilis corporis incidunt ipsa.
      error_code:
        type: string
        example: Et nam nisi omnis ipsam nobis corporis.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Autem dicta veritatis.
      error_code: Incidunt accusantium unde occaecati ipsum quo est.
      success: true
    required:
    - err
    - success
    - error_code
  BookGetBookResponseBody:
    title: BookGetBookResponseBody
    type: object
    properties:
      id:
        type: string
        example: Labore est cumque dolorum fugiat deserunt ipsum.
      name:
        type: string
        example: Quia aut dolores laboriosam a autem recusandae.
      price:
        type: number
        example: 0.19771088530504694
        format: double
      success:
        type: boolean
        example: true
    example:
      id: Ut perspiciatis in ipsum neque.
      name: Molestias voluptatum odio.
      price: 0.10071005291239898
      success: true
    required:
    - id
    - name
    - price
    - success
  BookGetBookUnauthorizedResponseBody:
    title: BookGetBookUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Rerum consectetur corporis consequatur possimus.
  BookGetBookUnknownErrorResponseBody:
    title: BookGetBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Ut delectus distinctio quia et.
      error_code:
        type: string
        example: Voluptate dignissimos aut rerum dolor.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Quia suscipit.
      error_code: Ad dolores aperiam.
      success: false
    required:
    - err
    - success
    - error_code
  BookResponseResponseBody:
    title: BookResponseResponseBody
    type: object
    properties:
      id:
        type: string
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        format: uuid
      name:
        type: string
        example: Guillaume
      price:
        type: number
        example: 69
        format: double
    example:
      id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      name: Guillaume
      price: 69
    required:
    - id
    - name
    - price
  BookUpdateBookRequestBody:
    title: BookUpdateBookRequestBody
    type: object
    properties:
      name:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 10
      price:
        type: number
        example: 69
        minimum: 0.1
    example:
      name: Guillaume
      price: 69
    required:
    - name
    - price
  BookUpdateBookResponseBody:
    title: BookUpdateBookResponseBody
    type: object
    properties:
      id:
        type: string
        example: Nobis beatae eos praesentium dolores ut.
      name:
        type: string
        example: Officiis tempore dolorem tenetur consectetur accusantium consequatur.
      price:
        type: number
        example: 0.6647046028705873
        format: double
      success:
        type: boolean
        example: false
    example:
      id: Fugit porro repellendus et magnam.
      name: Dolorem numquam totam consequatur.
      price: 0.4447393742961892
      success: false
    required:
    - id
    - name
    - price
    - success
  BookUpdateBookUnauthorizedResponseBody:
    title: BookUpdateBookUnauthorizedResponseBody
    type: string
    description: Credentials are invalid
    example: Minima nemo et.
  BookUpdateBookUnknownErrorResponseBody:
    title: BookUpdateBookUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Doloremque sit est non tempore molestiae quia.
      error_code:
        type: string
        example: Alias et et quibusdam distinctio sit.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Eos asperiores.
      error_code: Ea culpa totam quisquam optio qui.
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenRefreshEmailAlreadyExistResponseBody:
    title: JWTTokenRefreshEmailAlreadyExistResponseBody
    type: object
    properties:
      message:
        type: string
        example: Quam autem.
      success:
        type: boolean
        default: false
        example: false
    description: When email already exist
    example:
      message: Non eveniet accusantium et.
      success: false
    required:
    - message
    - success
  JWTTokenRefreshInvalidScopesResponseBody:
    title: JWTTokenRefreshInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Eos laborum non consequatur.
  JWTTokenRefreshRequestBody:
    title: JWTTokenRefreshRequestBody
    type: object
    properties:
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    example:
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
    required:
    - refresh_token
  JWTTokenRefreshResponseBody:
    title: JWTTokenRefreshResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: false
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: false
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenRefreshUnauthorizedResponseBody:
    title: JWTTokenRefreshUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Voluptas alias.
  JWTTokenRefreshUnknownErrorResponseBody:
    title: JWTTokenRefreshUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Est quas atque.
      error_code:
        type: string
        example: Alias est et.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Est quis voluptate.
      error_code: Et excepturi aut debitis voluptatem quo.
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenSigninEmailAlreadyExistResponseBody:
    title: JWTTokenSigninEmailAlreadyExistResponseBody
    type: object
    properties:
      message:
        type: string
        example: Est harum ad sequi.
      success:
        type: boolean
        default: false
        example: true
    description: When email already exist
    example:
      message: Sed consequatur occaecati sed vel.
      success: true
    required:
    - message
    - success
  JWTTokenSigninInvalidScopesResponseBody:
    title: JWTTokenSigninInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Itaque rerum.
  JWTTokenSigninRequestBody:
    title: JWTTokenSigninRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      password:
        type: string
        example: bag
        minLength: 8
    example:
      email: guillaume@epitech.eu
      password: pfq
    required:
    - password
    - email
  JWTTokenSigninResponseBody:
    title: JWTTokenSigninResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: false
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: false
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSigninUnauthorizedResponseBody:
    title: JWTTokenSigninUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Tenetur molestias aut culpa nobis.
  JWTTokenSigninUnknownErrorResponseBody:
    title: JWTTokenSigninUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Dignissimos aliquid.
      error_code:
        type: string
        example: Inventore et vero quod.
      success:
        type: boolean
        default: false
        example: true
    description: Error not identified (500)
    example:
      err: Est ut iusto enim ad.
      error_code: Alias id molestias.
      success: false
    required:
    - err
    - success
    - error_code
  JWTTokenSignupEmailAlreadyExistResponseBody:
    title: JWTTokenSignupEmailAlreadyExistResponseBody
    type: object
    properties:
      message:
        type: string
        example: Officia cumque facere blanditiis tempora.
      success:
        type: boolean
        default: false
        example: true
    description: When email already exist
    example:
      message: Cupiditate excepturi sint voluptas.
      success: false
    required:
    - message
    - success
  JWTTokenSignupInvalidScopesResponseBody:
    title: JWTTokenSignupInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Debitis repellat quia.
  JWTTokenSignupRequestBody:
    title: JWTTokenSignupRequestBody
    type: object
    properties:
      email:
        type: string
        example: guillaume@epitech.eu
        format: email
      firstname:
        type: string
        example: Guillaume
        minLength: 3
        maxLength: 15
      lastname:
        type: string
        example: Morin
        minLength: 3
      password:
        type: string
        example: eo9
        minLength: 8
    description: Use client ID and client secret to oAuth
    example:
      email: guillaume@epitech.eu
      firstname: Guillaume
      lastname: Morin
      password: qr7
    required:
    - firstname
    - lastname
    - password
    - email
  JWTTokenSignupResponseBody:
    title: JWTTokenSignupResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success:
        type: boolean
        example: true
    example:
      access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      success: false
    required:
    - access_token
    - refresh_token
    - success
  JWTTokenSignupUnauthorizedResponseBody:
    title: JWTTokenSignupUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Totam enim.
  JWTTokenSignupUnknownErrorResponseBody:
    title: JWTTokenSignupUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Nam fugiat dicta explicabo.
      error_code:
        type: string
        example: Fuga eos incidunt et fuga illo reprehenderit.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Minus animi reiciendis dolor excepturi voluptas.
      error_code: Dolor atque officiis incidunt maxime sequi.
      success: false
    required:
    - err
    - success
    - error_code
  OAuthOAuthBadRequestResponseBody:
    title: OAuthOAuthBadRequestResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Odit aliquam quia asperiores eum et.
      expires_in:
        type: integer
        example: 7585087811689205471
        format: int64
      success:
        type: boolean
        example: true
      token_type:
        type: string
        example: Voluptas maxime.
    example:
      access_token: Eius iusto dignissimos tempore.
      expires_in: 2808577009373807003
      success: true
      token_type: Molestias possimus sunt voluptas nihil tenetur eos.
    required:
    - access_token
    - token_type
    - expires_in
    - success
  OAuthOAuthCreatedResponseBody:
    title: OAuthOAuthCreatedResponseBody
    type: object
    properties:
      access_token:
        type: string
        example: Nihil dignissimos est.
      expires_in:
        type: integer
        example: 1186572592927452188
        format: int64
      success:
        type: boolean
        example: false
      token_type:
        type: string
        example: Quia optio et vel ut.
    example:
      access_token: Totam odio.
      expires_in: 4055415584478623205
      success: true
      token_type: Minus qui doloribus omnis nam.
    required:
    - access_token
    - token_type
    - expires_in
    - success
  OAuthOAuthInvalidScopesResponseBody:
    title: OAuthOAuthInvalidScopesResponseBody
    type: string
    description: Token scopes are invalid
    example: Autem nesciunt consectetur.
  OAuthOAuthRequestBody:
    title: OAuthOAuthRequestBody
    type: object
    properties:
      client_id:
        type: string
        example: Recusandae tenetur et sit beatae voluptas.
      client_secret:
        type: string
        example: Inventore voluptate beatae.
      grant_type:
        type: string
        example: Odio veritatis quam reprehenderit.
    example:
      client_id: Laborum tenetur.
      client_secret: Odio sed illum rerum id quia.
      grant_type: Reprehenderit modi voluptas quae laborum.
    required:
    - client_id
    - client_secret
    - grant_type
  OAuthOAuthUnauthorizedResponseBody:
    title: OAuthOAuthUnauthorizedResponseBody
    type: string
    description: Identifiers are invalid
    example: Tempore vel.
  OAuthOAuthUnknownErrorResponseBody:
    title: OAuthOAuthUnknownErrorResponseBody
    type: object
    properties:
      err:
        type: string
        example: Officiis accusamus provident.
      error_code:
        type: string
        example: Rerum sapiente commodi odit repellat.
      success:
        type: boolean
        default: false
        example: false
    description: Error not identified (500)
    example:
      err: Iure ut aut adipisci consequatur velit corrupti.
      error_code: Accusamus eos dolor atque odit.
      success: true
    required:
    - err
    - success
    - error_code
securityDefinitions:
  OAuth2_header_Authorization:
    type: oauth2
    description: Use OAuth2 to authenticate
    flow: application
    tokenUrl: /authorization
    scopes:
      api:read: Provides read access
  jwt_header_jwtToken:
    type: apiKey
    description: |-
      Secures endpoint by requiring a valid JWT token retrieved via the signin endpoint. Supports scopes "api:read" and "api:write".

      **Security Scopes**:
        * `api:read`: Read-only access
        * `api:write`: Read and write access
    name: jwtToken
    in: header
