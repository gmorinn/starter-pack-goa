// Code generated by goa v3.10.2, DO NOT EDIT.
//
// jwtToken HTTP server types
//
// Command:
// $ goa gen starter-pack-goa/design

package server

import (
	jwttoken "starter-pack-goa/gen/jwt_token"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// SignupRequestBody is the type of the "jwtToken" service "signup" endpoint
// HTTP request body.
type SignupRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Minimum 9 charactères / Chiffre Obligatoire
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Minimum 9 charactères / Chiffre Obligatoire
	ConfirmPassword *string `form:"confirm_password,omitempty" json:"confirm_password,omitempty" xml:"confirm_password,omitempty"`
}

// SigninRequestBody is the type of the "jwtToken" service "signin" endpoint
// HTTP request body.
type SigninRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Minimum 9 charactères / Chiffre Obligatoire
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RefreshRequestBody is the type of the "jwtToken" service "refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	RefreshToken *string `form:"refresh_token,omitempty" json:"refresh_token,omitempty" xml:"refresh_token,omitempty"`
}

// SignupResponseBody is the type of the "jwtToken" service "signup" endpoint
// HTTP response body.
type SignupResponseBody struct {
	AccessToken  string `form:"access_token" json:"access_token" xml:"access_token"`
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	Success      bool   `form:"success" json:"success" xml:"success"`
}

// SigninResponseBody is the type of the "jwtToken" service "signin" endpoint
// HTTP response body.
type SigninResponseBody struct {
	AccessToken  string `form:"access_token" json:"access_token" xml:"access_token"`
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	Success      bool   `form:"success" json:"success" xml:"success"`
}

// RefreshResponseBody is the type of the "jwtToken" service "refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	AccessToken  string `form:"access_token" json:"access_token" xml:"access_token"`
	RefreshToken string `form:"refresh_token" json:"refresh_token" xml:"refresh_token"`
	Success      bool   `form:"success" json:"success" xml:"success"`
}

// SignupUnknownErrorResponseBody is the type of the "jwtToken" service
// "signup" endpoint HTTP response body for the "unknown_error" error.
type SignupUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// SigninUnknownErrorResponseBody is the type of the "jwtToken" service
// "signin" endpoint HTTP response body for the "unknown_error" error.
type SigninUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// RefreshUnknownErrorResponseBody is the type of the "jwtToken" service
// "refresh" endpoint HTTP response body for the "unknown_error" error.
type RefreshUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// NewSignupResponseBody builds the HTTP response body from the result of the
// "signup" endpoint of the "jwtToken" service.
func NewSignupResponseBody(res *jwttoken.Sign) *SignupResponseBody {
	body := &SignupResponseBody{
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
		Success:      res.Success,
	}
	return body
}

// NewSigninResponseBody builds the HTTP response body from the result of the
// "signin" endpoint of the "jwtToken" service.
func NewSigninResponseBody(res *jwttoken.Sign) *SigninResponseBody {
	body := &SigninResponseBody{
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
		Success:      res.Success,
	}
	return body
}

// NewRefreshResponseBody builds the HTTP response body from the result of the
// "refresh" endpoint of the "jwtToken" service.
func NewRefreshResponseBody(res *jwttoken.Sign) *RefreshResponseBody {
	body := &RefreshResponseBody{
		AccessToken:  res.AccessToken,
		RefreshToken: res.RefreshToken,
		Success:      res.Success,
	}
	return body
}

// NewSignupUnknownErrorResponseBody builds the HTTP response body from the
// result of the "signup" endpoint of the "jwtToken" service.
func NewSignupUnknownErrorResponseBody(res *jwttoken.UnknownError) *SignupUnknownErrorResponseBody {
	body := &SignupUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewSigninUnknownErrorResponseBody builds the HTTP response body from the
// result of the "signin" endpoint of the "jwtToken" service.
func NewSigninUnknownErrorResponseBody(res *jwttoken.UnknownError) *SigninUnknownErrorResponseBody {
	body := &SigninUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewRefreshUnknownErrorResponseBody builds the HTTP response body from the
// result of the "refresh" endpoint of the "jwtToken" service.
func NewRefreshUnknownErrorResponseBody(res *jwttoken.UnknownError) *RefreshUnknownErrorResponseBody {
	body := &RefreshUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewSignupPayload builds a jwtToken service signup endpoint payload.
func NewSignupPayload(body *SignupRequestBody, oauth *string) *jwttoken.SignupPayload {
	v := &jwttoken.SignupPayload{
		Email:           *body.Email,
		Password:        *body.Password,
		ConfirmPassword: *body.ConfirmPassword,
	}
	v.Oauth = oauth

	return v
}

// NewSigninPayload builds a jwtToken service signin endpoint payload.
func NewSigninPayload(body *SigninRequestBody, oauth *string) *jwttoken.SigninPayload {
	v := &jwttoken.SigninPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	v.Oauth = oauth

	return v
}

// NewRefreshPayload builds a jwtToken service refresh endpoint payload.
func NewRefreshPayload(body *RefreshRequestBody, oauth *string) *jwttoken.RefreshPayload {
	v := &jwttoken.RefreshPayload{
		RefreshToken: *body.RefreshToken,
	}
	v.Oauth = oauth

	return v
}

// ValidateSignupRequestBody runs the validations defined on SignupRequestBody
func ValidateSignupRequestBody(body *SignupRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirm_password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "\\d"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 9, true))
		}
	}
	if body.ConfirmPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm_password", *body.ConfirmPassword, "\\d"))
	}
	if body.ConfirmPassword != nil {
		if utf8.RuneCountInString(*body.ConfirmPassword) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm_password", *body.ConfirmPassword, utf8.RuneCountInString(*body.ConfirmPassword), 9, true))
		}
	}
	return
}

// ValidateSigninRequestBody runs the validations defined on SigninRequestBody
func ValidateSigninRequestBody(body *SigninRequestBody) (err error) {
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "\\d"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 9, true))
		}
	}
	return
}

// ValidateRefreshRequestBody runs the validations defined on RefreshRequestBody
func ValidateRefreshRequestBody(body *RefreshRequestBody) (err error) {
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refresh_token", "body"))
	}
	if body.RefreshToken != nil {
		if utf8.RuneCountInString(*body.RefreshToken) < 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.refresh_token", *body.RefreshToken, utf8.RuneCountInString(*body.RefreshToken), 32, true))
		}
	}
	return
}
