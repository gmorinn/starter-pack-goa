// Code generated by goa v3.10.2, DO NOT EDIT.
//
// jwtToken HTTP client CLI support package
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	"encoding/json"
	"fmt"
	jwttoken "starter-pack-goa/gen/jwt_token"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildSignupPayload builds the payload for the jwtToken signup endpoint from
// CLI flags.
func BuildSignupPayload(jwtTokenSignupBody string, jwtTokenSignupOauth string) (*jwttoken.SignupPayload, error) {
	var err error
	var body SignupRequestBody
	{
		err = json.Unmarshal([]byte(jwtTokenSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"confirm_password\": \"JeSuisUnTest974\",\n      \"email\": \"guillaume@epitech.eu\",\n      \"password\": \"JeSuisUnTest974\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", body.Password, "\\d"))
		if utf8.RuneCountInString(body.Password) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 9, true))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm_password", body.ConfirmPassword, "\\d"))
		if utf8.RuneCountInString(body.ConfirmPassword) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm_password", body.ConfirmPassword, utf8.RuneCountInString(body.ConfirmPassword), 9, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if jwtTokenSignupOauth != "" {
			oauth = &jwtTokenSignupOauth
		}
	}
	v := &jwttoken.SignupPayload{
		Email:           body.Email,
		Password:        body.Password,
		ConfirmPassword: body.ConfirmPassword,
	}
	v.Oauth = oauth

	return v, nil
}

// BuildSigninPayload builds the payload for the jwtToken signin endpoint from
// CLI flags.
func BuildSigninPayload(jwtTokenSigninBody string, jwtTokenSigninOauth string) (*jwttoken.SigninPayload, error) {
	var err error
	var body SigninRequestBody
	{
		err = json.Unmarshal([]byte(jwtTokenSigninBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"guillaume@epitech.eu\",\n      \"password\": \"JeSuisUnTest974\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", body.Password, "\\d"))
		if utf8.RuneCountInString(body.Password) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 9, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if jwtTokenSigninOauth != "" {
			oauth = &jwtTokenSigninOauth
		}
	}
	v := &jwttoken.SigninPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	v.Oauth = oauth

	return v, nil
}

// BuildRefreshPayload builds the payload for the jwtToken refresh endpoint
// from CLI flags.
func BuildRefreshPayload(jwtTokenRefreshBody string, jwtTokenRefreshOauth string) (*jwttoken.RefreshPayload, error) {
	var err error
	var body RefreshRequestBody
	{
		err = json.Unmarshal([]byte(jwtTokenRefreshBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\"\n   }'")
		}
		if utf8.RuneCountInString(body.RefreshToken) < 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.refresh_token", body.RefreshToken, utf8.RuneCountInString(body.RefreshToken), 32, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if jwtTokenRefreshOauth != "" {
			oauth = &jwtTokenRefreshOauth
		}
	}
	v := &jwttoken.RefreshPayload{
		RefreshToken: body.RefreshToken,
	}
	v.Oauth = oauth

	return v, nil
}
