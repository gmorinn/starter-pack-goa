// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boProducts HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	boproducts "api_crud/gen/bo_products"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateProductRequestBody is the type of the "boProducts" service
// "createProduct" endpoint HTTP request body.
type CreateProductRequestBody struct {
	Product *PayloadProductRequestBody `form:"product,omitempty" json:"product,omitempty" xml:"product,omitempty"`
}

// UpdateProductRequestBody is the type of the "boProducts" service
// "updateProduct" endpoint HTTP request body.
type UpdateProductRequestBody struct {
	Product *PayloadProductRequestBody `form:"product,omitempty" json:"product,omitempty" xml:"product,omitempty"`
}

// GetAllProductsResponseBody is the type of the "boProducts" service
// "getAllProducts" endpoint HTTP response body.
type GetAllProductsResponseBody struct {
	// All products by category
	Products []*ResBoProductResponseBody `form:"products" json:"products" xml:"products"`
	Success  bool                        `form:"success" json:"success" xml:"success"`
}

// GetAllProductsByCategoryResponseBody is the type of the "boProducts" service
// "getAllProductsByCategory" endpoint HTTP response body.
type GetAllProductsByCategoryResponseBody struct {
	// Result is an array of object
	Products []*ResBoProductResponseBody `form:"products" json:"products" xml:"products"`
	Success  bool                        `form:"success" json:"success" xml:"success"`
}

// DeleteProductResponseBody is the type of the "boProducts" service
// "deleteProduct" endpoint HTTP response body.
type DeleteProductResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// CreateProductResponseBody is the type of the "boProducts" service
// "createProduct" endpoint HTTP response body.
type CreateProductResponseBody struct {
	// Result is an object
	Product *ResBoProductResponseBody `form:"product" json:"product" xml:"product"`
	Success bool                      `form:"success" json:"success" xml:"success"`
}

// UpdateProductResponseBody is the type of the "boProducts" service
// "updateProduct" endpoint HTTP response body.
type UpdateProductResponseBody struct {
	// Result is an Object
	Product *ResBoProductResponseBody `form:"product" json:"product" xml:"product"`
	Success bool                      `form:"success" json:"success" xml:"success"`
}

// GetProductResponseBody is the type of the "boProducts" service "getProduct"
// endpoint HTTP response body.
type GetProductResponseBody struct {
	// Result is an object
	Product *ResBoProductResponseBody `form:"product" json:"product" xml:"product"`
	Success bool                      `form:"success" json:"success" xml:"success"`
}

// GetAllProductsUnknownErrorResponseBody is the type of the "boProducts"
// service "getAllProducts" endpoint HTTP response body for the "unknown_error"
// error.
type GetAllProductsUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetAllProductsByCategoryUnknownErrorResponseBody is the type of the
// "boProducts" service "getAllProductsByCategory" endpoint HTTP response body
// for the "unknown_error" error.
type GetAllProductsByCategoryUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteProductUnknownErrorResponseBody is the type of the "boProducts"
// service "deleteProduct" endpoint HTTP response body for the "unknown_error"
// error.
type DeleteProductUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// CreateProductUnknownErrorResponseBody is the type of the "boProducts"
// service "createProduct" endpoint HTTP response body for the "unknown_error"
// error.
type CreateProductUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateProductUnknownErrorResponseBody is the type of the "boProducts"
// service "updateProduct" endpoint HTTP response body for the "unknown_error"
// error.
type UpdateProductUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetProductUnknownErrorResponseBody is the type of the "boProducts" service
// "getProduct" endpoint HTTP response body for the "unknown_error" error.
type GetProductUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResBoProductResponseBody is used to define fields on response body types.
type ResBoProductResponseBody struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Name     string  `form:"name" json:"name" xml:"name"`
	Price    float64 `form:"price" json:"price" xml:"price"`
	Cover    string  `form:"cover" json:"cover" xml:"cover"`
	Category string  `form:"category" json:"category" xml:"category"`
}

// PayloadProductRequestBody is used to define fields on request body types.
type PayloadProductRequestBody struct {
	Name     *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price    *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Cover    *string  `form:"cover,omitempty" json:"cover,omitempty" xml:"cover,omitempty"`
	Category *string  `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
}

// NewGetAllProductsResponseBody builds the HTTP response body from the result
// of the "getAllProducts" endpoint of the "boProducts" service.
func NewGetAllProductsResponseBody(res *boproducts.GetAllProductsResult) *GetAllProductsResponseBody {
	body := &GetAllProductsResponseBody{
		Success: res.Success,
	}
	if res.Products != nil {
		body.Products = make([]*ResBoProductResponseBody, len(res.Products))
		for i, val := range res.Products {
			body.Products[i] = marshalBoproductsResBoProductToResBoProductResponseBody(val)
		}
	}
	return body
}

// NewGetAllProductsByCategoryResponseBody builds the HTTP response body from
// the result of the "getAllProductsByCategory" endpoint of the "boProducts"
// service.
func NewGetAllProductsByCategoryResponseBody(res *boproducts.GetAllProductsByCategoryResult) *GetAllProductsByCategoryResponseBody {
	body := &GetAllProductsByCategoryResponseBody{
		Success: res.Success,
	}
	if res.Products != nil {
		body.Products = make([]*ResBoProductResponseBody, len(res.Products))
		for i, val := range res.Products {
			body.Products[i] = marshalBoproductsResBoProductToResBoProductResponseBody(val)
		}
	}
	return body
}

// NewDeleteProductResponseBody builds the HTTP response body from the result
// of the "deleteProduct" endpoint of the "boProducts" service.
func NewDeleteProductResponseBody(res *boproducts.DeleteProductResult) *DeleteProductResponseBody {
	body := &DeleteProductResponseBody{
		Success: res.Success,
	}
	return body
}

// NewCreateProductResponseBody builds the HTTP response body from the result
// of the "createProduct" endpoint of the "boProducts" service.
func NewCreateProductResponseBody(res *boproducts.CreateProductResult) *CreateProductResponseBody {
	body := &CreateProductResponseBody{
		Success: res.Success,
	}
	if res.Product != nil {
		body.Product = marshalBoproductsResBoProductToResBoProductResponseBody(res.Product)
	}
	return body
}

// NewUpdateProductResponseBody builds the HTTP response body from the result
// of the "updateProduct" endpoint of the "boProducts" service.
func NewUpdateProductResponseBody(res *boproducts.UpdateProductResult) *UpdateProductResponseBody {
	body := &UpdateProductResponseBody{
		Success: res.Success,
	}
	if res.Product != nil {
		body.Product = marshalBoproductsResBoProductToResBoProductResponseBody(res.Product)
	}
	return body
}

// NewGetProductResponseBody builds the HTTP response body from the result of
// the "getProduct" endpoint of the "boProducts" service.
func NewGetProductResponseBody(res *boproducts.GetProductResult) *GetProductResponseBody {
	body := &GetProductResponseBody{
		Success: res.Success,
	}
	if res.Product != nil {
		body.Product = marshalBoproductsResBoProductToResBoProductResponseBody(res.Product)
	}
	return body
}

// NewGetAllProductsUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getAllProducts" endpoint of the "boProducts" service.
func NewGetAllProductsUnknownErrorResponseBody(res *boproducts.UnknownError) *GetAllProductsUnknownErrorResponseBody {
	body := &GetAllProductsUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetAllProductsByCategoryUnknownErrorResponseBody builds the HTTP response
// body from the result of the "getAllProductsByCategory" endpoint of the
// "boProducts" service.
func NewGetAllProductsByCategoryUnknownErrorResponseBody(res *boproducts.UnknownError) *GetAllProductsByCategoryUnknownErrorResponseBody {
	body := &GetAllProductsByCategoryUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteProductUnknownErrorResponseBody builds the HTTP response body from
// the result of the "deleteProduct" endpoint of the "boProducts" service.
func NewDeleteProductUnknownErrorResponseBody(res *boproducts.UnknownError) *DeleteProductUnknownErrorResponseBody {
	body := &DeleteProductUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewCreateProductUnknownErrorResponseBody builds the HTTP response body from
// the result of the "createProduct" endpoint of the "boProducts" service.
func NewCreateProductUnknownErrorResponseBody(res *boproducts.UnknownError) *CreateProductUnknownErrorResponseBody {
	body := &CreateProductUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateProductUnknownErrorResponseBody builds the HTTP response body from
// the result of the "updateProduct" endpoint of the "boProducts" service.
func NewUpdateProductUnknownErrorResponseBody(res *boproducts.UnknownError) *UpdateProductUnknownErrorResponseBody {
	body := &UpdateProductUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetProductUnknownErrorResponseBody builds the HTTP response body from the
// result of the "getProduct" endpoint of the "boProducts" service.
func NewGetProductUnknownErrorResponseBody(res *boproducts.UnknownError) *GetProductUnknownErrorResponseBody {
	body := &GetProductUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetAllProductsPayload builds a boProducts service getAllProducts endpoint
// payload.
func NewGetAllProductsPayload(oauth *string, jwtToken *string) *boproducts.GetAllProductsPayload {
	v := &boproducts.GetAllProductsPayload{}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetAllProductsByCategoryPayload builds a boProducts service
// getAllProductsByCategory endpoint payload.
func NewGetAllProductsByCategoryPayload(category string, oauth *string, jwtToken *string) *boproducts.GetAllProductsByCategoryPayload {
	v := &boproducts.GetAllProductsByCategoryPayload{}
	v.Category = category
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteProductPayload builds a boProducts service deleteProduct endpoint
// payload.
func NewDeleteProductPayload(id string, oauth *string, jwtToken *string) *boproducts.DeleteProductPayload {
	v := &boproducts.DeleteProductPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewCreateProductPayload builds a boProducts service createProduct endpoint
// payload.
func NewCreateProductPayload(body *CreateProductRequestBody, oauth *string, jwtToken *string) *boproducts.CreateProductPayload {
	v := &boproducts.CreateProductPayload{}
	v.Product = unmarshalPayloadProductRequestBodyToBoproductsPayloadProduct(body.Product)
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewUpdateProductPayload builds a boProducts service updateProduct endpoint
// payload.
func NewUpdateProductPayload(body *UpdateProductRequestBody, id string, oauth *string, jwtToken *string) *boproducts.UpdateProductPayload {
	v := &boproducts.UpdateProductPayload{}
	v.Product = unmarshalPayloadProductRequestBodyToBoproductsPayloadProduct(body.Product)
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetProductPayload builds a boProducts service getProduct endpoint payload.
func NewGetProductPayload(id string, oauth *string, jwtToken *string) *boproducts.GetProductPayload {
	v := &boproducts.GetProductPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateCreateProductRequestBody runs the validations defined on
// CreateProductRequestBody
func ValidateCreateProductRequestBody(body *CreateProductRequestBody) (err error) {
	if body.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
	}
	if body.Product != nil {
		if err2 := ValidatePayloadProductRequestBody(body.Product); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateProductRequestBody runs the validations defined on
// UpdateProductRequestBody
func ValidateUpdateProductRequestBody(body *UpdateProductRequestBody) (err error) {
	if body.Product == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("product", "body"))
	}
	if body.Product != nil {
		if err2 := ValidatePayloadProductRequestBody(body.Product); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePayloadProductRequestBody runs the validations defined on
// payloadProductRequestBody
func ValidatePayloadProductRequestBody(body *PayloadProductRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Cover == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cover", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 3, true))
		}
	}
	if body.Price != nil {
		if *body.Price < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 0, true))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "men" || *body.Category == "women" || *body.Category == "hat" || *body.Category == "jacket" || *body.Category == "sneaker" || *body.Category == "nothing") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"men", "women", "hat", "jacket", "sneaker", "nothing"}))
		}
	}
	return
}
