// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boProducts HTTP server
//
// Command:
// $ goa gen api_crud/design

package server

import (
	boproducts "api_crud/gen/bo_products"
	"context"
	"net/http"
	"regexp"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the boProducts service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	GetAllProducts           http.Handler
	GetAllProductsByCategory http.Handler
	DeleteProduct            http.Handler
	CreateProduct            http.Handler
	UpdateProduct            http.Handler
	DeleteManyProducts       http.Handler
	GetProduct               http.Handler
	CORS                     http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the boProducts service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *boproducts.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAllProducts", "GET", "/v1/bo/products/{offset}/{limit}"},
			{"GetAllProductsByCategory", "GET", "/v1/bo/products/category/{category}"},
			{"DeleteProduct", "DELETE", "/v1/bo/product/remove/{id}"},
			{"CreateProduct", "POST", "/v1/bo/product/add"},
			{"UpdateProduct", "PUT", "/v1/bo/product/{id}"},
			{"DeleteManyProducts", "PATCH", "/v1/bo/products/remove"},
			{"GetProduct", "GET", "/v1/bo/product/{id}"},
			{"CORS", "OPTIONS", "/v1/bo/products/{offset}/{limit}"},
			{"CORS", "OPTIONS", "/v1/bo/products/category/{category}"},
			{"CORS", "OPTIONS", "/v1/bo/product/remove/{id}"},
			{"CORS", "OPTIONS", "/v1/bo/product/add"},
			{"CORS", "OPTIONS", "/v1/bo/product/{id}"},
			{"CORS", "OPTIONS", "/v1/bo/products/remove"},
		},
		GetAllProducts:           NewGetAllProductsHandler(e.GetAllProducts, mux, decoder, encoder, errhandler, formatter),
		GetAllProductsByCategory: NewGetAllProductsByCategoryHandler(e.GetAllProductsByCategory, mux, decoder, encoder, errhandler, formatter),
		DeleteProduct:            NewDeleteProductHandler(e.DeleteProduct, mux, decoder, encoder, errhandler, formatter),
		CreateProduct:            NewCreateProductHandler(e.CreateProduct, mux, decoder, encoder, errhandler, formatter),
		UpdateProduct:            NewUpdateProductHandler(e.UpdateProduct, mux, decoder, encoder, errhandler, formatter),
		DeleteManyProducts:       NewDeleteManyProductsHandler(e.DeleteManyProducts, mux, decoder, encoder, errhandler, formatter),
		GetProduct:               NewGetProductHandler(e.GetProduct, mux, decoder, encoder, errhandler, formatter),
		CORS:                     NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "boProducts" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAllProducts = m(s.GetAllProducts)
	s.GetAllProductsByCategory = m(s.GetAllProductsByCategory)
	s.DeleteProduct = m(s.DeleteProduct)
	s.CreateProduct = m(s.CreateProduct)
	s.UpdateProduct = m(s.UpdateProduct)
	s.DeleteManyProducts = m(s.DeleteManyProducts)
	s.GetProduct = m(s.GetProduct)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the boProducts endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAllProductsHandler(mux, h.GetAllProducts)
	MountGetAllProductsByCategoryHandler(mux, h.GetAllProductsByCategory)
	MountDeleteProductHandler(mux, h.DeleteProduct)
	MountCreateProductHandler(mux, h.CreateProduct)
	MountUpdateProductHandler(mux, h.UpdateProduct)
	MountDeleteManyProductsHandler(mux, h.DeleteManyProducts)
	MountGetProductHandler(mux, h.GetProduct)
	MountCORSHandler(mux, h.CORS)
}

// MountGetAllProductsHandler configures the mux to serve the "boProducts"
// service "getAllProducts" endpoint.
func MountGetAllProductsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/bo/products/{offset}/{limit}", f)
}

// NewGetAllProductsHandler creates a HTTP handler which loads the HTTP request
// and calls the "boProducts" service "getAllProducts" endpoint.
func NewGetAllProductsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllProductsRequest(mux, decoder)
		encodeResponse = EncodeGetAllProductsResponse(encoder)
		encodeError    = EncodeGetAllProductsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAllProducts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAllProductsByCategoryHandler configures the mux to serve the
// "boProducts" service "getAllProductsByCategory" endpoint.
func MountGetAllProductsByCategoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/bo/products/category/{category}", f)
}

// NewGetAllProductsByCategoryHandler creates a HTTP handler which loads the
// HTTP request and calls the "boProducts" service "getAllProductsByCategory"
// endpoint.
func NewGetAllProductsByCategoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllProductsByCategoryRequest(mux, decoder)
		encodeResponse = EncodeGetAllProductsByCategoryResponse(encoder)
		encodeError    = EncodeGetAllProductsByCategoryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAllProductsByCategory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteProductHandler configures the mux to serve the "boProducts"
// service "deleteProduct" endpoint.
func MountDeleteProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/bo/product/remove/{id}", f)
}

// NewDeleteProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "boProducts" service "deleteProduct" endpoint.
func NewDeleteProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteProductRequest(mux, decoder)
		encodeResponse = EncodeDeleteProductResponse(encoder)
		encodeError    = EncodeDeleteProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProductHandler configures the mux to serve the "boProducts"
// service "createProduct" endpoint.
func MountCreateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/v1/bo/product/add", f)
}

// NewCreateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "boProducts" service "createProduct" endpoint.
func NewCreateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProductRequest(mux, decoder)
		encodeResponse = EncodeCreateProductResponse(encoder)
		encodeError    = EncodeCreateProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateProductHandler configures the mux to serve the "boProducts"
// service "updateProduct" endpoint.
func MountUpdateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/bo/product/{id}", f)
}

// NewUpdateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "boProducts" service "updateProduct" endpoint.
func NewUpdateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateProductRequest(mux, decoder)
		encodeResponse = EncodeUpdateProductResponse(encoder)
		encodeError    = EncodeUpdateProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteManyProductsHandler configures the mux to serve the "boProducts"
// service "deleteManyProducts" endpoint.
func MountDeleteManyProductsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/v1/bo/products/remove", f)
}

// NewDeleteManyProductsHandler creates a HTTP handler which loads the HTTP
// request and calls the "boProducts" service "deleteManyProducts" endpoint.
func NewDeleteManyProductsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteManyProductsRequest(mux, decoder)
		encodeResponse = EncodeDeleteManyProductsResponse(encoder)
		encodeError    = EncodeDeleteManyProductsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteManyProducts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetProductHandler configures the mux to serve the "boProducts" service
// "getProduct" endpoint.
func MountGetProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoProductsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/bo/product/{id}", f)
}

// NewGetProductHandler creates a HTTP handler which loads the HTTP request and
// calls the "boProducts" service "getProduct" endpoint.
func NewGetProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetProductRequest(mux, decoder)
		encodeResponse = EncodeGetProductResponse(encoder)
		encodeError    = EncodeGetProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boProducts")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service boProducts.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleBoProductsOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/v1/bo/products/{offset}/{limit}", f)
	mux.Handle("OPTIONS", "/v1/bo/products/category/{category}", f)
	mux.Handle("OPTIONS", "/v1/bo/product/remove/{id}", f)
	mux.Handle("OPTIONS", "/v1/bo/product/add", f)
	mux.Handle("OPTIONS", "/v1/bo/product/{id}", f)
	mux.Handle("OPTIONS", "/v1/bo/products/remove", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleBoProductsOrigin applies the CORS response headers corresponding to
// the origin for the service boProducts.
func HandleBoProductsOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "Content-Type, Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type, jwtToken, Origin")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
