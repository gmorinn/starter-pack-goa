openapi: 3.0.3
info:
  title: Basic CRUD
  description: Exemple for api crud
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - crud
      summary: oAuth crud
      description: oAuth
      operationId: crud#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: "00000"
              client_secret: "99999"
              grant_type: Laborum qui animi eum ea.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Quis assumenda et.
                expires_in: 1053126883836734893
                success: false
                token_type: Nemo rerum vitae explicabo ullam.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Et quaerat hic distinctio labore error.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Eveniet non velit.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Et voluptas rerum tempore.
                error_code: Iusto quis sapiente ratione ratione consequatur minima.
                success: false
  /book/{id}:
    get:
      tags:
      - crud
      summary: getBook crud
      description: Get one item
      operationId: crud#getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Ratione aut et.
                name: Quia modi voluptatem.
                price: 0.9383133114635659
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Laboriosam cupiditate nam nam facilis.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Delectus et est atque ipsam.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Consectetur minus aut autem id voluptatum qui.
                error_code: Culpa ut qui commodi quibusdam et.
                success: true
      security:
      - jwt_header_Authorization:
        - api:read
        - api:write
    put:
      tags:
      - crud
      summary: updateBook crud
      description: Update one item
      operationId: crud#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.18062393525003903
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Repellendus quaerat nemo neque voluptatibus quibusdam.
                name: Perferendis vel et.
                price: 0.08926363812949709
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Consequatur voluptas.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Cumque voluptatem adipisci.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Omnis esse modi.
                error_code: Tenetur blanditiis quo earum.
                success: false
  /book/add:
    post:
      tags:
      - crud
      summary: createBook crud
      description: Create one item
      operationId: crud#createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.35125155826859417
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.28782260547256655
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Nam provident sint ratione atque id mollitia.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Nihil sint consequatur.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Labore voluptate recusandae.
                error_code: Id quis consequatur.
                success: true
  /book/remove/{id}:
    delete:
      tags:
      - crud
      summary: deleteBook crud
      description: Delete one item by ID
      operationId: crud#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Corporis harum dolor expedita quidem.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Dolore enim error voluptatem consectetur inventore.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Dolor aut odit aliquam aut perspiciatis.
                error_code: Commodi et iusto.
                success: true
  /books:
    get:
      tags:
      - crud
      summary: getAllBooks crud
      description: Read All items
      operationId: crud#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.28782260547256655
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.28782260547256655
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.28782260547256655
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.28782260547256655
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Enim vel distinctio fuga eum quia dicta.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Esse vero autem a omnis aut voluptatibus.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Laboriosam eligendi animi delectus.
                error_code: Consequatur voluptas neque possimus odit veniam.
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: pq7
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Ut quasi sed nihil molestiae perferendis.
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Sit tempore neque molestiae temporibus ipsa aut.
                error_code: Sequi omnis sint dignissimos blanditiis molestiae possimus.
                success: true
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: 8aj
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Mollitia voluptatibus quas.
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Sapiente ut placeat voluptas est debitis magnam.
                error_code: Ullam minima iusto voluptatem.
                success: false
components:
  schemas:
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.11565535513854303
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.8362193491013374
      required:
      - id
      - name
      - price
    CreateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: true
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.28782260547256655
        success: true
      required:
      - book
      - success
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
      example:
        success: true
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Doloribus rerum.
        success:
          type: boolean
          default: false
          example: false
      description: When email already exist
      example:
        message: Rerum nihil cum.
        success: false
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.28782260547256655
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.28782260547256655
        success:
          type: boolean
          example: false
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.28782260547256655
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.28782260547256655
        success: true
      required:
      - books
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Unde sint.
        name:
          type: string
          example: Natus placeat nesciunt quidem omnis optio.
        price:
          type: number
          example: 0.03348416070061586
          format: double
        success:
          type: boolean
          example: true
      example:
        id: Aut harum repellat dignissimos.
        name: Ipsa amet expedita.
        price: 0.2739372375569078
        success: false
      required:
      - id
      - name
      - price
      - success
    IDDoesntExist:
      type: object
      properties:
        err:
          type: string
          description: Returning error
          example: Alias natus dolores modi libero ut ullam.
        id:
          type: string
          example: Recusandae illum aliquam veniam hic vel.
        success:
          type: boolean
          default: false
          example: true
      description: When ID doesn't exist
      example:
        err: Quam harum accusantium doloremque dicta eaque dolores.
        id: Quod aut est dolore eveniet.
        success: false
      required:
      - err
      - success
      - id
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: "00000"
        client_secret:
          type: string
          example: "99999"
        grant_type:
          type: string
          example: Perferendis velit neque sunt.
      example:
        client_id: "00000"
        client_secret: "99999"
        grant_type: Aspernatur qui id ducimus quia.
      required:
      - grant_type
      - client_id
      - client_secret
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Omnis nobis eos pariatur qui.
        expires_in:
          type: integer
          example: 6628441099763326955
          format: int64
        success:
          type: boolean
          example: true
        token_type:
          type: string
          example: Illum minus ea similique sit.
      example:
        access_token: Rerum sunt odit incidunt est.
        expires_in: 8040427829206740539
        success: true
        token_type: Aut nisi dicta tempora.
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: false
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: true
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          example: mpq
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: q5u
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          example: "7e5"
          minLength: 8
      description: Use client ID and client secret to oAuth
      example:
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: se8
      required:
      - firstname
      - lastname
      - password
      - email
    Unauthorized:
      type: string
      description: Identifiers are invalid
      example: Nesciunt blanditiis deserunt dolores mollitia quia qui.
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: Optio sint necessitatibus velit laudantium.
        error_code:
          type: string
          example: Corrupti facere.
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: Molestias voluptas laborum iure hic vel doloremque.
        error_code: Ipsam dolore.
        success: true
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.5747238699254958
          format: double
      example:
        name: Guillaume
        price: 0.3583367311688568
      required:
      - name
      - price
  securitySchemes:
    jwt_header_Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: crud
  description: The principe of CRUD API with GET, PUT, POST, DELETE
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
