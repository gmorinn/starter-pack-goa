openapi: 3.0.3
info:
  title: Basic CRUD
  description: Exemple for api crud
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /book/{id}:
    get:
      tags:
      - crud
      summary: getBook crud
      description: Get one item
      operationId: crud#getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Consectetur excepturi.
                name: Et excepturi.
                price: 0.47192910673773814
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Id dolor delectus.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: At sint molestiae quam est eos perspiciatis.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Incidunt magnam totam.
                error_code: Totam beatae et adipisci quis et ut.
                success: true
    put:
      tags:
      - crud
      summary: updateBook crud
      description: Update one item
      operationId: crud#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.08062031473621718
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Numquam est culpa.
                name: Nulla rerum laudantium recusandae blanditiis ea.
                price: 0.5862269414454934
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Et perferendis.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Minus aut autem id.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Delectus et est atque ipsam.
                error_code: Unde repellendus quaerat nemo neque.
                success: false
  /book/add:
    post:
      tags:
      - crud
      summary: createBook crud
      description: Create one item
      operationId: crud#createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.13037940184325017
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2993168197570513
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Dolore enim error voluptatem consectetur inventore.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Dolor expedita quidem.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Dolor aut odit aliquam aut perspiciatis.
                error_code: Commodi et iusto.
                success: true
  /book/remove/{id}:
    delete:
      tags:
      - crud
      summary: deleteBook crud
      description: Delete one item by ID
      operationId: crud#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Esse vero autem a omnis aut voluptatibus.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Distinctio enim vel distinctio.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Laboriosam eligendi animi delectus.
                error_code: Consequatur voluptas neque possimus odit veniam.
                success: true
  /books:
    get:
      tags:
      - crud
      summary: getAllBooks crud
      description: Read All items
      operationId: crud#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2993168197570513
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2993168197570513
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2993168197570513
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Cumque voluptatem adipisci.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Consequatur voluptas.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Omnis esse modi.
                error_code: Tenetur blanditiis quo earum.
                success: false
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
  /signin:
    post:
      tags:
      - crud
      summary: signin crud
      description: signin
      operationId: crud#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: jmq
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Quis sapiente.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quis assumenda et.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Beatae accusantium qui accusantium voluptates et et.
                error_code: Molestiae quasi et voluptas rerum tempore.
                success: true
  /signup:
    post:
      tags:
      - crud
      summary: signup crud
      description: signup
      operationId: crud#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: idq
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Nihil sint consequatur.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Atque id.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Labore voluptate recusandae.
                error_code: Id quis consequatur.
                success: true
components:
  schemas:
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.7507439233560477
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.040083175808508356
      required:
      - id
      - name
      - price
    CreateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: true
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2993168197570513
        success: true
      required:
      - book
      - success
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: true
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Nam consequatur et maxime.
        success:
          type: boolean
          default: false
          example: false
      description: When email already exist
      example:
        message: Quia dolor rem unde sint.
        success: false
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2993168197570513
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2993168197570513
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2993168197570513
        success:
          type: boolean
          example: true
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2993168197570513
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2993168197570513
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2993168197570513
        success: true
      required:
      - books
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Aut adipisci.
        name:
          type: string
          example: Velit corrupti architecto accusamus eos dolor.
        price:
          type: number
          example: 0.13925049655949595
          format: double
        success:
          type: boolean
          example: false
      example:
        id: Modi autem nesciunt.
        name: Est tempore vel ipsa recusandae tenetur et.
        price: 0.014420100680339642
        success: true
      required:
      - id
      - name
      - price
      - success
    IDDoesntExist:
      type: object
      properties:
        err:
          type: string
          description: Returning error
          example: Quam reprehenderit aliquam laborum tenetur.
        id:
          type: string
          example: Odio sed illum rerum id quia.
        success:
          type: boolean
          default: false
          example: true
      description: When ID doesn't exist
      example:
        err: Modi voluptas quae laborum qui unde.
        id: Maxime maxime voluptatum beatae.
        success: true
      required:
      - err
      - success
      - id
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: false
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: false
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          example: fia
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: v7h
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          example: mne
          minLength: 8
      description: Use client ID and client secret to oAuth
      example:
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: 5dw
      required:
      - firstname
      - lastname
      - password
      - email
    Unauthorized:
      type: string
      description: Identifiers are invalid
      example: Expedita inventore voluptate beatae dignissimos odio.
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: Reiciendis consequatur sed voluptatem eos sequi.
        error_code:
          type: string
          example: Vitae ullam in dolorem nisi laborum sit.
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: Eos a porro.
        error_code: Id sit.
        success: false
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.05923306476516975
          format: double
      example:
        name: Guillaume
        price: 0.6367119068829208
      required:
      - name
      - price
tags:
- name: openapi
- name: crud
  description: The principe of CRUD API with GET, PUT, POST, DELETE
