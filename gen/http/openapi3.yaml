openapi: 3.0.3
info:
  title: Basic CRUD
  description: Stater Pack
  contact:
    name: Guillaume Morin
    url: https://guillaume-morin.fr
    email: guillaume.morin@epitech.eu
  license:
    name: Apache License Version 2.0
    url: https://guillaume-morin.fr
  version: "1.0"
servers:
- url: https://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      parameters:
      - name: client_id
        in: header
        description: The client identifier ID
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: The client identifier ID
          example: "00000"
        example: "00000"
      - name: client_secret
        in: header
        description: The client identifier secret
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: The client identifier secret
          example: "99999"
        example: "99999"
      - name: grant_type
        in: header
        description: The type of grant
        allowEmptyValue: true
        schema:
          type: string
          description: The type of grant
          default: client_credentials
          example: Ut tenetur explicabo quisquam ratione est quas.
        example: Reiciendis ratione quisquam in deserunt impedit.
      responses:
        "302":
          description: Found response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Totam nihil dolorum ea voluptas dolorum.
                expires_in: 2716831859360201250
                success: true
                token_type: Officiis necessitatibus nisi.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Adipisci nulla.
                expires_in: 1195023123420220945
                success: false
                token_type: Rem enim molestiae.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Provident soluta molestiae illum.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Ea ut mollitia tenetur et aliquam qui.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Repudiandae possimus.
                error_code: Qui vel quod fugit.
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Et dolore assumenda nihil impedit hic aut.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Voluptatem adipisci culpa tenetur dignissimos.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Blanditiis quo earum illo omnis.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Nam quis voluptate iure ut.
                error_code: Ex omnis esse modi.
                success: false
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: wuf
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Quibusdam et ab voluptas accusantium.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Et quia sint praesentium consequatur voluptas.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Et perferendis.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Delectus et est atque ipsam.
                error_code: Unde repellendus quaerat nemo neque.
                success: false
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: 7da
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Nam facilis qui et maxime.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Aut autem id voluptatum.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Recusandae blanditiis ea.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: Ipsa esse et.
                error_code: Sunt id dolor delectus qui ducimus excepturi.
                success: false
  /web/book/{id}:
    get:
      tags:
      - book
      summary: getBook book
      description: Get one item
      operationId: book#getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Nihil assumenda qui maxime.
                name: Aperiam laboriosam eligendi animi delectus asperiores.
                price: 0.1436730351084788
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Aliquam aut perspiciatis amet.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Accusantium illum architecto est commodi nihil praesentium.
                error_code: Voluptatum voluptatem accusamus amet dolor.
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        - api:write
        jwt_header_Authorization:
        - api:read
        - api:write
    put:
      tags:
      - book
      summary: updateBook book
      description: Update one item
      operationId: book#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.6417588031106173
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Iusto rerum nisi dolore enim error.
                name: Consectetur inventore nostrum repudiandae.
                price: 0.868621375096518
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Voluptate recusandae voluptas id quis consequatur quasi.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Ut harum.
                error_code: Laboriosam laborum rerum.
                success: true
  /web/book/add:
    post:
      tags:
      - book
      summary: createBook book
      description: Create one item
      operationId: book#createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.33007935933518645
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.7844024324419525
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Nihil ut quasi sed nihil molestiae.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Quis ullam minima iusto.
                error_code: Est quos voluptas vitae.
                success: false
  /web/book/remove/{id}:
    delete:
      tags:
      - book
      summary: deleteBook book
      description: Delete one item by ID
      operationId: book#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Reprehenderit facere aliquam.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Ratione ratione consequatur minima fugiat porro eveniet.
                error_code: Velit consequuntur eum ut corrupti.
                success: false
  /web/books:
    get:
      tags:
      - book
      summary: getAllBooks book
      description: Read All items
      operationId: book#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.7844024324419525
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.7844024324419525
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.7844024324419525
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Beatae accusantium qui accusantium voluptates et et.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Rerum vitae explicabo.
                error_code: Et sint sunt et quaerat hic distinctio.
                success: false
components:
  schemas:
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.5439001114095517
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.1767010696606497
      required:
      - id
      - name
      - price
    CreateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: false
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.7844024324419525
        success: false
      required:
      - book
      - success
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: false
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Recusandae illum aliquam veniam hic vel.
        success:
          type: boolean
          default: false
          example: true
      description: When email already exist
      example:
        message: Quam harum accusantium doloremque dicta eaque dolores.
        success: true
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.7844024324419525
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.7844024324419525
        success:
          type: boolean
          example: true
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.7844024324419525
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.7844024324419525
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.7844024324419525
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.7844024324419525
        success: false
      required:
      - books
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Ea error excepturi ut quae perferendis velit.
        name:
          type: string
          example: Sunt accusantium aspernatur.
        price:
          type: number
          example: 0.7050059069344381
          format: double
        success:
          type: boolean
          example: false
      example:
        id: Quia praesentium omnis nobis eos.
        name: Qui iure illum minus ea similique.
        price: 0.23088758295117706
        success: false
      required:
      - id
      - name
      - price
      - success
    IDDoesntExist:
      type: object
      properties:
        err:
          type: string
          description: Returning error
          example: Molestias rerum.
        id:
          type: string
          example: Odit incidunt est.
        success:
          type: boolean
          default: false
          example: true
      description: When ID doesn't exist
      example:
        err: Nisi dicta tempora dolorem.
        id: Ducimus eum delectus.
        success: false
      required:
      - err
      - success
      - id
    InvalidScopes:
      type: string
      description: Token scopes are invalid
      example: Delectus ipsam dolore.
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Cum sint distinctio temporibus et voluptate.
        expires_in:
          type: integer
          example: 4560624963955764498
          format: int64
        success:
          type: boolean
          example: true
        token_type:
          type: string
          example: Ipsa dolor.
      example:
        access_token: Sed in tempora dolores eveniet iste.
        expires_in: 7743106400275102334
        success: true
        token_type: Eaque neque eligendi ut doloribus aut.
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: false
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: true
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          example: tza
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: rj0
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          example: bv7
          minLength: 8
      description: Use client ID and client secret to oAuth
      example:
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: r2m
      required:
      - firstname
      - lastname
      - password
      - email
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: Aut est dolore.
        error_code:
          type: string
          example: Quibusdam aliquid optio sint necessitatibus velit.
        success:
          type: boolean
          default: false
          example: true
      description: Error not identified (500)
      example:
        err: Corrupti facere.
        error_code: Est molestias voluptas laborum iure hic.
        success: true
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.46186712300759636
          format: double
      example:
        name: Guillaume
        price: 0.7620760942002155
      required:
      - name
      - price
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        implicit:
          authorizationUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
            api:write: Provides write access
    jwt_header_Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: book
  description: The principe of CRUD API with GET, PUT, POST, DELETE
- name: oAuth
  description: Oauth to authentificate
