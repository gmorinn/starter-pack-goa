openapi: 3.0.3
info:
  title: Starter Pack
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    url: https://guillaume-morin.fr/
    email: guillaume.morin@epitech.eu
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
servers:
- url: https://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: Aliquam dicta accusamus quis aut quisquam porro.
              client_secret: Vitae dolorum dolorem enim.
              grant_type: Quia natus est.
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Impedit voluptatum earum aperiam molestiae.
                expires_in: 4372094714214760277
                success: false
                token_type: Blanditiis id rerum provident consequuntur.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Quam in et voluptatem perspiciatis maiores amet.
                expires_in: 4576454520189478081
                success: false
                token_type: Soluta labore quo nobis voluptatem et.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Autem veniam inventore perspiciatis.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Quam adipisci id voluptate est labore expedita.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Sed dolores illum velit dicta.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Voluptates vel nihil corporis eos ut.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Est adipisci omnis quo consequatur.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /sign-providers:
    post:
      tags:
      - jwtToken
      summary: auth-providers jwtToken
      description: Register or login by Google, Facebook
      operationId: jwtToken#auth-providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthProvidersRequestBody'
            example:
              email: guillaume@epitech.eu
              firebase_id_token: e5g
              firebase_provider: facebook.com
              firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
              firstname: Guillaume
              lastname: Morin
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                message: Voluptas et.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Ut nulla corporis in dolor velit.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Est voluptas ab ex.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Quasi unde et.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Reprehenderit harum.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Vel vitae nam nobis porro ullam aliquam.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              birthday: Id dolores aut similique ratione ipsum aliquam.
              confirm_password: JeSuisUnTest974
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: JeSuisUnTest974
              phone: +262 692 12 34 56
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Temporibus et pariatur.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Ut mollitia aliquid minus.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Qui rerum rerum est odio eos.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/bo/product/{id}:
    get:
      tags:
      - boProducts
      summary: getProduct boProducts
      description: Get one product
      operationId: boProducts#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        schema:
          type: string
          description: Unique ID of the product
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010846B\U000BC184\U000ACF17"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001DAC9\U0002B68D\U00058EF7\U0004EB2F\U00065C70\U00021439"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - boProducts
      summary: updateProduct boProducts
      description: Update one product
      operationId: boProducts#updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010D749\U000DDB74웠\U0010545D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000F46B1\U00098CAB\U0002A625\U00040A1F"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/product/add:
    post:
      tags:
      - boProducts
      summary: createProduct boProducts
      description: Create one product
      operationId: boProducts#createProduct
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0002CFAC\U000E8A7A\U000D114D\U00100513\U0002BF78"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001EFE7\U00064D0B\U0006EC04\U0009B0FE\U000E3B6C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/product/remove/{id}:
    delete:
      tags:
      - boProducts
      summary: deleteProduct boProducts
      description: Delete one product by ID
      operationId: boProducts#deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000708E7\U000BB83D\U00029014"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C518F\U00107C83\U0008CE64"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponseBody'
              example:
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/products:
    get:
      tags:
      - boProducts
      summary: getAllProducts boProducts
      description: Get All products
      operationId: boProducts#getAllProducts
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000DF0C7\U00050969\U0005BB0F\U00040D2F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00094B2E\U000AC949\U0004CDE6\U00028764\U000B7D56"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductsResponseBody'
              example:
                products:
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/products/category/{category}:
    get:
      tags:
      - boProducts
      summary: getAllProductsByCategory boProducts
      description: Get All products by category
      operationId: boProducts#getAllProductsByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
          default: nothing
          example: men
          enum:
          - men
          - women
          - hat
          - jacket
          - sneaker
          - nothing
        example: men
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000EA3C4\U000CC528\U0002A1AB\U00073DFA\U000F48C0\U000911AF"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0003705F\U0001D315\U0010C64D\U000D64C8\U00080588\U0006424B"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductsResponseBody'
              example:
                products:
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/products/remove:
    patch:
      tags:
      - boProducts
      summary: deleteManyProducts boProducts
      description: Delete many products with IDs send in body
      operationId: boProducts#deleteManyProducts
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000A4AAA\U00094DB1\U0009DE6D\U0006E1D8"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00073A8F\U0004093F\U0005301D뭘"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteManyProductsRequestBody'
            example:
              tab:
              - Ratione repellendus voluptatem.
              - Sunt numquam exercitationem expedita.
              - Occaecati qui.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponseBody'
              example:
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/user/{id}:
    get:
      tags:
      - boUsers
      summary: getUser boUsers
      description: Get one User
      operationId: boUsers#getUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        schema:
          type: string
          description: Unique ID of the User
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U001033D2\U0005831D缒\U00025102"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00054D0F\U000B981Dꇸ\U00056603"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponseBody'
              example:
                success: false
                user:
                  birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - boUsers
      summary: updateUser boUsers
      description: Update one User
      operationId: boUsers#updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000E6DCE"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000B9D08\U000DDE24"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestBody'
            example:
              User:
                birthday: 01/09/2002
                email: guillaume.morin@epitech.eu
                firstname: Guillaume
                lastname: Morin
                phone: +262 692 12 34 56
                role: user
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponseBody'
              example:
                success: false
                user:
                  birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/user/add:
    post:
      tags:
      - boUsers
      summary: createUser boUsers
      description: Create one User
      operationId: boUsers#createUser
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer �\U00088786\U00080C65\U0010DA1D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00024B30\U00021C16\U0003F7DE\U00077D87\U00105B0D\U000F0D46"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestBody'
            example:
              birthday: 01/09/2002
              confirm_password: JeSuisUnTest974
              email: guillaume.morin@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: JeSuisUnTest974
              phone: +262 692 12 34 56
              role: user
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponseBody'
              example:
                success: false
                user:
                  birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/user/remove/{id}:
    delete:
      tags:
      - boUsers
      summary: deleteUser boUsers
      description: Delete one User by ID
      operationId: boUsers#deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0008E261\U000B01FC\U00026B1C\U00091858\U0001980E"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000E4423"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponseBody'
              example:
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/users:
    get:
      tags:
      - boUsers
      summary: getAllusers boUsers
      description: Get All users
      operationId: boUsers#getAllusers
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000C1595\U000E383B\U00017267"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00103049\U0003E8E7눻\U000E37F0\U0006CF89\U00044382"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllusersResponseBody'
              example:
                success: true
                users:
                - birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
                - birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
                - birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
                  role: user
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/users/remove:
    patch:
      tags:
      - boUsers
      summary: deleteManyUsers boUsers
      description: Delete many users with IDs send in body
      operationId: boUsers#deleteManyUsers
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000FE762\U000F7069鯬\U0009B65E\U0010D28B\U0010842D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00032DC4\U000599FA\U0001D1D3\U00057A5E\U000B1A96\U000E83A2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteManyProductsRequestBody'
            example:
              tab:
              - Autem sint vel in ea laboriosam quia.
              - Est vitae distinctio impedit optio.
              - Nostrum doloremque id distinctio.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponseBody'
              example:
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/product/{id}:
    get:
      tags:
      - products
      summary: getProduct products
      description: Get one product
      operationId: products#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        schema:
          type: string
          description: Unique ID of the product
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/products/category/{category}:
    get:
      tags:
      - products
      summary: getAllProductsByCategory products
      description: Get All products by category
      operationId: products#getAllProductsByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
          default: nothing
          example: men
          enum:
          - men
          - women
          - hat
          - jacket
          - sneaker
          - nothing
        example: men
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductsResponseBody'
              example:
                products:
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/user/{id}:
    get:
      tags:
      - users
      summary: getUser users
      description: Get one User
      operationId: users#getUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        schema:
          type: string
          description: Unique ID of the User
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U00099594\U0008572E\U000A3DF9\U00023A7F\U000402B0\U0003B577"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00053D84\U00053F11"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponseBody'
              example:
                success: true
                user:
                  birthday: 01/09/2002
                  email: guillaume.morin@epitech.eu
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  phone: +262 692 12 34 56
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
components:
  schemas:
    AuthProvidersRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firebase_id_token:
          type: string
          example: ayb
          minLength: 400
        firebase_provider:
          type: string
          example: facebook.com
        firebase_uid:
          type: string
          example: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
          minLength: 15
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
      example:
        email: guillaume@epitech.eu
        firebase_id_token: yuh
        firebase_provider: facebook.com
        firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
        firstname: Guillaume
        lastname: Morin
      required:
      - email
      - firstname
      - lastname
      - firebase_id_token
      - firebase_uid
      - firebase_provider
    CreateProductRequestBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/PayloadProduct'
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          name: Guillaume
          price: 69
      required:
      - product
    CreateProductResponseBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ResBoProduct'
        success:
          type: boolean
          example: true
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: false
      required:
      - product
      - success
    CreateUserRequestBody:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: 01/09/2002
        confirm_password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        email:
          type: string
          example: guillaume.morin@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
        role:
          type: string
          default: user
          example: user
          enum:
          - user
          - pro
          - admin
      example:
        birthday: 01/09/2002
        confirm_password: JeSuisUnTest974
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: JeSuisUnTest974
        phone: +262 692 12 34 56
        role: user
      required:
      - email
      - firstname
      - lastname
      - password
      - confirm_password
    CreateUserResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/ResBoUser'
      example:
        success: true
        user:
          birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
      required:
      - user
      - success
    DeleteManyProductsRequestBody:
      type: object
      properties:
        tab:
          type: array
          items:
            type: string
            example: Quasi est aut.
          example:
          - Quo est quisquam non accusamus nostrum.
          - Voluptatem eum quia minima.
      example:
        tab:
        - Dolores omnis officia accusantium quibusdam eligendi est.
        - Ex ab voluptate quisquam.
      required:
      - tab
    DeleteProductResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: true
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Sunt fuga dolores et dolor esse sit.
        success:
          type: boolean
          default: false
          example: false
      description: When email already exist
      example:
        message: Sapiente labore cumque nulla dolor.
        success: true
      required:
      - message
      - success
    GetAllProductsResponseBody:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ResBoProduct'
          description: All products by category
          example:
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
        success:
          type: boolean
          example: true
      example:
        products:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - products
      - success
    GetAllusersResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/ResBoUser'
          description: All users by category
          example:
          - birthday: 01/09/2002
            email: guillaume.morin@epitech.eu
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            phone: +262 692 12 34 56
            role: user
          - birthday: 01/09/2002
            email: guillaume.morin@epitech.eu
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            phone: +262 692 12 34 56
            role: user
          - birthday: 01/09/2002
            email: guillaume.morin@epitech.eu
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            phone: +262 692 12 34 56
            role: user
          - birthday: 01/09/2002
            email: guillaume.morin@epitech.eu
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            phone: +262 692 12 34 56
            role: user
      example:
        success: true
        users:
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
        - birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
      required:
      - users
      - success
    GetUserResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/ResUser'
      example:
        success: false
        user:
          birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          phone: +262 692 12 34 56
      required:
      - user
      - success
    InvalidScopes:
      type: string
      description: Token scopes are invalid
      example: Soluta qui.
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: Cumque possimus.
        client_secret:
          type: string
          example: Ab qui impedit aperiam.
        grant_type:
          type: string
          example: Explicabo adipisci.
      example:
        client_id: Ipsam suscipit molestiae non eum dignissimos.
        client_secret: Voluptatem voluptatem ducimus accusamus quia qui.
        grant_type: Animi dolor rem nihil voluptatem.
      required:
      - client_id
      - client_secret
      - grant_type
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Vero et deleniti.
        expires_in:
          type: integer
          example: 7780840030901499397
          format: int64
        success:
          type: boolean
          example: true
        token_type:
          type: string
          example: Id debitis occaecati minima eius ab.
      example:
        access_token: Id fuga et omnis sed.
        expires_in: 6425252934581418062
        success: false
        token_type: Magnam aut doloremque delectus libero nostrum vel.
      required:
      - access_token
      - token_type
      - expires_in
      - success
    PayloadProduct:
      type: object
      properties:
        category:
          type: string
          default: nothing
          example: men
          enum:
          - men
          - women
          - hat
          - jacket
          - sneaker
          - nothing
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name:
          type: string
          example: Guillaume
          minLength: 3
        price:
          type: number
          example: 69
          minimum: 0
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name: Guillaume
        price: 69
      required:
      - name
      - price
      - cover
      - category
    PayloadUser:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: 01/09/2002
        email:
          type: string
          example: guillaume.morin@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
        lastname:
          type: string
          example: Morin
          minLength: 3
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
        role:
          type: string
          default: user
          example: user
          enum:
          - user
          - pro
          - admin
      example:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
      required:
      - email
      - firstname
      - lastname
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    ResBoProduct:
      type: object
      properties:
        category:
          type: string
          example: men
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      required:
      - id
      - name
      - price
      - cover
      - category
    ResBoUser:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: 01/09/2002
        email:
          type: string
          example: guillaume.morin@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        lastname:
          type: string
          example: Morin
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
        role:
          type: string
          default: user
          example: user
          enum:
          - user
          - pro
          - admin
      example:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
        role: user
      required:
      - id
      - email
    ResUser:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: 01/09/2002
        email:
          type: string
          example: guillaume.morin@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        lastname:
          type: string
          example: Morin
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
      example:
        birthday: 01/09/2002
        email: guillaume.morin@epitech.eu
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        phone: +262 692 12 34 56
      required:
      - id
      - email
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: true
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: false
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: Voluptatem sint.
        confirm_password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
      example:
        birthday: Dolorum et iure et provident eum rem.
        confirm_password: JeSuisUnTest974
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: JeSuisUnTest974
        phone: +262 692 12 34 56
      required:
      - firstname
      - lastname
      - password
      - email
      - confirm_password
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: sql no rows affected
        error_code:
          type: string
          example: TX_UPDATE_ITEM
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: sql no rows affected
        error_code: TX_UPDATE_ITEM
        success: true
      required:
      - err
      - success
      - error_code
    UpdateUserRequestBody:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/PayloadUser'
      example:
        User:
          birthday: 01/09/2002
          email: guillaume.morin@epitech.eu
          firstname: Guillaume
          lastname: Morin
          phone: +262 692 12 34 56
          role: user
      required:
      - User
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        clientCredentials:
          tokenUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
    jwt_header_jwtToken:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: boProducts
  description: Products BO of the E-Commerce
- name: boUsers
  description: users of the api
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: oAuth
  description: Oauth to authentificate
- name: products
  description: Products of the E-Commerce
- name: users
  description: users of the api
