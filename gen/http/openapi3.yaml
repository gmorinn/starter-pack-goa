openapi: 3.0.3
info:
  title: Basic CRUD
  description: Exemple for api crud
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /book/{id}:
    get:
      tags:
      - crud
      summary: getBook crud
      description: Get one item
      operationId: crud#getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Aperiam odit nulla et voluptate similique.
                name: At sint molestiae quam est eos perspiciatis.
                price: 0.9014852504127305
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Consectetur minus aut autem id voluptatum qui.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quia modi voluptatem.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Voluptas accusantium ut alias delectus.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Id dolor delectus.
                error_code: Ducimus excepturi numquam est culpa eos nulla.
                success: true
      security:
      - jwt_header_Authorization:
        - api:read
        - api:write
    put:
      tags:
      - crud
      summary: updateBook crud
      description: Update one item
      operationId: crud#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.907140683484096
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Atque ipsam et.
                name: Repellendus quaerat nemo neque voluptatibus quibusdam.
                price: 0.12864864107563842
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Cumque voluptatem adipisci.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Et quia sint praesentium consequatur voluptas.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Dignissimos distinctio.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Omnis esse modi.
                error_code: Tenetur blanditiis quo earum.
                success: false
  /book/add:
    post:
      tags:
      - crud
      summary: createBook crud
      description: Create one item
      operationId: crud#createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.5598850343195235
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2692364234446434
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Rerum vitae explicabo.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Rerum excepturi labore voluptate.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Sint sunt et quaerat hic distinctio.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Delectus laborum qui animi eum.
                error_code: Sed quis assumenda et.
                success: true
  /book/remove/{id}:
    delete:
      tags:
      - crud
      summary: deleteBook crud
      description: Delete one item by ID
      operationId: crud#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Id mollitia.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Voluptatem accusamus amet dolor aut odit.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Ut harum.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Dolore enim error voluptatem consectetur inventore.
                error_code: Repudiandae voluptatem nam provident sint.
                success: false
  /books:
    get:
      tags:
      - crud
      summary: getAllBooks crud
      description: Read All items
      operationId: crud#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2692364234446434
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 0.2692364234446434
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Corporis harum dolor expedita quidem.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Eum quia dicta ea totam culpa doloribus.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Accusantium illum architecto est commodi nihil praesentium.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Neque possimus odit veniam aperiam.
                error_code: Esse vero autem a omnis aut voluptatibus.
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
  /signin:
    post:
      tags:
      - crud
      summary: signin crud
      description: signin
      operationId: crud#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: rm7
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Temporibus ipsa aut impedit sequi omnis sint.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Hic sapiente.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Molestiae possimus reprehenderit totam.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Voluptatem nihil ut quasi sed.
                error_code: Molestiae perferendis sit ut sit tempore.
                success: false
  /signup:
    post:
      tags:
      - crud
      summary: signup crud
      description: signup
      operationId: crud#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: edi
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Velit consequuntur eum ut corrupti.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Voluptates et.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Reprehenderit facere aliquam.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDDoesntExist'
              example:
                err: Quis sapiente.
                error_code: Ratione consequatur minima fugiat porro.
                success: false
components:
  schemas:
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.23088758295117706
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 0.7186570240555605
      required:
      - id
      - name
      - price
    CreateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: false
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2692364234446434
        success: true
      required:
      - book
      - success
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
      example:
        success: false
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Nobis eos.
        success:
          type: boolean
          default: false
          example: false
      description: When email already exist
      example:
        message: Iure illum.
        success: true
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2692364234446434
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2692364234446434
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2692364234446434
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 0.2692364234446434
        success:
          type: boolean
          example: false
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2692364234446434
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2692364234446434
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 0.2692364234446434
        success: false
      required:
      - books
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Deserunt dolores mollitia quia.
        name:
          type: string
          example: Blanditiis alias natus dolores modi libero ut.
        price:
          type: number
          example: 0.38519906902504236
          format: double
        success:
          type: boolean
          example: true
      example:
        id: Illum aliquam veniam.
        name: Vel tempore sapiente quam harum accusantium doloremque.
        price: 0.1433270089279233
        success: false
      required:
      - id
      - name
      - price
      - success
    IDDoesntExist:
      type: object
      properties:
        err:
          type: string
          description: Returning error
          example: Quibusdam aliquid optio sint necessitatibus velit.
        id:
          type: string
          example: Eaque corrupti facere.
        success:
          type: boolean
          default: false
          example: false
      description: When ID doesn't exist
      example:
        err: Molestias voluptas laborum iure hic vel doloremque.
        id: Ipsam dolore.
        success: true
      required:
      - err
      - success
      - id
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: true
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: false
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          example: se8
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: akx
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          example: 0r6
          minLength: 8
      description: Use client ID and client secret to oAuth
      example:
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: gw7
      required:
      - firstname
      - lastname
      - password
      - email
    Unauthorized:
      type: string
      description: Identifiers are invalid
      example: Ducimus quod aut est dolore.
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: Rerum dolor sit mollitia.
        error_code:
          type: string
          example: Officia ut ea error excepturi ut quae.
        success:
          type: boolean
          default: false
          example: true
      description: Error not identified (500)
      example:
        err: Neque sunt accusantium aspernatur qui.
        error_code: Ducimus quia.
        success: true
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 0.6322808454237205
          format: double
      example:
        name: Guillaume
        price: 0.45820831134528
      required:
      - name
      - price
  securitySchemes:
    jwt_header_Authorization:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: crud
  description: The principe of CRUD API with GET, PUT, POST, DELETE
