openapi: 3.0.3
info:
  title: Starter Pack
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    url: https://guillaume-morin.fr/
    email: guillaume.morin@epitech.eu
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: Sequi doloremque sequi est cupiditate.
              client_secret: Tempore omnis in vel ullam.
              grant_type: Ipsam repudiandae expedita animi.
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Expedita nihil omnis assumenda qui qui.
                expires_in: 4480510178043397355
                success: true
                token_type: Est earum est cumque at eum commodi.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Ipsum aut mollitia.
                expires_in: 1044628457192554585
                success: true
                token_type: Labore architecto non dolor temporibus.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Placeat dignissimos provident iste.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Consequuntur ut impedit ab rerum.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Voluptates doloremque.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Voluptatibus distinctio.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quaerat repellat.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /sign-providers:
    post:
      tags:
      - jwtToken
      summary: auth-providers jwtToken
      description: Register or login by Google, Facebook
      operationId: jwtToken#auth-providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthProvidersRequestBody'
            example:
              email: guillaume@epitech.eu
              firebase_id_token: wme
              firebase_provider: facebook.com
              firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
              firstname: Guillaume
              lastname: Morin
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                message: Et pariatur ratione repellendus voluptatem quam sunt.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quibusdam nemo.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Et occaecati qui.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Quibusdam at iste.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Modi deserunt cum debitis odit.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Ex qui non sint maxime voluptatem.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              birthday: Et earum veniam omnis vel ab.
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: JeSuisUnTest974
              phone: +262 692 12 34 56
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Non ut.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Vel nesciunt harum sed.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Ipsam ratione maxime molestiae.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /web/book/{id}:
    get:
      tags:
      - book
      summary: getBook book
      description: Get one item
      operationId: book#getBook
      parameters:
      - name: id
        in: path
        description: Unique ID of the book
        required: true
        schema:
          type: string
          description: Unique ID of the book
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000DF0C7\U00050969\U0005BB0F\U00040D2F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00094B2E\U000AC949\U0004CDE6\U00028764\U000B7D56"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Rerum ut doloremque sapiente nisi.
                name: Fuga voluptatibus dolor.
                price: 0.5779882770080401
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Alias libero dolor eaque fugiat ut minus.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - book
      summary: updateBook book
      description: Update one item
      operationId: book#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000EA3C4\U000CC528\U0002A1AB\U00073DFA\U000F48C0\U000911AF"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0003705F\U0001D315\U0010C64D\U000D64C8\U00080588\U0006424B"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 69
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Repellat excepturi.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/book/add:
    post:
      tags:
      - book
      summary: createBook book
      description: Create one item
      operationId: book#createBook
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0002CFAC\U000E8A7A\U000D114D\U00100513\U0002BF78"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001EFE7\U00064D0B\U0006EC04\U0009B0FE\U000E3B6C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.23261748302976784
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quas qui aut veniam autem.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/book/remove/{id}:
    delete:
      tags:
      - book
      summary: deleteBook book
      description: Delete one item by ID
      operationId: book#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000708E7\U000BB83D\U00029014"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C518F\U00107C83\U0008CE64"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Aut saepe.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/books:
    get:
      tags:
      - book
      summary: getAllBooks book
      description: Get All items
      operationId: book#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Aut eum cumque.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
  /web/product/{id}:
    get:
      tags:
      - products
      summary: getProduct products
      description: Get one product
      operationId: products#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        schema:
          type: string
          description: Unique ID of the product
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0008E261\U000B01FC\U00026B1C\U00091858\U0001980E"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000E4423"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - products
      summary: updateProduct products
      description: Update one product
      operationId: products#updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000C1595\U000E383B\U00017267"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00103049\U0003E8E7눻\U000E37F0\U0006CF89\U00044382"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/product/add:
    post:
      tags:
      - products
      summary: createProduct products
      description: Create one product
      operationId: products#createProduct
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010846B\U000BC184\U000ACF17"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001DAC9\U0002B68D\U00058EF7\U0004EB2F\U00065C70\U00021439"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/product/remove/{id}:
    delete:
      tags:
      - products
      summary: deleteProduct products
      description: Delete one product by ID
      operationId: products#deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000A4AAA\U00094DB1\U0009DE6D\U0006E1D8"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00073A8F\U0004093F\U0005301D뭘"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/products:
    get:
      tags:
      - products
      summary: getAllProductsByCategory products
      description: Get All products by category
      operationId: products#getAllProductsByCategory
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010D749\U000DDB74웠\U0010545D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000F46B1\U00098CAB\U0002A625\U00040A1F"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductsByCategoryResponseBody'
              example:
                products:
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
components:
  schemas:
    AuthProvidersRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firebase_id_token:
          type: string
          example: 32q
          minLength: 400
        firebase_provider:
          type: string
          example: facebook.com
        firebase_uid:
          type: string
          example: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
          minLength: 15
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
      example:
        email: guillaume@epitech.eu
        firebase_id_token: lbx
        firebase_provider: facebook.com
        firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
        firstname: Guillaume
        lastname: Morin
      required:
      - email
      - firstname
      - lastname
      - firebase_id_token
      - firebase_uid
      - firebase_provider
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      required:
      - id
      - name
      - price
    CreateProductRequestBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/PayloadProduct'
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          name: Guillaume
          price: 69
      required:
      - product
    CreateProductResponseBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ResProduct'
        success:
          type: boolean
          example: true
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: false
      required:
      - product
      - success
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: true
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Enim et.
        success:
          type: boolean
          default: false
          example: true
      description: When email already exist
      example:
        message: Pariatur explicabo et exercitationem quia sint iusto.
        success: true
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          description: Result is an array of object
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
        success:
          type: boolean
          example: true
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - books
      - success
    GetAllProductsByCategoryResponseBody:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ResProduct'
          description: Result is an array of object
          example:
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
        success:
          type: boolean
          example: false
      example:
        products:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: false
      required:
      - products
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Repellat cupiditate non ut quo.
        name:
          type: string
          example: Voluptatem sed repellat et ipsa.
        price:
          type: number
          example: 0.20715292547893852
          format: double
        success:
          type: boolean
          example: false
      example:
        id: Autem ducimus.
        name: Ipsa voluptatibus asperiores illum quo dolorum molestiae.
        price: 0.5909250966997965
        success: false
      required:
      - id
      - name
      - price
      - success
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: Eaque ut aperiam excepturi.
        client_secret:
          type: string
          example: Sed et.
        grant_type:
          type: string
          example: Maxime et aut voluptatum esse.
      example:
        client_id: Quidem est ut ea eligendi ea.
        client_secret: Quia nesciunt.
        grant_type: Consequuntur odio molestias sed consequatur.
      required:
      - client_id
      - client_secret
      - grant_type
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Alias beatae quibusdam voluptas.
        expires_in:
          type: integer
          example: 5233857070461923496
          format: int64
        success:
          type: boolean
          example: true
        token_type:
          type: string
          example: Quo deleniti ea.
      example:
        access_token: Eligendi necessitatibus.
        expires_in: 7060609363550530949
        success: false
        token_type: Et voluptatibus laborum distinctio.
      required:
      - access_token
      - token_type
      - expires_in
      - success
    PayloadProduct:
      type: object
      properties:
        category:
          type: string
          example: men
          enum:
          - men
          - women
          - hats
          - jackets
          - sneakers
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name: Guillaume
        price: 69
      required:
      - name
      - price
      - cover
      - category
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    ResProduct:
      type: object
      properties:
        category:
          type: string
          example: men
          enum:
          - men
          - women
          - hats
          - jackets
          - sneakers
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      required:
      - id
      - name
      - price
      - cover
      - category
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: false
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: true
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: Quia et.
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
      description: Use client ID and client secret to oAuth
      example:
        birthday: Rerum non dolor et omnis.
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: JeSuisUnTest974
        phone: +262 692 12 34 56
      required:
      - firstname
      - lastname
      - password
      - email
    Unauthorized:
      type: string
      description: Credentials are invalid
      example: Eveniet ad aut dolor et.
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: sql no rows affected
        error_code:
          type: string
          example: TX_UPDATE_ITEM
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: sql no rows affected
        error_code: TX_UPDATE_ITEM
        success: true
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 10
        price:
          type: number
          example: 69
          minimum: 0.1
      example:
        name: Guillaume
        price: 69
      required:
      - name
      - price
    UpdateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: true
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - book
      - success
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        clientCredentials:
          tokenUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
    jwt_header_jwtToken:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: book
  description: The principe of CRUD API with GET, PUT, POST, DELETE with Table Book
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: oAuth
  description: Oauth to authentificate
- name: products
  description: Products of the E-Commerce
