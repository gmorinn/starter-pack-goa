openapi: 3.0.3
info:
  title: Starter Pack
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    url: https://guillaume-morin.fr/
    email: guillaume.morin@epitech.eu
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: Aut veniam autem.
              client_secret: Et earum veniam omnis vel ab.
              grant_type: Voluptatem incidunt pariatur et nulla.
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Ad quis quaerat.
                expires_in: 7790529887225078354
                success: true
                token_type: Magni animi aliquid non ut corrupti consequatur.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Nihil et accusantium quam.
                expires_in: 7656406774412358812
                success: false
                token_type: Expedita quibusdam at iste quia neque voluptates.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Vel nesciunt harum sed.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Ipsam ratione maxime molestiae.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Iste aliquam non consequuntur.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Non nisi aut.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Voluptas et accusamus repellat excepturi voluptas.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /sign-providers:
    post:
      tags:
      - jwtToken
      summary: auth-providers jwtToken
      description: Register or login by Google, Facebook
      operationId: jwtToken#auth-providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthProvidersRequestBody'
            example:
              email: guillaume@epitech.eu
              firebase_id_token: gkx
              firebase_provider: facebook.com
              firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
              firstname: Guillaume
              lastname: Morin
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                message: Ab aut saepe molestias voluptatibus.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Est odit velit voluptas.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Consequatur placeat possimus id.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Nihil iure rerum ut doloremque sapiente.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Maiores a aut nesciunt.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Voluptatibus dolor omnis quisquam quod illo similique.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              birthday: Explicabo quidem odio.
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: JeSuisUnTest974
              phone: +262 692 12 34 56
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Eum voluptas facilis.
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Explicabo occaecati.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidScopes'
              example: Accusantium assumenda aut porro autem at est.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /web/product/{id}:
    get:
      tags:
      - products
      summary: getProduct products
      description: Get one product
      operationId: products#getProduct
      parameters:
      - name: id
        in: path
        description: Unique ID of the product
        required: true
        schema:
          type: string
          description: Unique ID of the product
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010D749\U000DDB74웠\U0010545D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000F46B1\U00098CAB\U0002A625\U00040A1F"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - products
      summary: updateProduct products
      description: Update one product
      operationId: products#updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0002CFAC\U000E8A7A\U000D114D\U00100513\U0002BF78"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001EFE7\U00064D0B\U0006EC04\U0009B0FE\U000E3B6C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/product/add:
    post:
      tags:
      - products
      summary: createProduct products
      description: Create one product
      operationId: products#createProduct
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000708E7\U000BB83D\U00029014"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C518F\U00107C83\U0008CE64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestBody'
            example:
              product:
                category: men
                cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                name: Guillaume
                price: 69
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProductResponseBody'
              example:
                product:
                  category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/product/remove/{id}:
    delete:
      tags:
      - products
      summary: deleteProduct products
      description: Delete one product by ID
      operationId: products#deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000EA3C4\U000CC528\U0002A1AB\U00073DFA\U000F48C0\U000911AF"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0003705F\U0001D315\U0010C64D\U000D64C8\U00080588\U0006424B"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponseBody'
              example:
                success: true
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/products/{category}:
    get:
      tags:
      - products
      summary: getAllProductsByCategory products
      description: Get All products by category
      operationId: products#getAllProductsByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
          default: nothing
          example: men
          enum:
          - men
          - women
          - hat
          - jacket
          - sneaker
          - nothing
        example: men
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000DF0C7\U00050969\U0005BB0F\U00040D2F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00094B2E\U000AC949\U0004CDE6\U00028764\U000B7D56"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllProductsByCategoryResponseBody'
              example:
                products:
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - category: men
                  cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
components:
  schemas:
    AuthProvidersRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firebase_id_token:
          type: string
          example: pxf
          minLength: 400
        firebase_provider:
          type: string
          example: facebook.com
        firebase_uid:
          type: string
          example: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
          minLength: 15
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
      example:
        email: guillaume@epitech.eu
        firebase_id_token: 3sl
        firebase_provider: facebook.com
        firebase_uid: zgmURRUlcJfgDMRyjJ20xs7Rxxw2
        firstname: Guillaume
        lastname: Morin
      required:
      - email
      - firstname
      - lastname
      - firebase_id_token
      - firebase_uid
      - firebase_provider
    CreateProductRequestBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/PayloadProduct'
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          name: Guillaume
          price: 69
      required:
      - product
    CreateProductResponseBody:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ResProduct'
        success:
          type: boolean
          example: false
      example:
        product:
          category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: false
      required:
      - product
      - success
    DeleteProductResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
      example:
        success: true
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Est labore expedita repudiandae.
        success:
          type: boolean
          default: false
          example: false
      description: When email already exist
      example:
        message: Inventore perspiciatis magnam quam in et.
        success: false
      required:
      - message
      - success
    GetAllProductsByCategoryResponseBody:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ResProduct'
          description: Result is an array of object
          example:
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - category: men
            cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
        success:
          type: boolean
          example: false
      example:
        products:
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - category: men
          cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - products
      - success
    InvalidScopes:
      type: string
      description: Token scopes are invalid
      example: Soluta soluta labore quo nobis voluptatem.
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: Qui enim atque quisquam modi fuga.
        client_secret:
          type: string
          example: Officia enim magni sint esse eos et.
        grant_type:
          type: string
          example: Enim aut velit ea voluptatem.
      example:
        client_id: In corporis perferendis.
        client_secret: Non ut.
        grant_type: Dolorem a cumque.
      required:
      - client_id
      - client_secret
      - grant_type
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Est id.
        expires_in:
          type: integer
          example: 604685638570393078
          format: int64
        success:
          type: boolean
          example: true
        token_type:
          type: string
          example: Molestiae molestias iusto quo ut.
      example:
        access_token: Consequatur occaecati.
        expires_in: 8682579153969542440
        success: false
        token_type: Numquam explicabo dolorum neque.
      required:
      - access_token
      - token_type
      - expires_in
      - success
    PayloadProduct:
      type: object
      properties:
        category:
          type: string
          default: nothing
          example: men
          enum:
          - men
          - women
          - hat
          - jacket
          - sneaker
          - nothing
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name:
          type: string
          example: Guillaume
          minLength: 3
        price:
          type: number
          example: 69
          minimum: 0
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        name: Guillaume
        price: 69
      required:
      - name
      - price
      - cover
      - category
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    ResProduct:
      type: object
      properties:
        category:
          type: string
          example: men
          enum:
          - men
          - women
          - hats
          - jackets
          - sneakers
        cover:
          type: string
          example: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        category: men
        cover: https://i.ibb.co/ypkgK0X/blue-beanie.png
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      required:
      - id
      - name
      - price
      - cover
      - category
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: false
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: false
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: Molestiae accusamus blanditiis id rerum provident consequuntur.
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
      description: Use client ID and client secret to oAuth
      example:
        birthday: Adipisci voluptas vitae quam.
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: JeSuisUnTest974
        phone: +262 692 12 34 56
      required:
      - firstname
      - lastname
      - password
      - email
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: sql no rows affected
        error_code:
          type: string
          example: TX_UPDATE_ITEM
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: sql no rows affected
        error_code: TX_UPDATE_ITEM
        success: false
      required:
      - err
      - success
      - error_code
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        clientCredentials:
          tokenUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
    jwt_header_jwtToken:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: oAuth
  description: Oauth to authentificate
- name: products
  description: Products of the E-Commerce
