openapi: 3.0.3
info:
  title: Starter Pack
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    url: https://guillaume-morin.fr/
    email: guillaume.morin@epitech.eu
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
servers:
- url: http://localhost:8088
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: Voluptatem et pariatur.
              client_secret: Repellendus voluptatem.
              grant_type: Sunt numquam exercitationem expedita.
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Occaecati qui.
                expires_in: 3536654110888358914
                success: true
                token_type: Quibusdam nemo.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Ipsam repudiandae expedita animi.
                expires_in: 6829346379698261650
                success: true
                token_type: Expedita nihil omnis assumenda qui qui.
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Tempore omnis in vel ullam.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Sequi est cupiditate.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Et accusantium.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Neque voluptates ex qui non.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Quibusdam at iste.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /sign-providers:
    post:
      tags:
      - jwtToken
      summary: auth-providers jwtToken
      description: Register or login by Google, Facebook
      operationId: jwtToken#auth-providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthProvidersRequestBody'
            example:
              email: guillaume@epitech.eu
              firebase_id_token: eov
              firebase_provider: Facebook
              firebase_uid: 8l5
              firstname: Guillaume
              lastname: Morin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Doloremque et dolor.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Dolor atque molestias.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Nihil voluptatibus distinctio quae rem nulla culpa.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Incidunt pariatur et nulla ipsa ad quis.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Aut tempora ipsam ratione maxime molestiae.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Animi aliquid non ut corrupti consequatur saepe.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              birthday: Voluptas libero non.
              email: guillaume@epitech.eu
              firstname: Guillaume
              lastname: Morin
              password: JeSuisUnTest974
              phone: +262 692 12 34 56
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAlreadyExist'
              example:
                message: Saepe molestias.
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Veniam autem laudantium et earum.
        "403":
          description: Forbidden response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Odit velit voluptas quas qui.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
  /web/book/{id}:
    get:
      tags:
      - book
      summary: getBook book
      description: Get one item
      operationId: book#getBook
      parameters:
      - name: id
        in: path
        description: Unique ID of the book
        required: true
        schema:
          type: string
          description: Unique ID of the book
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000DF0C7\U00050969\U0005BB0F\U00040D2F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00094B2E\U000AC949\U0004CDE6\U00028764\U000B7D56"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBookResponseBody'
              example:
                id: Odio et in id beatae deserunt ut.
                name: Recusandae eos a dolor.
                price: 0.25879611573262035
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Qui minus accusantium assumenda.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - book
      summary: updateBook book
      description: Update one item
      operationId: book#updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000EA3C4\U000CC528\U0002A1AB\U00073DFA\U000F48C0\U000911AF"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0003705F\U0001D315\U0010C64D\U000D64C8\U00080588\U0006424B"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 69
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Qui consequatur vel repudiandae a.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: false
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/book/add:
    post:
      tags:
      - book
      summary: createBook book
      description: Create one item
      operationId: book#createBook
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0002CFAC\U000E8A7A\U000D114D\U00100513\U0002BF78"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001EFE7\U00064D0B\U0006EC04\U0009B0FE\U000E3B6C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequestBody'
            example:
              name: Guillaume
              price: 0.9022704311753039
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBookResponseBody'
              example:
                book:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: true
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Et accusamus repellat.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/book/remove/{id}:
    delete:
      tags:
      - book
      summary: deleteBook book
      description: Delete one item by ID
      operationId: book#deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        required: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000708E7\U000BB83D\U00029014"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C518F\U00107C83\U0008CE64"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBookResponseBody'
              example:
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: A aut nesciunt autem alias libero dolor.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/books:
    get:
      tags:
      - book
      summary: getAllBooks book
      description: Get All items
      operationId: book#getAllBooks
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllBooksResponseBody'
              example:
                books:
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  name: Guillaume
                  price: 69
                success: false
        "401":
          description: Unauthorized response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
              example: Nihil iure rerum ut doloremque sapiente.
        "500":
          description: Internal Server Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
              example:
                err: sql no rows affected
                error_code: TX_UPDATE_ITEM
                success: true
components:
  schemas:
    AuthProvidersRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firebase_id_token:
          type: string
          example: 65l
          minLength: 5
        firebase_provider:
          type: string
          example: Facebook
        firebase_uid:
          type: string
          example: lwe
          minLength: 5
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
      example:
        email: guillaume@epitech.eu
        firebase_id_token: 2uc
        firebase_provider: Facebook
        firebase_uid: ndn
        firstname: Guillaume
        lastname: Morin
      required:
      - email
      - firstname
      - lastname
      - firebase_id_token
      - firebase_uid
      - firebase_provider
    BookResponse:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        name:
          type: string
          example: Guillaume
        price:
          type: number
          example: 69
          format: double
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        name: Guillaume
        price: 69
      required:
      - id
      - name
      - price
    DeleteBookResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: false
      required:
      - success
    EmailAlreadyExist:
      type: object
      properties:
        message:
          type: string
          example: Similique molestias enim.
        success:
          type: boolean
          default: false
          example: true
      description: When email already exist
      example:
        message: Voluptatum minima adipisci.
        success: false
      required:
      - message
      - success
    GetAllBooksResponseBody:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
          description: Result is an array of object
          example:
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
          - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            name: Guillaume
            price: 69
        success:
          type: boolean
          example: false
      example:
        books:
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        - id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - books
      - success
    GetBookResponseBody:
      type: object
      properties:
        id:
          type: string
          example: Esse eos et reiciendis enim.
        name:
          type: string
          example: Velit ea voluptatem.
        price:
          type: number
          example: 0.6347471387800683
          format: double
        success:
          type: boolean
          example: true
      example:
        id: Perferendis tenetur.
        name: Ut modi.
        price: 0.9470005515621835
        success: false
      required:
      - id
      - name
      - price
      - success
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: Reiciendis itaque quos illum similique aut sequi.
        client_secret:
          type: string
          example: A maiores maxime.
        grant_type:
          type: string
          example: Aspernatur accusamus.
      example:
        client_id: Maiores debitis incidunt at.
        client_secret: Corporis laborum commodi enim quia.
        grant_type: Est laudantium.
      required:
      - client_id
      - client_secret
      - grant_type
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Culpa doloribus.
        expires_in:
          type: integer
          example: 8821600341866436857
          format: int64
        success:
          type: boolean
          example: false
        token_type:
          type: string
          example: Saepe eos commodi.
      example:
        access_token: Odio mollitia.
        expires_in: 5598219820078611128
        success: true
        token_type: Officia voluptatem quisquam et.
      required:
      - access_token
      - token_type
      - expires_in
      - success
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: true
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: true
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
      example:
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        birthday:
          type: string
          default: ""
          example: Laborum numquam.
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 15
        lastname:
          type: string
          example: Morin
          minLength: 3
        password:
          type: string
          description: Minimum 8 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 8
        phone:
          type: string
          default: ""
          example: +262 692 12 34 56
      description: Use client ID and client secret to oAuth
      example:
        birthday: Dolorum neque repellat velit cupiditate quis delectus.
        email: guillaume@epitech.eu
        firstname: Guillaume
        lastname: Morin
        password: JeSuisUnTest974
        phone: +262 692 12 34 56
      required:
      - firstname
      - lastname
      - password
      - email
    Unauthorized:
      type: string
      description: Credentials are invalid
      example: Id ut molestiae molestias iusto.
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: sql no rows affected
        error_code:
          type: string
          example: TX_UPDATE_ITEM
        success:
          type: boolean
          default: false
          example: true
      description: Error not identified (500)
      example:
        err: sql no rows affected
        error_code: TX_UPDATE_ITEM
        success: true
      required:
      - err
      - success
      - error_code
    UpdateBookRequestBody:
      type: object
      properties:
        name:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 10
        price:
          type: number
          example: 69
          minimum: 0.1
      example:
        name: Guillaume
        price: 69
      required:
      - name
      - price
    UpdateBookResponseBody:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookResponse'
        success:
          type: boolean
          example: true
      example:
        book:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          name: Guillaume
          price: 69
        success: true
      required:
      - book
      - success
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        clientCredentials:
          tokenUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
    jwt_header_jwtToken:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: book
  description: The principe of CRUD API with GET, PUT, POST, DELETE with Table Book
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: oAuth
  description: Oauth to authentificate
