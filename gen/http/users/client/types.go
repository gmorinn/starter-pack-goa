// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	users "starter-pack-goa/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// UpdateDescriptionRequestBody is the type of the "users" service
// "updateDescription" endpoint HTTP request body.
type UpdateDescriptionRequestBody struct {
	ID        string  `form:"id" json:"id" xml:"id"`
	Email     string  `form:"email" json:"email" xml:"email"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateAvatarRequestBody is the type of the "users" service "updateAvatar"
// endpoint HTTP request body.
type UpdateAvatarRequestBody struct {
	ID string `form:"id" json:"id" xml:"id"`
	// Url of the avatar and stock in db
	Avatar string `form:"avatar" json:"avatar" xml:"avatar"`
}

// DeleteUserResponseBody is the type of the "users" service "deleteUser"
// endpoint HTTP response body.
type DeleteUserResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetUserByIDResponseBody is the type of the "users" service "getUserByID"
// endpoint HTTP response body.
type GetUserByIDResponseBody struct {
	// Result is an object
	User    *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateDescriptionResponseBody is the type of the "users" service
// "updateDescription" endpoint HTTP response body.
type UpdateDescriptionResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Result is an Object
	User *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UpdateAvatarResponseBody is the type of the "users" service "updateAvatar"
// endpoint HTTP response body.
type UpdateAvatarResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Result is an Object
	User *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// DeleteUserUnknownErrorResponseBody is the type of the "users" service
// "deleteUser" endpoint HTTP response body for the "unknown_error" error.
type DeleteUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetUserByIDUnknownErrorResponseBody is the type of the "users" service
// "getUserByID" endpoint HTTP response body for the "unknown_error" error.
type GetUserByIDUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateDescriptionUnknownErrorResponseBody is the type of the "users" service
// "updateDescription" endpoint HTTP response body for the "unknown_error"
// error.
type UpdateDescriptionUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateAvatarUnknownErrorResponseBody is the type of the "users" service
// "updateAvatar" endpoint HTTP response body for the "unknown_error" error.
type UpdateAvatarUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// ResUserResponseBody is used to define fields on response body types.
type ResUserResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User is admin or not
	Role   *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
}

// NewUpdateDescriptionRequestBody builds the HTTP request body from the
// payload of the "updateDescription" endpoint of the "users" service.
func NewUpdateDescriptionRequestBody(p *users.UpdateDescriptionPayload) *UpdateDescriptionRequestBody {
	body := &UpdateDescriptionRequestBody{
		ID:        p.ID,
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
	}
	return body
}

// NewUpdateAvatarRequestBody builds the HTTP request body from the payload of
// the "updateAvatar" endpoint of the "users" service.
func NewUpdateAvatarRequestBody(p *users.UpdateAvatarPayload) *UpdateAvatarRequestBody {
	body := &UpdateAvatarRequestBody{
		ID:     p.ID,
		Avatar: p.Avatar,
	}
	return body
}

// NewDeleteUserResultOK builds a "users" service "deleteUser" endpoint result
// from a HTTP "OK" response.
func NewDeleteUserResultOK(body *DeleteUserResponseBody) *users.DeleteUserResult {
	v := &users.DeleteUserResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteUserUnknownError builds a users service deleteUser endpoint
// unknown_error error.
func NewDeleteUserUnknownError(body *DeleteUserUnknownErrorResponseBody) *users.UnknownError {
	v := &users.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewGetUserByIDResultOK builds a "users" service "getUserByID" endpoint
// result from a HTTP "OK" response.
func NewGetUserByIDResultOK(body *GetUserByIDResponseBody) *users.GetUserByIDResult {
	v := &users.GetUserByIDResult{
		Success: *body.Success,
	}
	v.User = unmarshalResUserResponseBodyToUsersResUser(body.User)

	return v
}

// NewGetUserByIDUnknownError builds a users service getUserByID endpoint
// unknown_error error.
func NewGetUserByIDUnknownError(body *GetUserByIDUnknownErrorResponseBody) *users.UnknownError {
	v := &users.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewUpdateDescriptionResultOK builds a "users" service "updateDescription"
// endpoint result from a HTTP "OK" response.
func NewUpdateDescriptionResultOK(body *UpdateDescriptionResponseBody) *users.UpdateDescriptionResult {
	v := &users.UpdateDescriptionResult{
		Success: *body.Success,
	}
	if body.User != nil {
		v.User = unmarshalResUserResponseBodyToUsersResUser(body.User)
	}

	return v
}

// NewUpdateDescriptionUnknownError builds a users service updateDescription
// endpoint unknown_error error.
func NewUpdateDescriptionUnknownError(body *UpdateDescriptionUnknownErrorResponseBody) *users.UnknownError {
	v := &users.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewUpdateAvatarResultOK builds a "users" service "updateAvatar" endpoint
// result from a HTTP "OK" response.
func NewUpdateAvatarResultOK(body *UpdateAvatarResponseBody) *users.UpdateAvatarResult {
	v := &users.UpdateAvatarResult{
		Success: *body.Success,
	}
	if body.User != nil {
		v.User = unmarshalResUserResponseBodyToUsersResUser(body.User)
	}

	return v
}

// NewUpdateAvatarUnknownError builds a users service updateAvatar endpoint
// unknown_error error.
func NewUpdateAvatarUnknownError(body *UpdateAvatarUnknownErrorResponseBody) *users.UnknownError {
	v := &users.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// ValidateDeleteUserResponseBody runs the validations defined on
// DeleteUserResponseBody
func ValidateDeleteUserResponseBody(body *DeleteUserResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateGetUserByIDResponseBody runs the validations defined on
// GetUserByIDResponseBody
func ValidateGetUserByIDResponseBody(body *GetUserByIDResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateDescriptionResponseBody runs the validations defined on
// UpdateDescriptionResponseBody
func ValidateUpdateDescriptionResponseBody(body *UpdateDescriptionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateAvatarResponseBody runs the validations defined on
// UpdateAvatarResponseBody
func ValidateUpdateAvatarResponseBody(body *UpdateAvatarResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDeleteUserUnknownErrorResponseBody runs the validations defined on
// deleteUser_unknown_error_response_body
func ValidateDeleteUserUnknownErrorResponseBody(body *DeleteUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateGetUserByIDUnknownErrorResponseBody runs the validations defined on
// getUserByID_unknown_error_response_body
func ValidateGetUserByIDUnknownErrorResponseBody(body *GetUserByIDUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateUpdateDescriptionUnknownErrorResponseBody runs the validations
// defined on updateDescription_unknown_error_response_body
func ValidateUpdateDescriptionUnknownErrorResponseBody(body *UpdateDescriptionUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateUpdateAvatarUnknownErrorResponseBody runs the validations defined on
// updateAvatar_unknown_error_response_body
func ValidateUpdateAvatarUnknownErrorResponseBody(body *UpdateAvatarUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateResUserResponseBody runs the validations defined on
// resUserResponseBody
func ValidateResUserResponseBody(body *ResUserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Avatar == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("avatar", "body"))
	}
	return
}
