// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen api_crud/design

package client

import (
	users "api_crud/gen/users"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetAllusersRequest instantiates a HTTP request object with method and
// path set to call the "users" service "getAllusers" endpoint
func (c *Client) BuildGetAllusersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllusersUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "getAllusers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAllusersRequest returns an encoder for requests sent to the users
// getAllusers server.
func EncodeGetAllusersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.GetAllusersPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "getAllusers", "*users.GetAllusersPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetAllusersResponse returns a decoder for responses returned by the
// users getAllusers endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetAllusersResponse may return the following errors:
//	- "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAllusersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllusersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getAllusers", err)
			}
			err = ValidateGetAllusersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getAllusers", err)
			}
			res := NewGetAllusersResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetAllusersUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getAllusers", err)
			}
			err = ValidateGetAllusersUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getAllusers", err)
			}
			return nil, NewGetAllusersUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "getAllusers", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "deleteUser" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "deleteUser", "*users.DeleteUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "deleteUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUserRequest returns an encoder for requests sent to the users
// deleteUser server.
func EncodeDeleteUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "deleteUser", "*users.DeleteUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// users deleteUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//	- "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			err = ValidateDeleteUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "deleteUser", err)
			}
			res := NewDeleteUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			err = ValidateDeleteUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "deleteUser", err)
			}
			return nil, NewDeleteUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "deleteUser", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "createUser" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "createUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the users
// createUser server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "createUser", "*users.CreateUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "createUser", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// users createUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//	- "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			err = ValidateCreateUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "createUser", err)
			}
			res := NewCreateUserResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body CreateUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			err = ValidateCreateUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "createUser", err)
			}
			return nil, NewCreateUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "createUser", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "updateUser" endpoint
func (c *Client) BuildUpdateUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.UpdateUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "updateUser", "*users.UpdateUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUserUsersPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "updateUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateUserRequest returns an encoder for requests sent to the users
// updateUser server.
func EncodeUpdateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "updateUser", "*users.UpdateUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewUpdateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "updateUser", err)
		}
		return nil
	}
}

// DecodeUpdateUserResponse returns a decoder for responses returned by the
// users updateUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateUserResponse may return the following errors:
//	- "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateUser", err)
			}
			err = ValidateUpdateUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateUser", err)
			}
			res := NewUpdateUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdateUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateUser", err)
			}
			err = ValidateUpdateUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateUser", err)
			}
			return nil, NewUpdateUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "updateUser", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserRequest instantiates a HTTP request object with method and path
// set to call the "users" service "getUser" endpoint
func (c *Client) BuildGetUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.GetUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "getUser", "*users.GetUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "getUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserRequest returns an encoder for requests sent to the users
// getUser server.
func EncodeGetUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.GetUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "getUser", "*users.GetUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetUserResponse returns a decoder for responses returned by the users
// getUser endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetUserResponse may return the following errors:
//	- "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			err = ValidateGetUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getUser", err)
			}
			res := NewGetUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			err = ValidateGetUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getUser", err)
			}
			return nil, NewGetUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "getUser", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResUserResponseBodyToUsersResUser builds a value of type
// *users.ResUser from a value of type *ResUserResponseBody.
func unmarshalResUserResponseBodyToUsersResUser(v *ResUserResponseBody) *users.ResUser {
	res := &users.ResUser{
		ID:        *v.ID,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Email:     *v.Email,
	}
	if v.Birthday != nil {
		res.Birthday = *v.Birthday
	}
	if v.Phone != nil {
		res.Phone = *v.Phone
	}
	if v.Birthday == nil {
		res.Birthday = ""
	}
	if v.Phone == nil {
		res.Phone = ""
	}

	return res
}

// marshalUsersPayloadUserToPayloadUserRequestBody builds a value of type
// *PayloadUserRequestBody from a value of type *users.PayloadUser.
func marshalUsersPayloadUserToPayloadUserRequestBody(v *users.PayloadUser) *PayloadUserRequestBody {
	res := &PayloadUserRequestBody{
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Email:     v.Email,
		Birthday:  v.Birthday,
		Phone:     v.Phone,
	}
	{
		var zero string
		if res.Birthday == zero {
			res.Birthday = ""
		}
	}
	{
		var zero string
		if res.Phone == zero {
			res.Phone = ""
		}
	}

	return res
}

// marshalPayloadUserRequestBodyToUsersPayloadUser builds a value of type
// *users.PayloadUser from a value of type *PayloadUserRequestBody.
func marshalPayloadUserRequestBodyToUsersPayloadUser(v *PayloadUserRequestBody) *users.PayloadUser {
	res := &users.PayloadUser{
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Email:     v.Email,
		Birthday:  v.Birthday,
		Phone:     v.Phone,
	}
	{
		var zero string
		if res.Birthday == zero {
			res.Birthday = ""
		}
	}
	{
		var zero string
		if res.Phone == zero {
			res.Phone = ""
		}
	}

	return res
}
