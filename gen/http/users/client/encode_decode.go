// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	users "starter-pack-goa/gen/users"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "deleteUser" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "deleteUser", "*users.DeleteUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "deleteUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUserRequest returns an encoder for requests sent to the users
// deleteUser server.
func EncodeDeleteUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "deleteUser", "*users.DeleteUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// users deleteUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//   - "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//   - error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			err = ValidateDeleteUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "deleteUser", err)
			}
			res := NewDeleteUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			err = ValidateDeleteUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "deleteUser", err)
			}
			return nil, NewDeleteUserUnknownError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "deleteUser", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserByIDRequest instantiates a HTTP request object with method and
// path set to call the "users" service "getUserByID" endpoint
func (c *Client) BuildGetUserByIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*users.GetUserByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "getUserByID", "*users.GetUserByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserByIDUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "getUserByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserByIDRequest returns an encoder for requests sent to the users
// getUserByID server.
func EncodeGetUserByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.GetUserByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "getUserByID", "*users.GetUserByIDPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetUserByIDResponse returns a decoder for responses returned by the
// users getUserByID endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetUserByIDResponse may return the following errors:
//   - "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetUserByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUserByID", err)
			}
			err = ValidateGetUserByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getUserByID", err)
			}
			res := NewGetUserByIDResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetUserByIDUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUserByID", err)
			}
			err = ValidateGetUserByIDUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getUserByID", err)
			}
			return nil, NewGetUserByIDUnknownError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "getUserByID", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateDescriptionRequest instantiates a HTTP request object with method
// and path set to call the "users" service "updateDescription" endpoint
func (c *Client) BuildUpdateDescriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDescriptionUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "updateDescription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDescriptionRequest returns an encoder for requests sent to the
// users updateDescription server.
func EncodeUpdateDescriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateDescriptionPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "updateDescription", "*users.UpdateDescriptionPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewUpdateDescriptionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "updateDescription", err)
		}
		return nil
	}
}

// DecodeUpdateDescriptionResponse returns a decoder for responses returned by
// the users updateDescription endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateDescriptionResponse may return the following errors:
//   - "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//   - error: internal error
func DecodeUpdateDescriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateDescriptionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateDescription", err)
			}
			err = ValidateUpdateDescriptionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateDescription", err)
			}
			res := NewUpdateDescriptionResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdateDescriptionUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateDescription", err)
			}
			err = ValidateUpdateDescriptionUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateDescription", err)
			}
			return nil, NewUpdateDescriptionUnknownError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "updateDescription", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateAvatarRequest instantiates a HTTP request object with method and
// path set to call the "users" service "updateAvatar" endpoint
func (c *Client) BuildUpdateAvatarRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateAvatarUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "updateAvatar", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateAvatarRequest returns an encoder for requests sent to the users
// updateAvatar server.
func EncodeUpdateAvatarRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateAvatarPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "updateAvatar", "*users.UpdateAvatarPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewUpdateAvatarRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "updateAvatar", err)
		}
		return nil
	}
}

// DecodeUpdateAvatarResponse returns a decoder for responses returned by the
// users updateAvatar endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateAvatarResponse may return the following errors:
//   - "unknown_error" (type *users.UnknownError): http.StatusInternalServerError
//   - error: internal error
func DecodeUpdateAvatarResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateAvatarResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateAvatar", err)
			}
			err = ValidateUpdateAvatarResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateAvatar", err)
			}
			res := NewUpdateAvatarResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdateAvatarUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "updateAvatar", err)
			}
			err = ValidateUpdateAvatarUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "updateAvatar", err)
			}
			return nil, NewUpdateAvatarUnknownError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "updateAvatar", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResUserResponseBodyToUsersResUser builds a value of type
// *users.ResUser from a value of type *ResUserResponseBody.
func unmarshalResUserResponseBodyToUsersResUser(v *ResUserResponseBody) *users.ResUser {
	res := &users.ResUser{
		ID:        *v.ID,
		Firstname: *v.Firstname,
		Lastname:  *v.Lastname,
		Email:     *v.Email,
		Role:      v.Role,
		Avatar:    *v.Avatar,
	}

	return res
}
