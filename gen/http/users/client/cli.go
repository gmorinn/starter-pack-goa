// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package client

import (
	users "api_crud/gen/users"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetAllusersPayload builds the payload for the users getAllusers
// endpoint from CLI flags.
func BuildGetAllusersPayload(usersGetAllusersOauth string, usersGetAllusersJWTToken string) (*users.GetAllusersPayload, error) {
	var oauth *string
	{
		if usersGetAllusersOauth != "" {
			oauth = &usersGetAllusersOauth
		}
	}
	var jwtToken *string
	{
		if usersGetAllusersJWTToken != "" {
			jwtToken = &usersGetAllusersJWTToken
		}
	}
	v := &users.GetAllusersPayload{}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the users deleteUser endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserID string, usersDeleteUserOauth string, usersDeleteUserJWTToken string) (*users.DeleteUserPayload, error) {
	var err error
	var id string
	{
		id = usersDeleteUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersDeleteUserOauth != "" {
			oauth = &usersDeleteUserOauth
		}
	}
	var jwtToken *string
	{
		if usersDeleteUserJWTToken != "" {
			jwtToken = &usersDeleteUserJWTToken
		}
	}
	v := &users.DeleteUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildCreateUserPayload builds the payload for the users createUser endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string, usersCreateUserOauth string, usersCreateUserJWTToken string) (*users.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user\": {\n         \"birthday\": \"01/09/2002\",\n         \"email\": \"guillaume.morin@epitech.eu\",\n         \"firstname\": \"Guillaume\",\n         \"lastname\": \"Morin\",\n         \"phone\": \"+262 692 12 34 56\"\n      }\n   }'")
		}
		if body.User == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
		}
		if body.User != nil {
			if err2 := ValidatePayloadUserRequestBody(body.User); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersCreateUserOauth != "" {
			oauth = &usersCreateUserOauth
		}
	}
	var jwtToken *string
	{
		if usersCreateUserJWTToken != "" {
			jwtToken = &usersCreateUserJWTToken
		}
	}
	v := &users.CreateUserPayload{}
	if body.User != nil {
		v.User = marshalPayloadUserRequestBodyToUsersPayloadUser(body.User)
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the users updateUser endpoint
// from CLI flags.
func BuildUpdateUserPayload(usersUpdateUserBody string, usersUpdateUserID string, usersUpdateUserOauth string, usersUpdateUserJWTToken string) (*users.UpdateUserPayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"User\": {\n         \"birthday\": \"01/09/2002\",\n         \"email\": \"guillaume.morin@epitech.eu\",\n         \"firstname\": \"Guillaume\",\n         \"lastname\": \"Morin\",\n         \"phone\": \"+262 692 12 34 56\"\n      }\n   }'")
		}
		if body.User == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("User", "body"))
		}
		if body.User != nil {
			if err2 := ValidatePayloadUserRequestBody(body.User); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = usersUpdateUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersUpdateUserOauth != "" {
			oauth = &usersUpdateUserOauth
		}
	}
	var jwtToken *string
	{
		if usersUpdateUserJWTToken != "" {
			jwtToken = &usersUpdateUserJWTToken
		}
	}
	v := &users.UpdateUserPayload{}
	if body.User != nil {
		v.User = marshalPayloadUserRequestBodyToUsersPayloadUser(body.User)
	}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildGetUserPayload builds the payload for the users getUser endpoint from
// CLI flags.
func BuildGetUserPayload(usersGetUserID string, usersGetUserOauth string, usersGetUserJWTToken string) (*users.GetUserPayload, error) {
	var err error
	var id string
	{
		id = usersGetUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersGetUserOauth != "" {
			oauth = &usersGetUserOauth
		}
	}
	var jwtToken *string
	{
		if usersGetUserJWTToken != "" {
			jwtToken = &usersGetUserJWTToken
		}
	}
	v := &users.GetUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
