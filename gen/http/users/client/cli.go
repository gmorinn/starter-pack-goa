// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	"encoding/json"
	"fmt"
	users "starter-pack-goa/gen/users"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildDeleteUserPayload builds the payload for the users deleteUser endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserID string, usersDeleteUserOauth string, usersDeleteUserJWTToken string) (*users.DeleteUserPayload, error) {
	var err error
	var id string
	{
		id = usersDeleteUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersDeleteUserOauth != "" {
			oauth = &usersDeleteUserOauth
		}
	}
	var jwtToken *string
	{
		if usersDeleteUserJWTToken != "" {
			jwtToken = &usersDeleteUserJWTToken
		}
	}
	v := &users.DeleteUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildGetUserByIDPayload builds the payload for the users getUserByID
// endpoint from CLI flags.
func BuildGetUserByIDPayload(usersGetUserByIDID string, usersGetUserByIDOauth string, usersGetUserByIDJWTToken string) (*users.GetUserByIDPayload, error) {
	var err error
	var id string
	{
		id = usersGetUserByIDID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersGetUserByIDOauth != "" {
			oauth = &usersGetUserByIDOauth
		}
	}
	var jwtToken *string
	{
		if usersGetUserByIDJWTToken != "" {
			jwtToken = &usersGetUserByIDJWTToken
		}
	}
	v := &users.GetUserByIDPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateDescriptionPayload builds the payload for the users
// updateDescription endpoint from CLI flags.
func BuildUpdateDescriptionPayload(usersUpdateDescriptionBody string, usersUpdateDescriptionOauth string, usersUpdateDescriptionJWTToken string) (*users.UpdateDescriptionPayload, error) {
	var err error
	var body UpdateDescriptionRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateDescriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"guillaume@gmail.com\",\n      \"firstname\": \"Guillaume\",\n      \"id\": \"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\",\n      \"lastname\": \"Morin\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if body.Firstname != nil {
			if utf8.RuneCountInString(*body.Firstname) < 2 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 2, true))
			}
		}
		if body.Firstname != nil {
			if utf8.RuneCountInString(*body.Firstname) > 20 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 20, false))
			}
		}
		if body.Lastname != nil {
			if utf8.RuneCountInString(*body.Lastname) < 2 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 2, true))
			}
		}
		if body.Lastname != nil {
			if utf8.RuneCountInString(*body.Lastname) > 20 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 20, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersUpdateDescriptionOauth != "" {
			oauth = &usersUpdateDescriptionOauth
		}
	}
	var jwtToken *string
	{
		if usersUpdateDescriptionJWTToken != "" {
			jwtToken = &usersUpdateDescriptionJWTToken
		}
	}
	v := &users.UpdateDescriptionPayload{
		ID:        body.ID,
		Email:     body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateAvatarPayload builds the payload for the users updateAvatar
// endpoint from CLI flags.
func BuildUpdateAvatarPayload(usersUpdateAvatarBody string, usersUpdateAvatarOauth string, usersUpdateAvatarJWTToken string) (*users.UpdateAvatarPayload, error) {
	var err error
	var body UpdateAvatarRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateAvatarBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"avatar\": \"Eos sit voluptatum doloribus fugit aut fuga.\",\n      \"id\": \"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if usersUpdateAvatarOauth != "" {
			oauth = &usersUpdateAvatarOauth
		}
	}
	var jwtToken *string
	{
		if usersUpdateAvatarJWTToken != "" {
			jwtToken = &usersUpdateAvatarJWTToken
		}
	}
	v := &users.UpdateAvatarPayload{
		ID:     body.ID,
		Avatar: body.Avatar,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
