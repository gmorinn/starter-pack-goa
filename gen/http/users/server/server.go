// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP server
//
// Command:
// $ goa gen starter-pack-goa/design

package server

import (
	"context"
	"net/http"
	"regexp"
	users "starter-pack-goa/gen/users"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the users service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	DeleteUser        http.Handler
	GetUserByID       http.Handler
	UpdateDescription http.Handler
	UpdateAvatar      http.Handler
	CORS              http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the users service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *users.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"DeleteUser", "DELETE", "/v1/web/user/remove/{id}"},
			{"GetUserByID", "GET", "/v1/web/user/{id}"},
			{"UpdateDescription", "PUT", "/v1/web/user/edit/description"},
			{"UpdateAvatar", "PUT", "/v1/web/user/edit/avatar"},
			{"CORS", "OPTIONS", "/v1/web/user/remove/{id}"},
			{"CORS", "OPTIONS", "/v1/web/user/{id}"},
			{"CORS", "OPTIONS", "/v1/web/user/edit/description"},
			{"CORS", "OPTIONS", "/v1/web/user/edit/avatar"},
		},
		DeleteUser:        NewDeleteUserHandler(e.DeleteUser, mux, decoder, encoder, errhandler, formatter),
		GetUserByID:       NewGetUserByIDHandler(e.GetUserByID, mux, decoder, encoder, errhandler, formatter),
		UpdateDescription: NewUpdateDescriptionHandler(e.UpdateDescription, mux, decoder, encoder, errhandler, formatter),
		UpdateAvatar:      NewUpdateAvatarHandler(e.UpdateAvatar, mux, decoder, encoder, errhandler, formatter),
		CORS:              NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "users" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.DeleteUser = m(s.DeleteUser)
	s.GetUserByID = m(s.GetUserByID)
	s.UpdateDescription = m(s.UpdateDescription)
	s.UpdateAvatar = m(s.UpdateAvatar)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return users.MethodNames[:] }

// Mount configures the mux to serve the users endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountDeleteUserHandler(mux, h.DeleteUser)
	MountGetUserByIDHandler(mux, h.GetUserByID)
	MountUpdateDescriptionHandler(mux, h.UpdateDescription)
	MountUpdateAvatarHandler(mux, h.UpdateAvatar)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the users endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountDeleteUserHandler configures the mux to serve the "users" service
// "deleteUser" endpoint.
func MountDeleteUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUsersOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/v1/web/user/remove/{id}", f)
}

// NewDeleteUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "users" service "deleteUser" endpoint.
func NewDeleteUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteUserRequest(mux, decoder)
		encodeResponse = EncodeDeleteUserResponse(encoder)
		encodeError    = EncodeDeleteUserError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserByIDHandler configures the mux to serve the "users" service
// "getUserByID" endpoint.
func MountGetUserByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUsersOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/web/user/{id}", f)
}

// NewGetUserByIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "users" service "getUserByID" endpoint.
func NewGetUserByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetUserByIDRequest(mux, decoder)
		encodeResponse = EncodeGetUserByIDResponse(encoder)
		encodeError    = EncodeGetUserByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUserByID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateDescriptionHandler configures the mux to serve the "users"
// service "updateDescription" endpoint.
func MountUpdateDescriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUsersOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/web/user/edit/description", f)
}

// NewUpdateDescriptionHandler creates a HTTP handler which loads the HTTP
// request and calls the "users" service "updateDescription" endpoint.
func NewUpdateDescriptionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateDescriptionRequest(mux, decoder)
		encodeResponse = EncodeUpdateDescriptionResponse(encoder)
		encodeError    = EncodeUpdateDescriptionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateDescription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateAvatarHandler configures the mux to serve the "users" service
// "updateAvatar" endpoint.
func MountUpdateAvatarHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleUsersOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/web/user/edit/avatar", f)
}

// NewUpdateAvatarHandler creates a HTTP handler which loads the HTTP request
// and calls the "users" service "updateAvatar" endpoint.
func NewUpdateAvatarHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateAvatarRequest(mux, decoder)
		encodeResponse = EncodeUpdateAvatarResponse(encoder)
		encodeError    = EncodeUpdateAvatarError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateAvatar")
		ctx = context.WithValue(ctx, goa.ServiceKey, "users")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service users.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleUsersOrigin(h)
	mux.Handle("OPTIONS", "/v1/web/user/remove/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/web/user/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/web/user/edit/description", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/web/user/edit/avatar", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleUsersOrigin applies the CORS response headers corresponding to the
// origin for the service users.
func HandleUsersOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "Content-Type, Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type, jwtToken, Origin")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
