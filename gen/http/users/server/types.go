// Code generated by goa v3.5.2, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	users "api_crud/gen/users"
)

// GetUserResponseBody is the type of the "users" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Result is an object
	User    *ResUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// GetUserUnknownErrorResponseBody is the type of the "users" service "getUser"
// endpoint HTTP response body for the "unknown_error" error.
type GetUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResUserResponseBody is used to define fields on response body types.
type ResUserResponseBody struct {
	ID        string  `form:"id" json:"id" xml:"id"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     string  `form:"email" json:"email" xml:"email"`
	Birthday  string  `form:"birthday" json:"birthday" xml:"birthday"`
	Phone     string  `form:"phone" json:"phone" xml:"phone"`
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "users" service.
func NewGetUserResponseBody(res *users.GetUserResult) *GetUserResponseBody {
	body := &GetUserResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalUsersResUserToResUserResponseBody(res.User)
	}
	return body
}

// NewGetUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "getUser" endpoint of the "users" service.
func NewGetUserUnknownErrorResponseBody(res *users.UnknownError) *GetUserUnknownErrorResponseBody {
	body := &GetUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetUserPayload builds a users service getUser endpoint payload.
func NewGetUserPayload(id string, oauth *string, jwtToken *string) *users.GetUserPayload {
	v := &users.GetUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}
