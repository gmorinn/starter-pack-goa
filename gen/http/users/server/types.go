// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen starter-pack-goa/design

package server

import (
	users "starter-pack-goa/gen/users"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UpdateDescriptionRequestBody is the type of the "users" service
// "updateDescription" endpoint HTTP request body.
type UpdateDescriptionRequestBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateAvatarRequestBody is the type of the "users" service "updateAvatar"
// endpoint HTTP request body.
type UpdateAvatarRequestBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Url of the avatar and stock in db
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
}

// DeleteUserResponseBody is the type of the "users" service "deleteUser"
// endpoint HTTP response body.
type DeleteUserResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// GetUserByIDResponseBody is the type of the "users" service "getUserByID"
// endpoint HTTP response body.
type GetUserByIDResponseBody struct {
	// Result is an object
	User    *ResUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// UpdateDescriptionResponseBody is the type of the "users" service
// "updateDescription" endpoint HTTP response body.
type UpdateDescriptionResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
	// Result is an Object
	User *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UpdateAvatarResponseBody is the type of the "users" service "updateAvatar"
// endpoint HTTP response body.
type UpdateAvatarResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
	// Result is an Object
	User *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// DeleteUserUnknownErrorResponseBody is the type of the "users" service
// "deleteUser" endpoint HTTP response body for the "unknown_error" error.
type DeleteUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetUserByIDUnknownErrorResponseBody is the type of the "users" service
// "getUserByID" endpoint HTTP response body for the "unknown_error" error.
type GetUserByIDUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateDescriptionUnknownErrorResponseBody is the type of the "users" service
// "updateDescription" endpoint HTTP response body for the "unknown_error"
// error.
type UpdateDescriptionUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateAvatarUnknownErrorResponseBody is the type of the "users" service
// "updateAvatar" endpoint HTTP response body for the "unknown_error" error.
type UpdateAvatarUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResUserResponseBody is used to define fields on response body types.
type ResUserResponseBody struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	Lastname  string `form:"lastname" json:"lastname" xml:"lastname"`
	Email     string `form:"email" json:"email" xml:"email"`
	// User is admin or not
	Role   *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	Avatar string  `form:"avatar" json:"avatar" xml:"avatar"`
}

// NewDeleteUserResponseBody builds the HTTP response body from the result of
// the "deleteUser" endpoint of the "users" service.
func NewDeleteUserResponseBody(res *users.DeleteUserResult) *DeleteUserResponseBody {
	body := &DeleteUserResponseBody{
		Success: res.Success,
	}
	return body
}

// NewGetUserByIDResponseBody builds the HTTP response body from the result of
// the "getUserByID" endpoint of the "users" service.
func NewGetUserByIDResponseBody(res *users.GetUserByIDResult) *GetUserByIDResponseBody {
	body := &GetUserByIDResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalUsersResUserToResUserResponseBody(res.User)
	}
	return body
}

// NewUpdateDescriptionResponseBody builds the HTTP response body from the
// result of the "updateDescription" endpoint of the "users" service.
func NewUpdateDescriptionResponseBody(res *users.UpdateDescriptionResult) *UpdateDescriptionResponseBody {
	body := &UpdateDescriptionResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalUsersResUserToResUserResponseBody(res.User)
	}
	return body
}

// NewUpdateAvatarResponseBody builds the HTTP response body from the result of
// the "updateAvatar" endpoint of the "users" service.
func NewUpdateAvatarResponseBody(res *users.UpdateAvatarResult) *UpdateAvatarResponseBody {
	body := &UpdateAvatarResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalUsersResUserToResUserResponseBody(res.User)
	}
	return body
}

// NewDeleteUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "deleteUser" endpoint of the "users" service.
func NewDeleteUserUnknownErrorResponseBody(res *users.UnknownError) *DeleteUserUnknownErrorResponseBody {
	body := &DeleteUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetUserByIDUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getUserByID" endpoint of the "users" service.
func NewGetUserByIDUnknownErrorResponseBody(res *users.UnknownError) *GetUserByIDUnknownErrorResponseBody {
	body := &GetUserByIDUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateDescriptionUnknownErrorResponseBody builds the HTTP response body
// from the result of the "updateDescription" endpoint of the "users" service.
func NewUpdateDescriptionUnknownErrorResponseBody(res *users.UnknownError) *UpdateDescriptionUnknownErrorResponseBody {
	body := &UpdateDescriptionUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateAvatarUnknownErrorResponseBody builds the HTTP response body from
// the result of the "updateAvatar" endpoint of the "users" service.
func NewUpdateAvatarUnknownErrorResponseBody(res *users.UnknownError) *UpdateAvatarUnknownErrorResponseBody {
	body := &UpdateAvatarUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteUserPayload builds a users service deleteUser endpoint payload.
func NewDeleteUserPayload(id string, oauth *string, jwtToken *string) *users.DeleteUserPayload {
	v := &users.DeleteUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetUserByIDPayload builds a users service getUserByID endpoint payload.
func NewGetUserByIDPayload(id string, oauth *string, jwtToken *string) *users.GetUserByIDPayload {
	v := &users.GetUserByIDPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewUpdateDescriptionPayload builds a users service updateDescription
// endpoint payload.
func NewUpdateDescriptionPayload(body *UpdateDescriptionRequestBody, oauth *string, jwtToken *string) *users.UpdateDescriptionPayload {
	v := &users.UpdateDescriptionPayload{
		ID:        *body.ID,
		Email:     *body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewUpdateAvatarPayload builds a users service updateAvatar endpoint payload.
func NewUpdateAvatarPayload(body *UpdateAvatarRequestBody, oauth *string, jwtToken *string) *users.UpdateAvatarPayload {
	v := &users.UpdateAvatarPayload{
		ID:     *body.ID,
		Avatar: *body.Avatar,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateUpdateDescriptionRequestBody runs the validations defined on
// UpdateDescriptionRequestBody
func ValidateUpdateDescriptionRequestBody(body *UpdateDescriptionRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 2, true))
		}
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 20, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 2, true))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 20, false))
		}
	}
	return
}

// ValidateUpdateAvatarRequestBody runs the validations defined on
// UpdateAvatarRequestBody
func ValidateUpdateAvatarRequestBody(body *UpdateAvatarRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Avatar == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("avatar", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
