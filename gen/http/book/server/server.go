// Code generated by goa v3.5.2, DO NOT EDIT.
//
// book HTTP server
//
// Command:
// $ goa gen api_crud/design

package server

import (
	book "api_crud/gen/book"
	"context"
	"net/http"
	"regexp"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the book service endpoint HTTP handlers.
type Server struct {
	Mounts      []*MountPoint
	GetBook     http.Handler
	UpdateBook  http.Handler
	GetAllBooks http.Handler
	DeleteBook  http.Handler
	CreateBook  http.Handler
	CORS        http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the book service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *book.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetBook", "GET", "/web/book/{id}"},
			{"UpdateBook", "PUT", "/web/book/{id}"},
			{"GetAllBooks", "GET", "/web/books"},
			{"DeleteBook", "DELETE", "/web/book/remove/{id}"},
			{"CreateBook", "POST", "/web/book/add"},
			{"CORS", "OPTIONS", "/web/book/{id}"},
			{"CORS", "OPTIONS", "/web/books"},
			{"CORS", "OPTIONS", "/web/book/remove/{id}"},
			{"CORS", "OPTIONS", "/web/book/add"},
		},
		GetBook:     NewGetBookHandler(e.GetBook, mux, decoder, encoder, errhandler, formatter),
		UpdateBook:  NewUpdateBookHandler(e.UpdateBook, mux, decoder, encoder, errhandler, formatter),
		GetAllBooks: NewGetAllBooksHandler(e.GetAllBooks, mux, decoder, encoder, errhandler, formatter),
		DeleteBook:  NewDeleteBookHandler(e.DeleteBook, mux, decoder, encoder, errhandler, formatter),
		CreateBook:  NewCreateBookHandler(e.CreateBook, mux, decoder, encoder, errhandler, formatter),
		CORS:        NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "book" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetBook = m(s.GetBook)
	s.UpdateBook = m(s.UpdateBook)
	s.GetAllBooks = m(s.GetAllBooks)
	s.DeleteBook = m(s.DeleteBook)
	s.CreateBook = m(s.CreateBook)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the book endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetBookHandler(mux, h.GetBook)
	MountUpdateBookHandler(mux, h.UpdateBook)
	MountGetAllBooksHandler(mux, h.GetAllBooks)
	MountDeleteBookHandler(mux, h.DeleteBook)
	MountCreateBookHandler(mux, h.CreateBook)
	MountCORSHandler(mux, h.CORS)
}

// MountGetBookHandler configures the mux to serve the "book" service "getBook"
// endpoint.
func MountGetBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBookOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/web/book/{id}", f)
}

// NewGetBookHandler creates a HTTP handler which loads the HTTP request and
// calls the "book" service "getBook" endpoint.
func NewGetBookHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetBookRequest(mux, decoder)
		encodeResponse = EncodeGetBookResponse(encoder)
		encodeError    = EncodeGetBookError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getBook")
		ctx = context.WithValue(ctx, goa.ServiceKey, "book")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateBookHandler configures the mux to serve the "book" service
// "updateBook" endpoint.
func MountUpdateBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBookOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/web/book/{id}", f)
}

// NewUpdateBookHandler creates a HTTP handler which loads the HTTP request and
// calls the "book" service "updateBook" endpoint.
func NewUpdateBookHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateBookRequest(mux, decoder)
		encodeResponse = EncodeUpdateBookResponse(encoder)
		encodeError    = EncodeUpdateBookError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateBook")
		ctx = context.WithValue(ctx, goa.ServiceKey, "book")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAllBooksHandler configures the mux to serve the "book" service
// "getAllBooks" endpoint.
func MountGetAllBooksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBookOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/web/books", f)
}

// NewGetAllBooksHandler creates a HTTP handler which loads the HTTP request
// and calls the "book" service "getAllBooks" endpoint.
func NewGetAllBooksHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetAllBooksResponse(encoder)
		encodeError    = EncodeGetAllBooksError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAllBooks")
		ctx = context.WithValue(ctx, goa.ServiceKey, "book")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteBookHandler configures the mux to serve the "book" service
// "deleteBook" endpoint.
func MountDeleteBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBookOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/web/book/remove/{id}", f)
}

// NewDeleteBookHandler creates a HTTP handler which loads the HTTP request and
// calls the "book" service "deleteBook" endpoint.
func NewDeleteBookHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteBookRequest(mux, decoder)
		encodeResponse = EncodeDeleteBookResponse(encoder)
		encodeError    = EncodeDeleteBookError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteBook")
		ctx = context.WithValue(ctx, goa.ServiceKey, "book")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateBookHandler configures the mux to serve the "book" service
// "createBook" endpoint.
func MountCreateBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBookOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/web/book/add", f)
}

// NewCreateBookHandler creates a HTTP handler which loads the HTTP request and
// calls the "book" service "createBook" endpoint.
func NewCreateBookHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateBookRequest(mux, decoder)
		encodeResponse = EncodeCreateBookResponse(encoder)
		encodeError    = EncodeCreateBookError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createBook")
		ctx = context.WithValue(ctx, goa.ServiceKey, "book")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service book.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleBookOrigin(h)
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("OPTIONS", "/web/book/{id}", f)
	mux.Handle("OPTIONS", "/web/books", f)
	mux.Handle("OPTIONS", "/web/book/remove/{id}", f)
	mux.Handle("OPTIONS", "/web/book/add", f)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleBookOrigin applies the CORS response headers corresponding to the
// origin for the service book.
func HandleBookOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	origHndlr := h.(http.HandlerFunc)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			origHndlr(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type, jwtToken")
			}
			origHndlr(w, r)
			return
		}
		origHndlr(w, r)
		return
	})
}
