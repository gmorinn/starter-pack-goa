// Code generated by goa v3.5.2, DO NOT EDIT.
//
// book HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package client

import (
	book "api_crud/gen/book"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetBookPayload builds the payload for the book getBook endpoint from
// CLI flags.
func BuildGetBookPayload(bookGetBookID string, bookGetBookOauth string, bookGetBookJWTToken string) (*book.GetBookPayload, error) {
	var err error
	var id string
	{
		id = bookGetBookID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth string
	{
		oauth = bookGetBookOauth
	}
	var jwtToken string
	{
		jwtToken = bookGetBookJWTToken
	}
	v := &book.GetBookPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateBookPayload builds the payload for the book updateBook endpoint
// from CLI flags.
func BuildUpdateBookPayload(bookUpdateBookBody string, bookUpdateBookID string, bookUpdateBookOauth string, bookUpdateBookJWTToken string) (*book.UpdateBookPayload, error) {
	var err error
	var body UpdateBookRequestBody
	{
		err = json.Unmarshal([]byte(bookUpdateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Guillaume\",\n      \"price\": 69\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 3, true))
		}
		if utf8.RuneCountInString(body.Name) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 10, false))
		}
		if body.Price < 0.1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 0.1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = bookUpdateBookID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth string
	{
		oauth = bookUpdateBookOauth
	}
	var jwtToken string
	{
		jwtToken = bookUpdateBookJWTToken
	}
	v := &book.UpdateBookPayload{
		Name:  body.Name,
		Price: body.Price,
	}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildDeleteBookPayload builds the payload for the book deleteBook endpoint
// from CLI flags.
func BuildDeleteBookPayload(bookDeleteBookID string, bookDeleteBookOauth string, bookDeleteBookJWTToken string) (*book.DeleteBookPayload, error) {
	var err error
	var id string
	{
		id = bookDeleteBookID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth string
	{
		oauth = bookDeleteBookOauth
	}
	var jwtToken string
	{
		jwtToken = bookDeleteBookJWTToken
	}
	v := &book.DeleteBookPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildCreateBookPayload builds the payload for the book createBook endpoint
// from CLI flags.
func BuildCreateBookPayload(bookCreateBookBody string, bookCreateBookOauth string, bookCreateBookJWTToken string) (*book.CreateBookPayload, error) {
	var err error
	var body CreateBookRequestBody
	{
		err = json.Unmarshal([]byte(bookCreateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Guillaume\",\n      \"price\": 0.45708415863110397\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 3, true))
		}
		if utf8.RuneCountInString(body.Name) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 10, false))
		}
		if body.Price < 0.1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 0.1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth string
	{
		oauth = bookCreateBookOauth
	}
	var jwtToken string
	{
		jwtToken = bookCreateBookJWTToken
	}
	v := &book.CreateBookPayload{
		Name:  body.Name,
		Price: body.Price,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
