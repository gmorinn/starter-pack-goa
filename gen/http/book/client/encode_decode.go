// Code generated by goa v3.5.2, DO NOT EDIT.
//
// book HTTP client encoders and decoders
//
// Command:
// $ goa gen api_crud/design

package client

import (
	book "api_crud/gen/book"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetBookRequest instantiates a HTTP request object with method and path
// set to call the "book" service "getBook" endpoint
func (c *Client) BuildGetBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*book.GetBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("book", "getBook", "*book.GetBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBookBookPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("book", "getBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBookRequest returns an encoder for requests sent to the book
// getBook server.
func EncodeGetBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*book.GetBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("book", "getBook", "*book.GetBookPayload", v)
		}
		if p.OauthToken != nil {
			head := *p.OauthToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetBookResponse returns a decoder for responses returned by the book
// getBook endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetBookResponse may return the following errors:
//	- "id_doesnt_exist" (type *book.IDDoesntExist): http.StatusInternalServerError
//	- "unknown_error" (type *book.UnknownError): http.StatusInternalServerError
//	- "unauthorized" (type book.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeGetBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "getBook", err)
			}
			err = ValidateGetBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("book", "getBook", err)
			}
			res := NewGetBookResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "id_doesnt_exist":
				var (
					body GetBookIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "getBook", err)
				}
				err = ValidateGetBookIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "getBook", err)
				}
				return nil, NewGetBookIDDoesntExist(&body)
			case "unknown_error":
				var (
					body GetBookUnknownErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "getBook", err)
				}
				err = ValidateGetBookUnknownErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "getBook", err)
				}
				return nil, NewGetBookUnknownError(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("book", "getBook", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body GetBookUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "getBook", err)
			}
			return nil, NewGetBookUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("book", "getBook", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBookRequest instantiates a HTTP request object with method and
// path set to call the "book" service "updateBook" endpoint
func (c *Client) BuildUpdateBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*book.UpdateBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("book", "updateBook", "*book.UpdateBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBookBookPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("book", "updateBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBookRequest returns an encoder for requests sent to the book
// updateBook server.
func EncodeUpdateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*book.UpdateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("book", "updateBook", "*book.UpdateBookPayload", v)
		}
		body := NewUpdateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("book", "updateBook", err)
		}
		return nil
	}
}

// DecodeUpdateBookResponse returns a decoder for responses returned by the
// book updateBook endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateBookResponse may return the following errors:
//	- "id_doesnt_exist" (type *book.IDDoesntExist): http.StatusInternalServerError
//	- "unknown_error" (type *book.UnknownError): http.StatusInternalServerError
//	- "unauthorized" (type book.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeUpdateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "updateBook", err)
			}
			err = ValidateUpdateBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("book", "updateBook", err)
			}
			res := NewUpdateBookResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "id_doesnt_exist":
				var (
					body UpdateBookIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "updateBook", err)
				}
				err = ValidateUpdateBookIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "updateBook", err)
				}
				return nil, NewUpdateBookIDDoesntExist(&body)
			case "unknown_error":
				var (
					body UpdateBookUnknownErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "updateBook", err)
				}
				err = ValidateUpdateBookUnknownErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "updateBook", err)
				}
				return nil, NewUpdateBookUnknownError(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("book", "updateBook", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body UpdateBookUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "updateBook", err)
			}
			return nil, NewUpdateBookUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("book", "updateBook", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAllBooksRequest instantiates a HTTP request object with method and
// path set to call the "book" service "getAllBooks" endpoint
func (c *Client) BuildGetAllBooksRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllBooksBookPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("book", "getAllBooks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAllBooksResponse returns a decoder for responses returned by the
// book getAllBooks endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetAllBooksResponse may return the following errors:
//	- "id_doesnt_exist" (type *book.IDDoesntExist): http.StatusInternalServerError
//	- "unknown_error" (type *book.UnknownError): http.StatusInternalServerError
//	- "unauthorized" (type book.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeGetAllBooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllBooksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "getAllBooks", err)
			}
			err = ValidateGetAllBooksResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("book", "getAllBooks", err)
			}
			res := NewGetAllBooksResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "id_doesnt_exist":
				var (
					body GetAllBooksIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "getAllBooks", err)
				}
				err = ValidateGetAllBooksIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "getAllBooks", err)
				}
				return nil, NewGetAllBooksIDDoesntExist(&body)
			case "unknown_error":
				var (
					body GetAllBooksUnknownErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "getAllBooks", err)
				}
				err = ValidateGetAllBooksUnknownErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "getAllBooks", err)
				}
				return nil, NewGetAllBooksUnknownError(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("book", "getAllBooks", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body GetAllBooksUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "getAllBooks", err)
			}
			return nil, NewGetAllBooksUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("book", "getAllBooks", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBookRequest instantiates a HTTP request object with method and
// path set to call the "book" service "deleteBook" endpoint
func (c *Client) BuildDeleteBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*book.DeleteBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("book", "deleteBook", "*book.DeleteBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBookBookPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("book", "deleteBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteBookResponse returns a decoder for responses returned by the
// book deleteBook endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteBookResponse may return the following errors:
//	- "id_doesnt_exist" (type *book.IDDoesntExist): http.StatusInternalServerError
//	- "unknown_error" (type *book.UnknownError): http.StatusInternalServerError
//	- "unauthorized" (type book.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeDeleteBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "deleteBook", err)
			}
			err = ValidateDeleteBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("book", "deleteBook", err)
			}
			res := NewDeleteBookResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "id_doesnt_exist":
				var (
					body DeleteBookIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "deleteBook", err)
				}
				err = ValidateDeleteBookIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "deleteBook", err)
				}
				return nil, NewDeleteBookIDDoesntExist(&body)
			case "unknown_error":
				var (
					body DeleteBookUnknownErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "deleteBook", err)
				}
				err = ValidateDeleteBookUnknownErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "deleteBook", err)
				}
				return nil, NewDeleteBookUnknownError(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("book", "deleteBook", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body DeleteBookUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "deleteBook", err)
			}
			return nil, NewDeleteBookUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("book", "deleteBook", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookRequest instantiates a HTTP request object with method and
// path set to call the "book" service "createBook" endpoint
func (c *Client) BuildCreateBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookBookPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("book", "createBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookRequest returns an encoder for requests sent to the book
// createBook server.
func EncodeCreateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*book.CreateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("book", "createBook", "*book.CreateBookPayload", v)
		}
		body := NewCreateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("book", "createBook", err)
		}
		return nil
	}
}

// DecodeCreateBookResponse returns a decoder for responses returned by the
// book createBook endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateBookResponse may return the following errors:
//	- "id_doesnt_exist" (type *book.IDDoesntExist): http.StatusInternalServerError
//	- "unknown_error" (type *book.UnknownError): http.StatusInternalServerError
//	- "unauthorized" (type book.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeCreateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "createBook", err)
			}
			err = ValidateCreateBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("book", "createBook", err)
			}
			res := NewCreateBookResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			en := resp.Header.Get("goa-error")
			switch en {
			case "id_doesnt_exist":
				var (
					body CreateBookIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "createBook", err)
				}
				err = ValidateCreateBookIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "createBook", err)
				}
				return nil, NewCreateBookIDDoesntExist(&body)
			case "unknown_error":
				var (
					body CreateBookUnknownErrorResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("book", "createBook", err)
				}
				err = ValidateCreateBookUnknownErrorResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("book", "createBook", err)
				}
				return nil, NewCreateBookUnknownError(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("book", "createBook", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body CreateBookUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("book", "createBook", err)
			}
			return nil, NewCreateBookUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("book", "createBook", resp.StatusCode, string(body))
		}
	}
}

// unmarshalBookResponseResponseBodyToBookBookResponse builds a value of type
// *book.BookResponse from a value of type *BookResponseResponseBody.
func unmarshalBookResponseResponseBodyToBookBookResponse(v *BookResponseResponseBody) *book.BookResponse {
	res := &book.BookResponse{
		ID:    *v.ID,
		Name:  *v.Name,
		Price: *v.Price,
	}

	return res
}
