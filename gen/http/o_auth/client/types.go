// Code generated by goa v3.5.2, DO NOT EDIT.
//
// oAuth HTTP client types
//
// Command:
// $ goa gen api_crud/design

package client

import (
	oauth "api_crud/gen/o_auth"

	goa "goa.design/goa/v3/pkg"
)

// OAuthFoundResponseBody is the type of the "oAuth" service "oAuth" endpoint
// HTTP response body.
type OAuthFoundResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthUnknownErrorResponseBody is the type of the "oAuth" service "oAuth"
// endpoint HTTP response body for the "unknown_error" error.
type OAuthUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthInvalidScopesResponseBody is the type of the "oAuth" service "oAuth"
// endpoint HTTP response body for the "invalid_scopes" error.
type OAuthInvalidScopesResponseBody string

// OAuthUnauthorizedResponseBody is the type of the "oAuth" service "oAuth"
// endpoint HTTP response body for the "unauthorized" error.
type OAuthUnauthorizedResponseBody string

// OAuthBadRequestResponseBody is used to define fields on response body types.
type OAuthBadRequestResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// NewOAuthResponseFound builds a "oAuth" service "oAuth" endpoint result from
// a HTTP "Found" response.
func NewOAuthResponseFound(body *OAuthFoundResponseBody) *oauth.OAuthResponse {
	v := &oauth.OAuthResponse{
		AccessToken: body.AccessToken,
		TokenType:   body.TokenType,
		ExpiresIn:   body.ExpiresIn,
		Success:     body.Success,
	}

	return v
}

// NewOAuthUnknownError builds a oAuth service oAuth endpoint unknown_error
// error.
func NewOAuthUnknownError(body *OAuthUnknownErrorResponseBody) *oauth.UnknownError {
	v := &oauth.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewOAuthInvalidScopes builds a oAuth service oAuth endpoint invalid_scopes
// error.
func NewOAuthInvalidScopes(body OAuthInvalidScopesResponseBody) oauth.InvalidScopes {
	v := oauth.InvalidScopes(body)

	return v
}

// NewOAuthUnauthorized builds a oAuth service oAuth endpoint unauthorized
// error.
func NewOAuthUnauthorized(body OAuthUnauthorizedResponseBody) oauth.Unauthorized {
	v := oauth.Unauthorized(body)

	return v
}

// ValidateOAuthUnknownErrorResponseBody runs the validations defined on
// oAuth_unknown_error_response_body
func ValidateOAuthUnknownErrorResponseBody(body *OAuthUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}
