// Code generated by goa v3.10.2, DO NOT EDIT.
//
// oAuth HTTP client types
//
// Command:
// $ goa gen starter-pack-goa/design

package client

import (
	oauth "starter-pack-goa/gen/o_auth"

	goa "goa.design/goa/v3/pkg"
)

// OAuthRequestBody is the type of the "oAuth" service "oAuth" endpoint HTTP
// request body.
type OAuthRequestBody struct {
	ClientID     string `form:"client_id" json:"client_id" xml:"client_id"`
	ClientSecret string `form:"client_secret" json:"client_secret" xml:"client_secret"`
	GrantType    string `form:"grant_type" json:"grant_type" xml:"grant_type"`
}

// OAuthCreatedResponseBody is the type of the "oAuth" service "oAuth" endpoint
// HTTP response body.
type OAuthCreatedResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthUnknownErrorResponseBody is the type of the "oAuth" service "oAuth"
// endpoint HTTP response body for the "unknown_error" error.
type OAuthUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthBadRequestResponseBody is used to define fields on response body types.
type OAuthBadRequestResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// NewOAuthRequestBody builds the HTTP request body from the payload of the
// "oAuth" endpoint of the "oAuth" service.
func NewOAuthRequestBody(p *oauth.OauthPayload) *OAuthRequestBody {
	body := &OAuthRequestBody{
		ClientID:     p.ClientID,
		ClientSecret: p.ClientSecret,
		GrantType:    p.GrantType,
	}
	return body
}

// NewOAuthResponseCreated builds a "oAuth" service "oAuth" endpoint result
// from a HTTP "Created" response.
func NewOAuthResponseCreated(body *OAuthCreatedResponseBody) *oauth.OAuthResponse {
	v := &oauth.OAuthResponse{
		AccessToken: *body.AccessToken,
		TokenType:   *body.TokenType,
		ExpiresIn:   *body.ExpiresIn,
		Success:     *body.Success,
	}

	return v
}

// NewOAuthUnknownError builds a oAuth service oAuth endpoint unknown_error
// error.
func NewOAuthUnknownError(body *OAuthUnknownErrorResponseBody) *oauth.UnknownError {
	v := &oauth.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewOAuthInvalidScopes builds a oAuth service oAuth endpoint invalid_scopes
// error.
func NewOAuthInvalidScopes(body string) oauth.InvalidScopes {
	v := oauth.InvalidScopes(body)

	return v
}

// NewOAuthOauthError builds a oAuth service oAuth endpoint oauth_error error.
func NewOAuthOauthError(body string) oauth.OauthError {
	v := oauth.OauthError(body)

	return v
}

// NewOAuthUnauthorized builds a oAuth service oAuth endpoint unauthorized
// error.
func NewOAuthUnauthorized(body string) oauth.Unauthorized {
	v := oauth.Unauthorized(body)

	return v
}

// ValidateOAuthCreatedResponseBody runs the validations defined on
// OAuthCreatedResponseBody
func ValidateOAuthCreatedResponseBody(body *OAuthCreatedResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateOAuthUnknownErrorResponseBody runs the validations defined on
// oAuth_unknown_error_response_body
func ValidateOAuthUnknownErrorResponseBody(body *OAuthUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateOAuthBadRequestResponseBody runs the validations defined on OAuthBad
// RequestResponseBody
func ValidateOAuthBadRequestResponseBody(body *OAuthBadRequestResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.TokenType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token_type", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}
