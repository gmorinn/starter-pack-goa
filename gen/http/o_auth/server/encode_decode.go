// Code generated by goa v3.5.2, DO NOT EDIT.
//
// oAuth HTTP server encoders and decoders
//
// Command:
// $ goa gen api_crud/design

package server

import (
	oauth "api_crud/gen/o_auth"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeOAuthResponse returns an encoder for responses returned by the oAuth
// oAuth endpoint.
func EncodeOAuthResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*oauth.OAuthResponse)
		enc := encoder(ctx, w)
		body := NewOAuthFoundResponseBody(res)
		w.WriteHeader(http.StatusFound)
		return enc.Encode(body)
	}
}

// DecodeOAuthRequest returns a decoder for requests sent to the oAuth oAuth
// endpoint.
func DecodeOAuthRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			clientID     string
			clientSecret string
			grantType    string
			err          error
		)
		clientID = r.Header.Get("client_id")
		if clientID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "header"))
		}
		clientSecret = r.Header.Get("client_secret")
		if clientSecret == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("client_secret", "header"))
		}
		grantType = r.Header.Get("grant_type")
		if grantType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("grant_type", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewOAuthOauthPayload(clientID, clientSecret, grantType)

		return payload, nil
	}
}

// EncodeOAuthError returns an encoder for errors returned by the oAuth oAuth
// endpoint.
func EncodeOAuthError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			res := v.(*oauth.UnknownError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOAuthUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "invalid_scopes":
			res := v.(oauth.InvalidScopes)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOAuthInvalidScopesResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(oauth.Unauthorized)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewOAuthUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
