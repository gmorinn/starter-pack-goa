// Code generated by goa v3.5.2, DO NOT EDIT.
//
// crud HTTP client types
//
// Command:
// $ goa gen api_crud/design

package client

import (
	crud "api_crud/gen/crud"

	goa "goa.design/goa/v3/pkg"
)

// CreateBookRequestBody is the type of the "crud" service "createBook"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// GetBookResponseBody is the type of the "crud" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	ID    *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// GetAllBooksResponseBody is the type of the "crud" service "getAllBooks"
// endpoint HTTP response body.
type GetAllBooksResponseBody []*BookResponseResponse

// CreateBookResponseBody is the type of the "crud" service "createBook"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	ID    *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// GetBookCannotConvertStringToUUIDResponseBody is the type of the "crud"
// service "getBook" endpoint HTTP response body for the
// "cannot_convert_string_to_uuid" error.
type GetBookCannotConvertStringToUUIDResponseBody struct {
	// Returning error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Wrong Id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetBookIDDoesntExistResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "id_doesnt_exist" error.
type GetBookIDDoesntExistResponseBody struct {
	// Returning error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Wrong Id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// BookResponseResponse is used to define fields on response body types.
type BookResponseResponse struct {
	ID    *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "createBook" endpoint of the "crud" service.
func NewCreateBookRequestBody(p *crud.CreateBookPayload) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Name:  p.Name,
		Price: p.Price,
	}
	return body
}

// NewGetBookBookResponseOK builds a "crud" service "getBook" endpoint result
// from a HTTP "OK" response.
func NewGetBookBookResponseOK(body *GetBookResponseBody) *crud.BookResponse {
	v := &crud.BookResponse{
		ID:    body.ID,
		Name:  body.Name,
		Price: body.Price,
	}

	return v
}

// NewGetBookCannotConvertStringToUUID builds a crud service getBook endpoint
// cannot_convert_string_to_uuid error.
func NewGetBookCannotConvertStringToUUID(body *GetBookCannotConvertStringToUUIDResponseBody) *crud.CannotConvertStringToUUID {
	v := &crud.CannotConvertStringToUUID{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewGetBookIDDoesntExist builds a crud service getBook endpoint
// id_doesnt_exist error.
func NewGetBookIDDoesntExist(body *GetBookIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// NewGetAllBooksBookResponseOK builds a "crud" service "getAllBooks" endpoint
// result from a HTTP "OK" response.
func NewGetAllBooksBookResponseOK(body []*BookResponseResponse) []*crud.BookResponse {
	v := make([]*crud.BookResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseResponseToCrudBookResponse(val)
	}

	return v
}

// NewCreateBookBookResponseCreated builds a "crud" service "createBook"
// endpoint result from a HTTP "Created" response.
func NewCreateBookBookResponseCreated(body *CreateBookResponseBody) *crud.BookResponse {
	v := &crud.BookResponse{
		ID:    body.ID,
		Name:  body.Name,
		Price: body.Price,
	}

	return v
}

// ValidateGetBookCannotConvertStringToUUIDResponseBody runs the validations
// defined on getBook_cannot_convert_string_to_uuid_response_body
func ValidateGetBookCannotConvertStringToUUIDResponseBody(body *GetBookCannotConvertStringToUUIDResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateGetBookIDDoesntExistResponseBody runs the validations defined on
// getBook_id_doesnt_exist_response_body
func ValidateGetBookIDDoesntExistResponseBody(body *GetBookIDDoesntExistResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
