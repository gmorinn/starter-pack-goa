// Code generated by goa v3.5.2, DO NOT EDIT.
//
// crud HTTP client types
//
// Command:
// $ goa gen api_crud/design

package client

import (
	crud "api_crud/gen/crud"

	goa "goa.design/goa/v3/pkg"
)

// UpdateBookRequestBody is the type of the "crud" service "updateBook"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	Name  string  `form:"name" json:"name" xml:"name"`
	Price float64 `form:"price" json:"price" xml:"price"`
}

// CreateBookRequestBody is the type of the "crud" service "createBook"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Name  string  `form:"name" json:"name" xml:"name"`
	Price float64 `form:"price" json:"price" xml:"price"`
}

// OAuthRequestBody is the type of the "crud" service "oAuth" endpoint HTTP
// request body.
type OAuthRequestBody struct {
	GrantType    string `form:"grant_type" json:"grant_type" xml:"grant_type"`
	ClientID     string `form:"client_id" json:"client_id" xml:"client_id"`
	ClientSecret string `form:"client_secret" json:"client_secret" xml:"client_secret"`
}

// GetBookResponseBody is the type of the "crud" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	ID      *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name    *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price   *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Success *bool    `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateBookResponseBody is the type of the "crud" service "updateBook"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	ID      *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name    *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price   *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Success *bool    `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetAllBooksResponseBody is the type of the "crud" service "getAllBooks"
// endpoint HTTP response body.
type GetAllBooksResponseBody struct {
	Books   []*BookResponseResponseBody `form:"books,omitempty" json:"books,omitempty" xml:"books,omitempty"`
	Success *bool                       `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBookResponseBody is the type of the "crud" service "deleteBook"
// endpoint HTTP response body.
type DeleteBookResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateBookResponseBody is the type of the "crud" service "createBook"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	Book    *BookResponseResponseBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
	Success *bool                     `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthResponseBody is the type of the "crud" service "oAuth" endpoint HTTP
// response body.
type OAuthResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBookIDDoesntExistResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "id_doesnt_exist" error.
type GetBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBookUnknownErrorResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "unknown_error" error.
type GetBookUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBookInvalidScopesResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "invalid_scopes" error.
type GetBookInvalidScopesResponseBody string

// GetBookUnauthorizedResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "unauthorized" error.
type GetBookUnauthorizedResponseBody string

// UpdateBookIDDoesntExistResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type UpdateBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateBookUnknownErrorResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "unknown_error" error.
type UpdateBookUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateBookInvalidScopesResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "invalid_scopes" error.
type UpdateBookInvalidScopesResponseBody string

// UpdateBookUnauthorizedResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "unauthorized" error.
type UpdateBookUnauthorizedResponseBody string

// GetAllBooksIDDoesntExistResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "id_doesnt_exist" error.
type GetAllBooksIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetAllBooksUnknownErrorResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "unknown_error" error.
type GetAllBooksUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetAllBooksInvalidScopesResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "invalid_scopes" error.
type GetAllBooksInvalidScopesResponseBody string

// GetAllBooksUnauthorizedResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "unauthorized" error.
type GetAllBooksUnauthorizedResponseBody string

// DeleteBookIDDoesntExistResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type DeleteBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBookUnknownErrorResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "unknown_error" error.
type DeleteBookUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBookInvalidScopesResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "invalid_scopes" error.
type DeleteBookInvalidScopesResponseBody string

// DeleteBookUnauthorizedResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "unauthorized" error.
type DeleteBookUnauthorizedResponseBody string

// CreateBookIDDoesntExistResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type CreateBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateBookUnknownErrorResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "unknown_error" error.
type CreateBookUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateBookInvalidScopesResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "invalid_scopes" error.
type CreateBookInvalidScopesResponseBody string

// CreateBookUnauthorizedResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "unauthorized" error.
type CreateBookUnauthorizedResponseBody string

// OAuthIDDoesntExistResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "id_doesnt_exist" error.
type OAuthIDDoesntExistResponseBody struct {
	// Returning error
	Err     *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ID      *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Success *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthUnknownErrorResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "unknown_error" error.
type OAuthUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// OAuthInvalidScopesResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "invalid_scopes" error.
type OAuthInvalidScopesResponseBody string

// OAuthUnauthorizedResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "unauthorized" error.
type OAuthUnauthorizedResponseBody string

// BookResponseResponseBody is used to define fields on response body types.
type BookResponseResponseBody struct {
	ID    *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "updateBook" endpoint of the "crud" service.
func NewUpdateBookRequestBody(p *crud.UpdateBookPayload) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{
		Name:  p.Name,
		Price: p.Price,
	}
	return body
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "createBook" endpoint of the "crud" service.
func NewCreateBookRequestBody(p *crud.CreateBookPayload) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Name:  p.Name,
		Price: p.Price,
	}
	return body
}

// NewOAuthRequestBody builds the HTTP request body from the payload of the
// "oAuth" endpoint of the "crud" service.
func NewOAuthRequestBody(p *crud.OAuthPayload) *OAuthRequestBody {
	body := &OAuthRequestBody{
		GrantType:    p.GrantType,
		ClientID:     p.ClientID,
		ClientSecret: p.ClientSecret,
	}
	return body
}

// NewGetBookResultOK builds a "crud" service "getBook" endpoint result from a
// HTTP "OK" response.
func NewGetBookResultOK(body *GetBookResponseBody) *crud.GetBookResult {
	v := &crud.GetBookResult{
		ID:      *body.ID,
		Name:    *body.Name,
		Price:   *body.Price,
		Success: *body.Success,
	}

	return v
}

// NewGetBookIDDoesntExist builds a crud service getBook endpoint
// id_doesnt_exist error.
func NewGetBookIDDoesntExist(body *GetBookIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewGetBookUnknownError builds a crud service getBook endpoint unknown_error
// error.
func NewGetBookUnknownError(body *GetBookUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewGetBookInvalidScopes builds a crud service getBook endpoint
// invalid_scopes error.
func NewGetBookInvalidScopes(body GetBookInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewGetBookUnauthorized builds a crud service getBook endpoint unauthorized
// error.
func NewGetBookUnauthorized(body GetBookUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// NewUpdateBookResultOK builds a "crud" service "updateBook" endpoint result
// from a HTTP "OK" response.
func NewUpdateBookResultOK(body *UpdateBookResponseBody) *crud.UpdateBookResult {
	v := &crud.UpdateBookResult{
		ID:      *body.ID,
		Name:    *body.Name,
		Price:   *body.Price,
		Success: *body.Success,
	}

	return v
}

// NewUpdateBookIDDoesntExist builds a crud service updateBook endpoint
// id_doesnt_exist error.
func NewUpdateBookIDDoesntExist(body *UpdateBookIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewUpdateBookUnknownError builds a crud service updateBook endpoint
// unknown_error error.
func NewUpdateBookUnknownError(body *UpdateBookUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewUpdateBookInvalidScopes builds a crud service updateBook endpoint
// invalid_scopes error.
func NewUpdateBookInvalidScopes(body UpdateBookInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewUpdateBookUnauthorized builds a crud service updateBook endpoint
// unauthorized error.
func NewUpdateBookUnauthorized(body UpdateBookUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// NewGetAllBooksResultOK builds a "crud" service "getAllBooks" endpoint result
// from a HTTP "OK" response.
func NewGetAllBooksResultOK(body *GetAllBooksResponseBody) *crud.GetAllBooksResult {
	v := &crud.GetAllBooksResult{
		Success: *body.Success,
	}
	v.Books = make([]*crud.BookResponse, len(body.Books))
	for i, val := range body.Books {
		v.Books[i] = unmarshalBookResponseResponseBodyToCrudBookResponse(val)
	}

	return v
}

// NewGetAllBooksIDDoesntExist builds a crud service getAllBooks endpoint
// id_doesnt_exist error.
func NewGetAllBooksIDDoesntExist(body *GetAllBooksIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewGetAllBooksUnknownError builds a crud service getAllBooks endpoint
// unknown_error error.
func NewGetAllBooksUnknownError(body *GetAllBooksUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewGetAllBooksInvalidScopes builds a crud service getAllBooks endpoint
// invalid_scopes error.
func NewGetAllBooksInvalidScopes(body GetAllBooksInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewGetAllBooksUnauthorized builds a crud service getAllBooks endpoint
// unauthorized error.
func NewGetAllBooksUnauthorized(body GetAllBooksUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// NewDeleteBookResultOK builds a "crud" service "deleteBook" endpoint result
// from a HTTP "OK" response.
func NewDeleteBookResultOK(body *DeleteBookResponseBody) *crud.DeleteBookResult {
	v := &crud.DeleteBookResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteBookIDDoesntExist builds a crud service deleteBook endpoint
// id_doesnt_exist error.
func NewDeleteBookIDDoesntExist(body *DeleteBookIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewDeleteBookUnknownError builds a crud service deleteBook endpoint
// unknown_error error.
func NewDeleteBookUnknownError(body *DeleteBookUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewDeleteBookInvalidScopes builds a crud service deleteBook endpoint
// invalid_scopes error.
func NewDeleteBookInvalidScopes(body DeleteBookInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewDeleteBookUnauthorized builds a crud service deleteBook endpoint
// unauthorized error.
func NewDeleteBookUnauthorized(body DeleteBookUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// NewCreateBookResultCreated builds a "crud" service "createBook" endpoint
// result from a HTTP "Created" response.
func NewCreateBookResultCreated(body *CreateBookResponseBody) *crud.CreateBookResult {
	v := &crud.CreateBookResult{
		Success: *body.Success,
	}
	v.Book = unmarshalBookResponseResponseBodyToCrudBookResponse(body.Book)

	return v
}

// NewCreateBookIDDoesntExist builds a crud service createBook endpoint
// id_doesnt_exist error.
func NewCreateBookIDDoesntExist(body *CreateBookIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewCreateBookUnknownError builds a crud service createBook endpoint
// unknown_error error.
func NewCreateBookUnknownError(body *CreateBookUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewCreateBookInvalidScopes builds a crud service createBook endpoint
// invalid_scopes error.
func NewCreateBookInvalidScopes(body CreateBookInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewCreateBookUnauthorized builds a crud service createBook endpoint
// unauthorized error.
func NewCreateBookUnauthorized(body CreateBookUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// NewOAuthResponseOK builds a "crud" service "oAuth" endpoint result from a
// HTTP "OK" response.
func NewOAuthResponseOK(body *OAuthResponseBody) *crud.OAuthResponse {
	v := &crud.OAuthResponse{
		AccessToken: body.AccessToken,
		TokenType:   body.TokenType,
		ExpiresIn:   body.ExpiresIn,
		Success:     body.Success,
	}

	return v
}

// NewOAuthIDDoesntExist builds a crud service oAuth endpoint id_doesnt_exist
// error.
func NewOAuthIDDoesntExist(body *OAuthIDDoesntExistResponseBody) *crud.IDDoesntExist {
	v := &crud.IDDoesntExist{
		Err:     *body.Err,
		ID:      *body.ID,
		Success: *body.Success,
	}

	return v
}

// NewOAuthUnknownError builds a crud service oAuth endpoint unknown_error
// error.
func NewOAuthUnknownError(body *OAuthUnknownErrorResponseBody) *crud.UnknownError {
	v := &crud.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewOAuthInvalidScopes builds a crud service oAuth endpoint invalid_scopes
// error.
func NewOAuthInvalidScopes(body OAuthInvalidScopesResponseBody) crud.InvalidScopes {
	v := crud.InvalidScopes(body)

	return v
}

// NewOAuthUnauthorized builds a crud service oAuth endpoint unauthorized error.
func NewOAuthUnauthorized(body OAuthUnauthorizedResponseBody) crud.Unauthorized {
	v := crud.Unauthorized(body)

	return v
}

// ValidateGetBookResponseBody runs the validations defined on
// GetBookResponseBody
func ValidateGetBookResponseBody(body *GetBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateUpdateBookResponseBody runs the validations defined on
// UpdateBookResponseBody
func ValidateUpdateBookResponseBody(body *UpdateBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateGetAllBooksResponseBody runs the validations defined on
// GetAllBooksResponseBody
func ValidateGetAllBooksResponseBody(body *GetAllBooksResponseBody) (err error) {
	if body.Books == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("books", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	for _, e := range body.Books {
		if e != nil {
			if err2 := ValidateBookResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDeleteBookResponseBody runs the validations defined on
// DeleteBookResponseBody
func ValidateDeleteBookResponseBody(body *DeleteBookResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateCreateBookResponseBody runs the validations defined on
// CreateBookResponseBody
func ValidateCreateBookResponseBody(body *CreateBookResponseBody) (err error) {
	if body.Book == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Book != nil {
		if err2 := ValidateBookResponseResponseBody(body.Book); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetBookIDDoesntExistResponseBody runs the validations defined on
// getBook_id_doesnt_exist_response_body
func ValidateGetBookIDDoesntExistResponseBody(body *GetBookIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateGetBookUnknownErrorResponseBody runs the validations defined on
// getBook_unknown_error_response_body
func ValidateGetBookUnknownErrorResponseBody(body *GetBookUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateUpdateBookIDDoesntExistResponseBody runs the validations defined on
// updateBook_id_doesnt_exist_response_body
func ValidateUpdateBookIDDoesntExistResponseBody(body *UpdateBookIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateUpdateBookUnknownErrorResponseBody runs the validations defined on
// updateBook_unknown_error_response_body
func ValidateUpdateBookUnknownErrorResponseBody(body *UpdateBookUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateGetAllBooksIDDoesntExistResponseBody runs the validations defined on
// getAllBooks_id_doesnt_exist_response_body
func ValidateGetAllBooksIDDoesntExistResponseBody(body *GetAllBooksIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateGetAllBooksUnknownErrorResponseBody runs the validations defined on
// getAllBooks_unknown_error_response_body
func ValidateGetAllBooksUnknownErrorResponseBody(body *GetAllBooksUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateDeleteBookIDDoesntExistResponseBody runs the validations defined on
// deleteBook_id_doesnt_exist_response_body
func ValidateDeleteBookIDDoesntExistResponseBody(body *DeleteBookIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateDeleteBookUnknownErrorResponseBody runs the validations defined on
// deleteBook_unknown_error_response_body
func ValidateDeleteBookUnknownErrorResponseBody(body *DeleteBookUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateCreateBookIDDoesntExistResponseBody runs the validations defined on
// createBook_id_doesnt_exist_response_body
func ValidateCreateBookIDDoesntExistResponseBody(body *CreateBookIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateCreateBookUnknownErrorResponseBody runs the validations defined on
// createBook_unknown_error_response_body
func ValidateCreateBookUnknownErrorResponseBody(body *CreateBookUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateOAuthIDDoesntExistResponseBody runs the validations defined on
// oAuth_id_doesnt_exist_response_body
func ValidateOAuthIDDoesntExistResponseBody(body *OAuthIDDoesntExistResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateOAuthUnknownErrorResponseBody runs the validations defined on
// oAuth_unknown_error_response_body
func ValidateOAuthUnknownErrorResponseBody(body *OAuthUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateBookResponseResponseBody runs the validations defined on
// BookResponseResponseBody
func ValidateBookResponseResponseBody(body *BookResponseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
