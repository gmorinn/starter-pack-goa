// Code generated by goa v3.5.2, DO NOT EDIT.
//
// crud HTTP client encoders and decoders
//
// Command:
// $ goa gen api_crud/design

package client

import (
	crud "api_crud/gen/crud"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetBookRequest instantiates a HTTP request object with method and path
// set to call the "crud" service "getBook" endpoint
func (c *Client) BuildGetBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*crud.GetBookPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("crud", "getBook", "*crud.GetBookPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBookCrudPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("crud", "getBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetBookResponse returns a decoder for responses returned by the crud
// getBook endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetBookResponse may return the following errors:
//	- "cannot_convert_string_to_uuid" (type *crud.CannotConvertStringToUUID): http.StatusBadRequest
//	- "id_doesnt_exist" (type *crud.IDDoesntExist): http.StatusBadRequest
//	- error: internal error
func DecodeGetBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("crud", "getBook", err)
			}
			res := NewGetBookBookResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "cannot_convert_string_to_uuid":
				var (
					body GetBookCannotConvertStringToUUIDResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("crud", "getBook", err)
				}
				err = ValidateGetBookCannotConvertStringToUUIDResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("crud", "getBook", err)
				}
				return nil, NewGetBookCannotConvertStringToUUID(&body)
			case "id_doesnt_exist":
				var (
					body GetBookIDDoesntExistResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("crud", "getBook", err)
				}
				err = ValidateGetBookIDDoesntExistResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("crud", "getBook", err)
				}
				return nil, NewGetBookIDDoesntExist(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("crud", "getBook", resp.StatusCode, string(body))
			}
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("crud", "getBook", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAllBooksRequest instantiates a HTTP request object with method and
// path set to call the "crud" service "getAllBooks" endpoint
func (c *Client) BuildGetAllBooksRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllBooksCrudPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("crud", "getAllBooks", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAllBooksResponse returns a decoder for responses returned by the
// crud getAllBooks endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetAllBooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllBooksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("crud", "getAllBooks", err)
			}
			res := NewGetAllBooksBookResponseOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("crud", "getAllBooks", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBookRequest instantiates a HTTP request object with method and
// path set to call the "crud" service "deleteBook" endpoint
func (c *Client) BuildDeleteBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(string)
		if !ok {
			return nil, goahttp.ErrInvalidType("crud", "deleteBook", "string", v)
		}
		id = p
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBookCrudPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("crud", "deleteBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteBookResponse returns a decoder for responses returned by the
// crud deleteBook endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDeleteBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("crud", "deleteBook", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookRequest instantiates a HTTP request object with method and
// path set to call the "crud" service "createBook" endpoint
func (c *Client) BuildCreateBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookCrudPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("crud", "createBook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookRequest returns an encoder for requests sent to the crud
// createBook server.
func EncodeCreateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*crud.CreateBookPayload)
		if !ok {
			return goahttp.ErrInvalidType("crud", "createBook", "*crud.CreateBookPayload", v)
		}
		body := NewCreateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("crud", "createBook", err)
		}
		return nil
	}
}

// DecodeCreateBookResponse returns a decoder for responses returned by the
// crud createBook endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("crud", "createBook", err)
			}
			res := NewCreateBookBookResponseCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("crud", "createBook", resp.StatusCode, string(body))
		}
	}
}

// unmarshalBookResponseResponseToCrudBookResponse builds a value of type
// *crud.BookResponse from a value of type *BookResponseResponse.
func unmarshalBookResponseResponseToCrudBookResponse(v *BookResponseResponse) *crud.BookResponse {
	res := &crud.BookResponse{
		ID:    v.ID,
		Name:  v.Name,
		Price: v.Price,
	}

	return res
}
