// Code generated by goa v3.5.2, DO NOT EDIT.
//
// crud HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	crud "api_crud/gen/crud"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UpdateBookRequestBody is the type of the "crud" service "updateBook"
// endpoint HTTP request body.
type UpdateBookRequestBody struct {
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// CreateBookRequestBody is the type of the "crud" service "createBook"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Name  *string  `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// OAuthRequestBody is the type of the "crud" service "oAuth" endpoint HTTP
// request body.
type OAuthRequestBody struct {
	GrantType    *string `form:"grant_type,omitempty" json:"grant_type,omitempty" xml:"grant_type,omitempty"`
	ClientID     *string `form:"client_id,omitempty" json:"client_id,omitempty" xml:"client_id,omitempty"`
	ClientSecret *string `form:"client_secret,omitempty" json:"client_secret,omitempty" xml:"client_secret,omitempty"`
}

// GetBookResponseBody is the type of the "crud" service "getBook" endpoint
// HTTP response body.
type GetBookResponseBody struct {
	ID      string  `form:"id" json:"id" xml:"id"`
	Name    string  `form:"name" json:"name" xml:"name"`
	Price   float64 `form:"price" json:"price" xml:"price"`
	Success bool    `form:"success" json:"success" xml:"success"`
}

// UpdateBookResponseBody is the type of the "crud" service "updateBook"
// endpoint HTTP response body.
type UpdateBookResponseBody struct {
	ID      string  `form:"id" json:"id" xml:"id"`
	Name    string  `form:"name" json:"name" xml:"name"`
	Price   float64 `form:"price" json:"price" xml:"price"`
	Success bool    `form:"success" json:"success" xml:"success"`
}

// GetAllBooksResponseBody is the type of the "crud" service "getAllBooks"
// endpoint HTTP response body.
type GetAllBooksResponseBody struct {
	Books   []*BookResponseResponseBody `form:"books" json:"books" xml:"books"`
	Success bool                        `form:"success" json:"success" xml:"success"`
}

// DeleteBookResponseBody is the type of the "crud" service "deleteBook"
// endpoint HTTP response body.
type DeleteBookResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// CreateBookResponseBody is the type of the "crud" service "createBook"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	Book    *BookResponseResponseBody `form:"book" json:"book" xml:"book"`
	Success bool                      `form:"success" json:"success" xml:"success"`
}

// OAuthResponseBody is the type of the "crud" service "oAuth" endpoint HTTP
// response body.
type OAuthResponseBody struct {
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	TokenType   *string `form:"token_type,omitempty" json:"token_type,omitempty" xml:"token_type,omitempty"`
	ExpiresIn   *int64  `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	Success     *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBookIDDoesntExistResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "id_doesnt_exist" error.
type GetBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// GetBookUnknownErrorResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "unknown_error" error.
type GetBookUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetBookInvalidScopesResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "invalid_scopes" error.
type GetBookInvalidScopesResponseBody string

// GetBookUnauthorizedResponseBody is the type of the "crud" service "getBook"
// endpoint HTTP response body for the "unauthorized" error.
type GetBookUnauthorizedResponseBody string

// UpdateBookIDDoesntExistResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type UpdateBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// UpdateBookUnknownErrorResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "unknown_error" error.
type UpdateBookUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateBookInvalidScopesResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "invalid_scopes" error.
type UpdateBookInvalidScopesResponseBody string

// UpdateBookUnauthorizedResponseBody is the type of the "crud" service
// "updateBook" endpoint HTTP response body for the "unauthorized" error.
type UpdateBookUnauthorizedResponseBody string

// GetAllBooksIDDoesntExistResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "id_doesnt_exist" error.
type GetAllBooksIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// GetAllBooksUnknownErrorResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "unknown_error" error.
type GetAllBooksUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetAllBooksInvalidScopesResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "invalid_scopes" error.
type GetAllBooksInvalidScopesResponseBody string

// GetAllBooksUnauthorizedResponseBody is the type of the "crud" service
// "getAllBooks" endpoint HTTP response body for the "unauthorized" error.
type GetAllBooksUnauthorizedResponseBody string

// DeleteBookIDDoesntExistResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type DeleteBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// DeleteBookUnknownErrorResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "unknown_error" error.
type DeleteBookUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteBookInvalidScopesResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "invalid_scopes" error.
type DeleteBookInvalidScopesResponseBody string

// DeleteBookUnauthorizedResponseBody is the type of the "crud" service
// "deleteBook" endpoint HTTP response body for the "unauthorized" error.
type DeleteBookUnauthorizedResponseBody string

// CreateBookIDDoesntExistResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "id_doesnt_exist" error.
type CreateBookIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// CreateBookUnknownErrorResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "unknown_error" error.
type CreateBookUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// CreateBookInvalidScopesResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "invalid_scopes" error.
type CreateBookInvalidScopesResponseBody string

// CreateBookUnauthorizedResponseBody is the type of the "crud" service
// "createBook" endpoint HTTP response body for the "unauthorized" error.
type CreateBookUnauthorizedResponseBody string

// OAuthIDDoesntExistResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "id_doesnt_exist" error.
type OAuthIDDoesntExistResponseBody struct {
	// Returning error
	Err     string `form:"err" json:"err" xml:"err"`
	ID      string `form:"id" json:"id" xml:"id"`
	Success bool   `form:"success" json:"success" xml:"success"`
}

// OAuthUnknownErrorResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "unknown_error" error.
type OAuthUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// OAuthInvalidScopesResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "invalid_scopes" error.
type OAuthInvalidScopesResponseBody string

// OAuthUnauthorizedResponseBody is the type of the "crud" service "oAuth"
// endpoint HTTP response body for the "unauthorized" error.
type OAuthUnauthorizedResponseBody string

// BookResponseResponseBody is used to define fields on response body types.
type BookResponseResponseBody struct {
	ID    string  `form:"id" json:"id" xml:"id"`
	Name  string  `form:"name" json:"name" xml:"name"`
	Price float64 `form:"price" json:"price" xml:"price"`
}

// NewGetBookResponseBody builds the HTTP response body from the result of the
// "getBook" endpoint of the "crud" service.
func NewGetBookResponseBody(res *crud.GetBookResult) *GetBookResponseBody {
	body := &GetBookResponseBody{
		ID:      res.ID,
		Name:    res.Name,
		Price:   res.Price,
		Success: res.Success,
	}
	return body
}

// NewUpdateBookResponseBody builds the HTTP response body from the result of
// the "updateBook" endpoint of the "crud" service.
func NewUpdateBookResponseBody(res *crud.UpdateBookResult) *UpdateBookResponseBody {
	body := &UpdateBookResponseBody{
		ID:      res.ID,
		Name:    res.Name,
		Price:   res.Price,
		Success: res.Success,
	}
	return body
}

// NewGetAllBooksResponseBody builds the HTTP response body from the result of
// the "getAllBooks" endpoint of the "crud" service.
func NewGetAllBooksResponseBody(res *crud.GetAllBooksResult) *GetAllBooksResponseBody {
	body := &GetAllBooksResponseBody{
		Success: res.Success,
	}
	if res.Books != nil {
		body.Books = make([]*BookResponseResponseBody, len(res.Books))
		for i, val := range res.Books {
			body.Books[i] = marshalCrudBookResponseToBookResponseResponseBody(val)
		}
	}
	return body
}

// NewDeleteBookResponseBody builds the HTTP response body from the result of
// the "deleteBook" endpoint of the "crud" service.
func NewDeleteBookResponseBody(res *crud.DeleteBookResult) *DeleteBookResponseBody {
	body := &DeleteBookResponseBody{
		Success: res.Success,
	}
	return body
}

// NewCreateBookResponseBody builds the HTTP response body from the result of
// the "createBook" endpoint of the "crud" service.
func NewCreateBookResponseBody(res *crud.CreateBookResult) *CreateBookResponseBody {
	body := &CreateBookResponseBody{
		Success: res.Success,
	}
	if res.Book != nil {
		body.Book = marshalCrudBookResponseToBookResponseResponseBody(res.Book)
	}
	return body
}

// NewOAuthResponseBody builds the HTTP response body from the result of the
// "oAuth" endpoint of the "crud" service.
func NewOAuthResponseBody(res *crud.OAuthResponse) *OAuthResponseBody {
	body := &OAuthResponseBody{
		AccessToken: res.AccessToken,
		TokenType:   res.TokenType,
		ExpiresIn:   res.ExpiresIn,
		Success:     res.Success,
	}
	return body
}

// NewGetBookIDDoesntExistResponseBody builds the HTTP response body from the
// result of the "getBook" endpoint of the "crud" service.
func NewGetBookIDDoesntExistResponseBody(res *crud.IDDoesntExist) *GetBookIDDoesntExistResponseBody {
	body := &GetBookIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewGetBookUnknownErrorResponseBody builds the HTTP response body from the
// result of the "getBook" endpoint of the "crud" service.
func NewGetBookUnknownErrorResponseBody(res *crud.UnknownError) *GetBookUnknownErrorResponseBody {
	body := &GetBookUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetBookInvalidScopesResponseBody builds the HTTP response body from the
// result of the "getBook" endpoint of the "crud" service.
func NewGetBookInvalidScopesResponseBody(res crud.InvalidScopes) GetBookInvalidScopesResponseBody {
	body := GetBookInvalidScopesResponseBody(res)
	return body
}

// NewGetBookUnauthorizedResponseBody builds the HTTP response body from the
// result of the "getBook" endpoint of the "crud" service.
func NewGetBookUnauthorizedResponseBody(res crud.Unauthorized) GetBookUnauthorizedResponseBody {
	body := GetBookUnauthorizedResponseBody(res)
	return body
}

// NewUpdateBookIDDoesntExistResponseBody builds the HTTP response body from
// the result of the "updateBook" endpoint of the "crud" service.
func NewUpdateBookIDDoesntExistResponseBody(res *crud.IDDoesntExist) *UpdateBookIDDoesntExistResponseBody {
	body := &UpdateBookIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewUpdateBookUnknownErrorResponseBody builds the HTTP response body from the
// result of the "updateBook" endpoint of the "crud" service.
func NewUpdateBookUnknownErrorResponseBody(res *crud.UnknownError) *UpdateBookUnknownErrorResponseBody {
	body := &UpdateBookUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateBookInvalidScopesResponseBody builds the HTTP response body from
// the result of the "updateBook" endpoint of the "crud" service.
func NewUpdateBookInvalidScopesResponseBody(res crud.InvalidScopes) UpdateBookInvalidScopesResponseBody {
	body := UpdateBookInvalidScopesResponseBody(res)
	return body
}

// NewUpdateBookUnauthorizedResponseBody builds the HTTP response body from the
// result of the "updateBook" endpoint of the "crud" service.
func NewUpdateBookUnauthorizedResponseBody(res crud.Unauthorized) UpdateBookUnauthorizedResponseBody {
	body := UpdateBookUnauthorizedResponseBody(res)
	return body
}

// NewGetAllBooksIDDoesntExistResponseBody builds the HTTP response body from
// the result of the "getAllBooks" endpoint of the "crud" service.
func NewGetAllBooksIDDoesntExistResponseBody(res *crud.IDDoesntExist) *GetAllBooksIDDoesntExistResponseBody {
	body := &GetAllBooksIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewGetAllBooksUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getAllBooks" endpoint of the "crud" service.
func NewGetAllBooksUnknownErrorResponseBody(res *crud.UnknownError) *GetAllBooksUnknownErrorResponseBody {
	body := &GetAllBooksUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetAllBooksInvalidScopesResponseBody builds the HTTP response body from
// the result of the "getAllBooks" endpoint of the "crud" service.
func NewGetAllBooksInvalidScopesResponseBody(res crud.InvalidScopes) GetAllBooksInvalidScopesResponseBody {
	body := GetAllBooksInvalidScopesResponseBody(res)
	return body
}

// NewGetAllBooksUnauthorizedResponseBody builds the HTTP response body from
// the result of the "getAllBooks" endpoint of the "crud" service.
func NewGetAllBooksUnauthorizedResponseBody(res crud.Unauthorized) GetAllBooksUnauthorizedResponseBody {
	body := GetAllBooksUnauthorizedResponseBody(res)
	return body
}

// NewDeleteBookIDDoesntExistResponseBody builds the HTTP response body from
// the result of the "deleteBook" endpoint of the "crud" service.
func NewDeleteBookIDDoesntExistResponseBody(res *crud.IDDoesntExist) *DeleteBookIDDoesntExistResponseBody {
	body := &DeleteBookIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewDeleteBookUnknownErrorResponseBody builds the HTTP response body from the
// result of the "deleteBook" endpoint of the "crud" service.
func NewDeleteBookUnknownErrorResponseBody(res *crud.UnknownError) *DeleteBookUnknownErrorResponseBody {
	body := &DeleteBookUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteBookInvalidScopesResponseBody builds the HTTP response body from
// the result of the "deleteBook" endpoint of the "crud" service.
func NewDeleteBookInvalidScopesResponseBody(res crud.InvalidScopes) DeleteBookInvalidScopesResponseBody {
	body := DeleteBookInvalidScopesResponseBody(res)
	return body
}

// NewDeleteBookUnauthorizedResponseBody builds the HTTP response body from the
// result of the "deleteBook" endpoint of the "crud" service.
func NewDeleteBookUnauthorizedResponseBody(res crud.Unauthorized) DeleteBookUnauthorizedResponseBody {
	body := DeleteBookUnauthorizedResponseBody(res)
	return body
}

// NewCreateBookIDDoesntExistResponseBody builds the HTTP response body from
// the result of the "createBook" endpoint of the "crud" service.
func NewCreateBookIDDoesntExistResponseBody(res *crud.IDDoesntExist) *CreateBookIDDoesntExistResponseBody {
	body := &CreateBookIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewCreateBookUnknownErrorResponseBody builds the HTTP response body from the
// result of the "createBook" endpoint of the "crud" service.
func NewCreateBookUnknownErrorResponseBody(res *crud.UnknownError) *CreateBookUnknownErrorResponseBody {
	body := &CreateBookUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewCreateBookInvalidScopesResponseBody builds the HTTP response body from
// the result of the "createBook" endpoint of the "crud" service.
func NewCreateBookInvalidScopesResponseBody(res crud.InvalidScopes) CreateBookInvalidScopesResponseBody {
	body := CreateBookInvalidScopesResponseBody(res)
	return body
}

// NewCreateBookUnauthorizedResponseBody builds the HTTP response body from the
// result of the "createBook" endpoint of the "crud" service.
func NewCreateBookUnauthorizedResponseBody(res crud.Unauthorized) CreateBookUnauthorizedResponseBody {
	body := CreateBookUnauthorizedResponseBody(res)
	return body
}

// NewOAuthIDDoesntExistResponseBody builds the HTTP response body from the
// result of the "oAuth" endpoint of the "crud" service.
func NewOAuthIDDoesntExistResponseBody(res *crud.IDDoesntExist) *OAuthIDDoesntExistResponseBody {
	body := &OAuthIDDoesntExistResponseBody{
		Err:     res.Err,
		ID:      res.ID,
		Success: res.Success,
	}
	return body
}

// NewOAuthUnknownErrorResponseBody builds the HTTP response body from the
// result of the "oAuth" endpoint of the "crud" service.
func NewOAuthUnknownErrorResponseBody(res *crud.UnknownError) *OAuthUnknownErrorResponseBody {
	body := &OAuthUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewOAuthInvalidScopesResponseBody builds the HTTP response body from the
// result of the "oAuth" endpoint of the "crud" service.
func NewOAuthInvalidScopesResponseBody(res crud.InvalidScopes) OAuthInvalidScopesResponseBody {
	body := OAuthInvalidScopesResponseBody(res)
	return body
}

// NewOAuthUnauthorizedResponseBody builds the HTTP response body from the
// result of the "oAuth" endpoint of the "crud" service.
func NewOAuthUnauthorizedResponseBody(res crud.Unauthorized) OAuthUnauthorizedResponseBody {
	body := OAuthUnauthorizedResponseBody(res)
	return body
}

// NewGetBookPayload builds a crud service getBook endpoint payload.
func NewGetBookPayload(id string, jwtToken *string) *crud.GetBookPayload {
	v := &crud.GetBookPayload{}
	v.ID = id
	v.JWTToken = jwtToken

	return v
}

// NewUpdateBookPayload builds a crud service updateBook endpoint payload.
func NewUpdateBookPayload(body *UpdateBookRequestBody, id string) *crud.UpdateBookPayload {
	v := &crud.UpdateBookPayload{
		Name:  *body.Name,
		Price: *body.Price,
	}
	v.ID = id

	return v
}

// NewDeleteBookPayload builds a crud service deleteBook endpoint payload.
func NewDeleteBookPayload(id string) *crud.DeleteBookPayload {
	v := &crud.DeleteBookPayload{}
	v.ID = id

	return v
}

// NewCreateBookPayload builds a crud service createBook endpoint payload.
func NewCreateBookPayload(body *CreateBookRequestBody) *crud.CreateBookPayload {
	v := &crud.CreateBookPayload{
		Name:  *body.Name,
		Price: *body.Price,
	}

	return v
}

// NewOAuthPayload builds a crud service oAuth endpoint payload.
func NewOAuthPayload(body *OAuthRequestBody) *crud.OAuthPayload {
	v := &crud.OAuthPayload{
		GrantType:    *body.GrantType,
		ClientID:     *body.ClientID,
		ClientSecret: *body.ClientSecret,
	}

	return v
}

// ValidateUpdateBookRequestBody runs the validations defined on
// UpdateBookRequestBody
func ValidateUpdateBookRequestBody(body *UpdateBookRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}

// ValidateCreateBookRequestBody runs the validations defined on
// CreateBookRequestBody
func ValidateCreateBookRequestBody(body *CreateBookRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 3, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 10, false))
		}
	}
	return
}

// ValidateOAuthRequestBody runs the validations defined on OAuthRequestBody
func ValidateOAuthRequestBody(body *OAuthRequestBody) (err error) {
	if body.GrantType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("grant_type", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_id", "body"))
	}
	if body.ClientSecret == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("client_secret", "body"))
	}
	return
}
