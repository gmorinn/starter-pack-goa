// Code generated by goa v3.5.2, DO NOT EDIT.
//
// starter-pack HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package cli

import (
	bookc "api_crud/gen/http/book/client"
	jwttokenc "api_crud/gen/http/jwt_token/client"
	oauthc "api_crud/gen/http/o_auth/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `jwt-token (signup|signin|refresh)
book (get-book|update-book|get-all-books|delete-book|create-book)
o-auth o-auth
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` jwt-token signup --body '{
      "email": "guillaume@epitech.eu",
      "firstname": "Guillaume",
      "lastname": "Morin",
      "password": "7da"
   }'` + "\n" +
		os.Args[0] + ` book get-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth-token "Enim vel distinctio fuga eum quia dicta."` + "\n" +
		os.Args[0] + ` o-auth o-auth --body '{
      "client_id": "Et sint sunt et quaerat hic distinctio.",
      "client_secret": "Error beatae accusantium qui accusantium voluptates et.",
      "grant_type": "Nisi molestiae."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		jwtTokenFlags = flag.NewFlagSet("jwt-token", flag.ContinueOnError)

		jwtTokenSignupFlags    = flag.NewFlagSet("signup", flag.ExitOnError)
		jwtTokenSignupBodyFlag = jwtTokenSignupFlags.String("body", "REQUIRED", "")

		jwtTokenSigninFlags    = flag.NewFlagSet("signin", flag.ExitOnError)
		jwtTokenSigninBodyFlag = jwtTokenSigninFlags.String("body", "REQUIRED", "")

		jwtTokenRefreshFlags    = flag.NewFlagSet("refresh", flag.ExitOnError)
		jwtTokenRefreshBodyFlag = jwtTokenRefreshFlags.String("body", "REQUIRED", "")

		bookFlags = flag.NewFlagSet("book", flag.ContinueOnError)

		bookGetBookFlags          = flag.NewFlagSet("get-book", flag.ExitOnError)
		bookGetBookIDFlag         = bookGetBookFlags.String("id", "REQUIRED", "")
		bookGetBookOauthTokenFlag = bookGetBookFlags.String("oauth-token", "REQUIRED", "")

		bookUpdateBookFlags    = flag.NewFlagSet("update-book", flag.ExitOnError)
		bookUpdateBookBodyFlag = bookUpdateBookFlags.String("body", "REQUIRED", "")
		bookUpdateBookIDFlag   = bookUpdateBookFlags.String("id", "REQUIRED", "")

		bookGetAllBooksFlags = flag.NewFlagSet("get-all-books", flag.ExitOnError)

		bookDeleteBookFlags  = flag.NewFlagSet("delete-book", flag.ExitOnError)
		bookDeleteBookIDFlag = bookDeleteBookFlags.String("id", "REQUIRED", "")

		bookCreateBookFlags    = flag.NewFlagSet("create-book", flag.ExitOnError)
		bookCreateBookBodyFlag = bookCreateBookFlags.String("body", "REQUIRED", "")

		oAuthFlags = flag.NewFlagSet("o-auth", flag.ContinueOnError)

		oAuthOAuthFlags    = flag.NewFlagSet("o-auth", flag.ExitOnError)
		oAuthOAuthBodyFlag = oAuthOAuthFlags.String("body", "REQUIRED", "")
	)
	jwtTokenFlags.Usage = jwtTokenUsage
	jwtTokenSignupFlags.Usage = jwtTokenSignupUsage
	jwtTokenSigninFlags.Usage = jwtTokenSigninUsage
	jwtTokenRefreshFlags.Usage = jwtTokenRefreshUsage

	bookFlags.Usage = bookUsage
	bookGetBookFlags.Usage = bookGetBookUsage
	bookUpdateBookFlags.Usage = bookUpdateBookUsage
	bookGetAllBooksFlags.Usage = bookGetAllBooksUsage
	bookDeleteBookFlags.Usage = bookDeleteBookUsage
	bookCreateBookFlags.Usage = bookCreateBookUsage

	oAuthFlags.Usage = oAuthUsage
	oAuthOAuthFlags.Usage = oAuthOAuthUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "jwt-token":
			svcf = jwtTokenFlags
		case "book":
			svcf = bookFlags
		case "o-auth":
			svcf = oAuthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "jwt-token":
			switch epn {
			case "signup":
				epf = jwtTokenSignupFlags

			case "signin":
				epf = jwtTokenSigninFlags

			case "refresh":
				epf = jwtTokenRefreshFlags

			}

		case "book":
			switch epn {
			case "get-book":
				epf = bookGetBookFlags

			case "update-book":
				epf = bookUpdateBookFlags

			case "get-all-books":
				epf = bookGetAllBooksFlags

			case "delete-book":
				epf = bookDeleteBookFlags

			case "create-book":
				epf = bookCreateBookFlags

			}

		case "o-auth":
			switch epn {
			case "o-auth":
				epf = oAuthOAuthFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "jwt-token":
			c := jwttokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = jwttokenc.BuildSignupPayload(*jwtTokenSignupBodyFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = jwttokenc.BuildSigninPayload(*jwtTokenSigninBodyFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = jwttokenc.BuildRefreshPayload(*jwtTokenRefreshBodyFlag)
			}
		case "book":
			c := bookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-book":
				endpoint = c.GetBook()
				data, err = bookc.BuildGetBookPayload(*bookGetBookIDFlag, *bookGetBookOauthTokenFlag)
			case "update-book":
				endpoint = c.UpdateBook()
				data, err = bookc.BuildUpdateBookPayload(*bookUpdateBookBodyFlag, *bookUpdateBookIDFlag)
			case "get-all-books":
				endpoint = c.GetAllBooks()
				data = nil
			case "delete-book":
				endpoint = c.DeleteBook()
				data, err = bookc.BuildDeleteBookPayload(*bookDeleteBookIDFlag)
			case "create-book":
				endpoint = c.CreateBook()
				data, err = bookc.BuildCreateBookPayload(*bookCreateBookBodyFlag)
			}
		case "o-auth":
			c := oauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "o-auth":
				endpoint = c.OAuth()
				data, err = oauthc.BuildOAuthPayload(*oAuthOAuthBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// jwt-tokenUsage displays the usage of the jwt-token command and its
// subcommands.
func jwtTokenUsage() {
	fmt.Fprintf(os.Stderr, `Use Token to authenticate. Signin and Signup
Usage:
    %[1]s [globalflags] jwt-token COMMAND [flags]

COMMAND:
    signup: signup
    signin: signin
    refresh: Refresh Token

Additional help:
    %[1]s jwt-token COMMAND --help
`, os.Args[0])
}
func jwtTokenSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signup -body JSON

signup
    -body JSON: 

Example:
    %[1]s jwt-token signup --body '{
      "email": "guillaume@epitech.eu",
      "firstname": "Guillaume",
      "lastname": "Morin",
      "password": "7da"
   }'
`, os.Args[0])
}

func jwtTokenSigninUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signin -body JSON

signin
    -body JSON: 

Example:
    %[1]s jwt-token signin --body '{
      "email": "guillaume@epitech.eu",
      "password": "wuf"
   }'
`, os.Args[0])
}

func jwtTokenRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token refresh -body JSON

Refresh Token
    -body JSON: 

Example:
    %[1]s jwt-token refresh --body '{
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }'
`, os.Args[0])
}

// bookUsage displays the usage of the book command and its subcommands.
func bookUsage() {
	fmt.Fprintf(os.Stderr, `The principe of CRUD API with GET, PUT, POST, DELETE
Usage:
    %[1]s [globalflags] book COMMAND [flags]

COMMAND:
    get-book: Get one item
    update-book: Update one item
    get-all-books: Read All items
    delete-book: Delete one item by ID
    create-book: Create one item

Additional help:
    %[1]s book COMMAND --help
`, os.Args[0])
}
func bookGetBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book get-book -id STRING -oauth-token STRING

Get one item
    -id STRING: 
    -oauth-token STRING: 

Example:
    %[1]s book get-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth-token "Enim vel distinctio fuga eum quia dicta."
`, os.Args[0])
}

func bookUpdateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book update-book -body JSON -id STRING

Update one item
    -body JSON: 
    -id STRING: 

Example:
    %[1]s book update-book --body '{
      "name": "Guillaume",
      "price": 0.491096594473004
   }' --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
`, os.Args[0])
}

func bookGetAllBooksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book get-all-books

Read All items

Example:
    %[1]s book get-all-books
`, os.Args[0])
}

func bookDeleteBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book delete-book -id STRING

Delete one item by ID
    -id STRING: 

Example:
    %[1]s book delete-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
`, os.Args[0])
}

func bookCreateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book create-book -body JSON

Create one item
    -body JSON: 

Example:
    %[1]s book create-book --body '{
      "name": "Guillaume",
      "price": 0.8877830776353945
   }'
`, os.Args[0])
}

// o-authUsage displays the usage of the o-auth command and its subcommands.
func oAuthUsage() {
	fmt.Fprintf(os.Stderr, `Oauth to authentificate
Usage:
    %[1]s [globalflags] o-auth COMMAND [flags]

COMMAND:
    o-auth: oAuth

Additional help:
    %[1]s o-auth COMMAND --help
`, os.Args[0])
}
func oAuthOAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] o-auth o-auth -body JSON

oAuth
    -body JSON: 

Example:
    %[1]s o-auth o-auth --body '{
      "client_id": "Et sint sunt et quaerat hic distinctio.",
      "client_secret": "Error beatae accusantium qui accusantium voluptates et.",
      "grant_type": "Nisi molestiae."
   }'
`, os.Args[0])
}
