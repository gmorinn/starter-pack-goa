// Code generated by goa v3.5.2, DO NOT EDIT.
//
// api HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package cli

import (
	bookc "api_crud/gen/http/book/client"
	jwttokenc "api_crud/gen/http/jwt_token/client"
	oauthc "api_crud/gen/http/o_auth/client"
	productsc "api_crud/gen/http/products/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `book (get-book|update-book|get-all-books|delete-book|create-book)
jwt-token (signup|signin|refresh|auth-providers)
o-auth o-auth
products (get-all-products-by-category|delete-product|create-product|update-product|get-product)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` book get-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Vel repudiandae a." --jwt-token "Sit velit qui nihil."` + "\n" +
		os.Args[0] + ` jwt-token signup --body '{
      "birthday": "Et earum veniam omnis vel ab.",
      "email": "guillaume@epitech.eu",
      "firstname": "Guillaume",
      "lastname": "Morin",
      "password": "JeSuisUnTest974",
      "phone": "+262 692 12 34 56"
   }' --oauth "Voluptatem incidunt pariatur et nulla."` + "\n" +
		os.Args[0] + ` o-auth o-auth --body '{
      "client_id": "Sequi doloremque sequi est cupiditate.",
      "client_secret": "Tempore omnis in vel ullam.",
      "grant_type": "Ipsam repudiandae expedita animi."
   }'` + "\n" +
		os.Args[0] + ` products get-all-products-by-category --oauth "Aperiam eos ad porro." --jwt-token "Qui delectus molestias dolores aut quo cupiditate."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		bookFlags = flag.NewFlagSet("book", flag.ContinueOnError)

		bookGetBookFlags        = flag.NewFlagSet("get-book", flag.ExitOnError)
		bookGetBookIDFlag       = bookGetBookFlags.String("id", "REQUIRED", "Unique ID of the book")
		bookGetBookOauthFlag    = bookGetBookFlags.String("oauth", "REQUIRED", "")
		bookGetBookJWTTokenFlag = bookGetBookFlags.String("jwt-token", "REQUIRED", "")

		bookUpdateBookFlags        = flag.NewFlagSet("update-book", flag.ExitOnError)
		bookUpdateBookBodyFlag     = bookUpdateBookFlags.String("body", "REQUIRED", "")
		bookUpdateBookIDFlag       = bookUpdateBookFlags.String("id", "REQUIRED", "")
		bookUpdateBookOauthFlag    = bookUpdateBookFlags.String("oauth", "REQUIRED", "")
		bookUpdateBookJWTTokenFlag = bookUpdateBookFlags.String("jwt-token", "REQUIRED", "")

		bookGetAllBooksFlags = flag.NewFlagSet("get-all-books", flag.ExitOnError)

		bookDeleteBookFlags        = flag.NewFlagSet("delete-book", flag.ExitOnError)
		bookDeleteBookIDFlag       = bookDeleteBookFlags.String("id", "REQUIRED", "")
		bookDeleteBookOauthFlag    = bookDeleteBookFlags.String("oauth", "REQUIRED", "")
		bookDeleteBookJWTTokenFlag = bookDeleteBookFlags.String("jwt-token", "REQUIRED", "")

		bookCreateBookFlags        = flag.NewFlagSet("create-book", flag.ExitOnError)
		bookCreateBookBodyFlag     = bookCreateBookFlags.String("body", "REQUIRED", "")
		bookCreateBookOauthFlag    = bookCreateBookFlags.String("oauth", "REQUIRED", "")
		bookCreateBookJWTTokenFlag = bookCreateBookFlags.String("jwt-token", "REQUIRED", "")

		jwtTokenFlags = flag.NewFlagSet("jwt-token", flag.ContinueOnError)

		jwtTokenSignupFlags     = flag.NewFlagSet("signup", flag.ExitOnError)
		jwtTokenSignupBodyFlag  = jwtTokenSignupFlags.String("body", "REQUIRED", "")
		jwtTokenSignupOauthFlag = jwtTokenSignupFlags.String("oauth", "", "")

		jwtTokenSigninFlags     = flag.NewFlagSet("signin", flag.ExitOnError)
		jwtTokenSigninBodyFlag  = jwtTokenSigninFlags.String("body", "REQUIRED", "")
		jwtTokenSigninOauthFlag = jwtTokenSigninFlags.String("oauth", "", "")

		jwtTokenRefreshFlags     = flag.NewFlagSet("refresh", flag.ExitOnError)
		jwtTokenRefreshBodyFlag  = jwtTokenRefreshFlags.String("body", "REQUIRED", "")
		jwtTokenRefreshOauthFlag = jwtTokenRefreshFlags.String("oauth", "", "")

		jwtTokenAuthProvidersFlags     = flag.NewFlagSet("auth-providers", flag.ExitOnError)
		jwtTokenAuthProvidersBodyFlag  = jwtTokenAuthProvidersFlags.String("body", "REQUIRED", "")
		jwtTokenAuthProvidersOauthFlag = jwtTokenAuthProvidersFlags.String("oauth", "", "")

		oAuthFlags = flag.NewFlagSet("o-auth", flag.ContinueOnError)

		oAuthOAuthFlags    = flag.NewFlagSet("o-auth", flag.ExitOnError)
		oAuthOAuthBodyFlag = oAuthOAuthFlags.String("body", "REQUIRED", "")

		productsFlags = flag.NewFlagSet("products", flag.ContinueOnError)

		productsGetAllProductsByCategoryFlags        = flag.NewFlagSet("get-all-products-by-category", flag.ExitOnError)
		productsGetAllProductsByCategoryOauthFlag    = productsGetAllProductsByCategoryFlags.String("oauth", "", "")
		productsGetAllProductsByCategoryJWTTokenFlag = productsGetAllProductsByCategoryFlags.String("jwt-token", "", "")

		productsDeleteProductFlags        = flag.NewFlagSet("delete-product", flag.ExitOnError)
		productsDeleteProductIDFlag       = productsDeleteProductFlags.String("id", "REQUIRED", "")
		productsDeleteProductOauthFlag    = productsDeleteProductFlags.String("oauth", "", "")
		productsDeleteProductJWTTokenFlag = productsDeleteProductFlags.String("jwt-token", "", "")

		productsCreateProductFlags        = flag.NewFlagSet("create-product", flag.ExitOnError)
		productsCreateProductBodyFlag     = productsCreateProductFlags.String("body", "REQUIRED", "")
		productsCreateProductOauthFlag    = productsCreateProductFlags.String("oauth", "", "")
		productsCreateProductJWTTokenFlag = productsCreateProductFlags.String("jwt-token", "", "")

		productsUpdateProductFlags        = flag.NewFlagSet("update-product", flag.ExitOnError)
		productsUpdateProductBodyFlag     = productsUpdateProductFlags.String("body", "REQUIRED", "")
		productsUpdateProductIDFlag       = productsUpdateProductFlags.String("id", "REQUIRED", "")
		productsUpdateProductOauthFlag    = productsUpdateProductFlags.String("oauth", "", "")
		productsUpdateProductJWTTokenFlag = productsUpdateProductFlags.String("jwt-token", "", "")

		productsGetProductFlags        = flag.NewFlagSet("get-product", flag.ExitOnError)
		productsGetProductIDFlag       = productsGetProductFlags.String("id", "REQUIRED", "Unique ID of the product")
		productsGetProductOauthFlag    = productsGetProductFlags.String("oauth", "", "")
		productsGetProductJWTTokenFlag = productsGetProductFlags.String("jwt-token", "", "")
	)
	bookFlags.Usage = bookUsage
	bookGetBookFlags.Usage = bookGetBookUsage
	bookUpdateBookFlags.Usage = bookUpdateBookUsage
	bookGetAllBooksFlags.Usage = bookGetAllBooksUsage
	bookDeleteBookFlags.Usage = bookDeleteBookUsage
	bookCreateBookFlags.Usage = bookCreateBookUsage

	jwtTokenFlags.Usage = jwtTokenUsage
	jwtTokenSignupFlags.Usage = jwtTokenSignupUsage
	jwtTokenSigninFlags.Usage = jwtTokenSigninUsage
	jwtTokenRefreshFlags.Usage = jwtTokenRefreshUsage
	jwtTokenAuthProvidersFlags.Usage = jwtTokenAuthProvidersUsage

	oAuthFlags.Usage = oAuthUsage
	oAuthOAuthFlags.Usage = oAuthOAuthUsage

	productsFlags.Usage = productsUsage
	productsGetAllProductsByCategoryFlags.Usage = productsGetAllProductsByCategoryUsage
	productsDeleteProductFlags.Usage = productsDeleteProductUsage
	productsCreateProductFlags.Usage = productsCreateProductUsage
	productsUpdateProductFlags.Usage = productsUpdateProductUsage
	productsGetProductFlags.Usage = productsGetProductUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "book":
			svcf = bookFlags
		case "jwt-token":
			svcf = jwtTokenFlags
		case "o-auth":
			svcf = oAuthFlags
		case "products":
			svcf = productsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "book":
			switch epn {
			case "get-book":
				epf = bookGetBookFlags

			case "update-book":
				epf = bookUpdateBookFlags

			case "get-all-books":
				epf = bookGetAllBooksFlags

			case "delete-book":
				epf = bookDeleteBookFlags

			case "create-book":
				epf = bookCreateBookFlags

			}

		case "jwt-token":
			switch epn {
			case "signup":
				epf = jwtTokenSignupFlags

			case "signin":
				epf = jwtTokenSigninFlags

			case "refresh":
				epf = jwtTokenRefreshFlags

			case "auth-providers":
				epf = jwtTokenAuthProvidersFlags

			}

		case "o-auth":
			switch epn {
			case "o-auth":
				epf = oAuthOAuthFlags

			}

		case "products":
			switch epn {
			case "get-all-products-by-category":
				epf = productsGetAllProductsByCategoryFlags

			case "delete-product":
				epf = productsDeleteProductFlags

			case "create-product":
				epf = productsCreateProductFlags

			case "update-product":
				epf = productsUpdateProductFlags

			case "get-product":
				epf = productsGetProductFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "book":
			c := bookc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-book":
				endpoint = c.GetBook()
				data, err = bookc.BuildGetBookPayload(*bookGetBookIDFlag, *bookGetBookOauthFlag, *bookGetBookJWTTokenFlag)
			case "update-book":
				endpoint = c.UpdateBook()
				data, err = bookc.BuildUpdateBookPayload(*bookUpdateBookBodyFlag, *bookUpdateBookIDFlag, *bookUpdateBookOauthFlag, *bookUpdateBookJWTTokenFlag)
			case "get-all-books":
				endpoint = c.GetAllBooks()
				data = nil
			case "delete-book":
				endpoint = c.DeleteBook()
				data, err = bookc.BuildDeleteBookPayload(*bookDeleteBookIDFlag, *bookDeleteBookOauthFlag, *bookDeleteBookJWTTokenFlag)
			case "create-book":
				endpoint = c.CreateBook()
				data, err = bookc.BuildCreateBookPayload(*bookCreateBookBodyFlag, *bookCreateBookOauthFlag, *bookCreateBookJWTTokenFlag)
			}
		case "jwt-token":
			c := jwttokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = jwttokenc.BuildSignupPayload(*jwtTokenSignupBodyFlag, *jwtTokenSignupOauthFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = jwttokenc.BuildSigninPayload(*jwtTokenSigninBodyFlag, *jwtTokenSigninOauthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = jwttokenc.BuildRefreshPayload(*jwtTokenRefreshBodyFlag, *jwtTokenRefreshOauthFlag)
			case "auth-providers":
				endpoint = c.AuthProviders()
				data, err = jwttokenc.BuildAuthProvidersPayload(*jwtTokenAuthProvidersBodyFlag, *jwtTokenAuthProvidersOauthFlag)
			}
		case "o-auth":
			c := oauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "o-auth":
				endpoint = c.OAuth()
				data, err = oauthc.BuildOAuthPayload(*oAuthOAuthBodyFlag)
			}
		case "products":
			c := productsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-all-products-by-category":
				endpoint = c.GetAllProductsByCategory()
				data, err = productsc.BuildGetAllProductsByCategoryPayload(*productsGetAllProductsByCategoryOauthFlag, *productsGetAllProductsByCategoryJWTTokenFlag)
			case "delete-product":
				endpoint = c.DeleteProduct()
				data, err = productsc.BuildDeleteProductPayload(*productsDeleteProductIDFlag, *productsDeleteProductOauthFlag, *productsDeleteProductJWTTokenFlag)
			case "create-product":
				endpoint = c.CreateProduct()
				data, err = productsc.BuildCreateProductPayload(*productsCreateProductBodyFlag, *productsCreateProductOauthFlag, *productsCreateProductJWTTokenFlag)
			case "update-product":
				endpoint = c.UpdateProduct()
				data, err = productsc.BuildUpdateProductPayload(*productsUpdateProductBodyFlag, *productsUpdateProductIDFlag, *productsUpdateProductOauthFlag, *productsUpdateProductJWTTokenFlag)
			case "get-product":
				endpoint = c.GetProduct()
				data, err = productsc.BuildGetProductPayload(*productsGetProductIDFlag, *productsGetProductOauthFlag, *productsGetProductJWTTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// bookUsage displays the usage of the book command and its subcommands.
func bookUsage() {
	fmt.Fprintf(os.Stderr, `The principe of CRUD API with GET, PUT, POST, DELETE with Table Book
Usage:
    %[1]s [globalflags] book COMMAND [flags]

COMMAND:
    get-book: Get one item
    update-book: Update one item
    get-all-books: Get All items
    delete-book: Delete one item by ID
    create-book: Create one item

Additional help:
    %[1]s book COMMAND --help
`, os.Args[0])
}
func bookGetBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book get-book -id STRING -oauth STRING -jwt-token STRING

Get one item
    -id STRING: Unique ID of the book
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s book get-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Vel repudiandae a." --jwt-token "Sit velit qui nihil."
`, os.Args[0])
}

func bookUpdateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book update-book -body JSON -id STRING -oauth STRING -jwt-token STRING

Update one item
    -body JSON: 
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s book update-book --body '{
      "name": "Guillaume",
      "price": 69
   }' --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Illum iste aliquam non consequuntur cum." --jwt-token "Amet voluptas."
`, os.Args[0])
}

func bookGetAllBooksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book get-all-books

Get All items

Example:
    %[1]s book get-all-books
`, os.Args[0])
}

func bookDeleteBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book delete-book -id STRING -oauth STRING -jwt-token STRING

Delete one item by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s book delete-book --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Necessitatibus tempora consectetur." --jwt-token "Corrupti ut."
`, os.Args[0])
}

func bookCreateBookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] book create-book -body JSON -oauth STRING -jwt-token STRING

Create one item
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s book create-book --body '{
      "name": "Guillaume",
      "price": 0.23261748302976784
   }' --oauth "Consequatur quaerat numquam consequatur placeat possimus." --jwt-token "Repudiandae est."
`, os.Args[0])
}

// jwt-tokenUsage displays the usage of the jwt-token command and its
// subcommands.
func jwtTokenUsage() {
	fmt.Fprintf(os.Stderr, `Use Token to authenticate. Signin and Signup
Usage:
    %[1]s [globalflags] jwt-token COMMAND [flags]

COMMAND:
    signup: signup to generate jwt token
    signin: signin
    refresh: Refresh Token
    auth-providers: Register or login by Google, Facebook

Additional help:
    %[1]s jwt-token COMMAND --help
`, os.Args[0])
}
func jwtTokenSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signup -body JSON -oauth STRING

signup to generate jwt token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signup --body '{
      "birthday": "Et earum veniam omnis vel ab.",
      "email": "guillaume@epitech.eu",
      "firstname": "Guillaume",
      "lastname": "Morin",
      "password": "JeSuisUnTest974",
      "phone": "+262 692 12 34 56"
   }' --oauth "Voluptatem incidunt pariatur et nulla."
`, os.Args[0])
}

func jwtTokenSigninUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signin -body JSON -oauth STRING

signin
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signin --body '{
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974"
   }' --oauth "Nihil et accusantium quam."
`, os.Args[0])
}

func jwtTokenRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token refresh -body JSON -oauth STRING

Refresh Token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token refresh --body '{
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }' --oauth "Ipsa sint."
`, os.Args[0])
}

func jwtTokenAuthProvidersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token auth-providers -body JSON -oauth STRING

Register or login by Google, Facebook
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token auth-providers --body '{
      "email": "guillaume@epitech.eu",
      "firebase_id_token": "wme",
      "firebase_provider": "facebook.com",
      "firebase_uid": "zgmURRUlcJfgDMRyjJ20xs7Rxxw2",
      "firstname": "Guillaume",
      "lastname": "Morin"
   }' --oauth "Dolor atque molestias."
`, os.Args[0])
}

// o-authUsage displays the usage of the o-auth command and its subcommands.
func oAuthUsage() {
	fmt.Fprintf(os.Stderr, `Oauth to authentificate
Usage:
    %[1]s [globalflags] o-auth COMMAND [flags]

COMMAND:
    o-auth: oAuth

Additional help:
    %[1]s o-auth COMMAND --help
`, os.Args[0])
}
func oAuthOAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] o-auth o-auth -body JSON

oAuth
    -body JSON: 

Example:
    %[1]s o-auth o-auth --body '{
      "client_id": "Sequi doloremque sequi est cupiditate.",
      "client_secret": "Tempore omnis in vel ullam.",
      "grant_type": "Ipsam repudiandae expedita animi."
   }'
`, os.Args[0])
}

// productsUsage displays the usage of the products command and its subcommands.
func productsUsage() {
	fmt.Fprintf(os.Stderr, `Products of the E-Commerce
Usage:
    %[1]s [globalflags] products COMMAND [flags]

COMMAND:
    get-all-products-by-category: Get All products by category
    delete-product: Delete one product by ID
    create-product: Create one product
    update-product: Update one product
    get-product: Get one product

Additional help:
    %[1]s products COMMAND --help
`, os.Args[0])
}
func productsGetAllProductsByCategoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products get-all-products-by-category -oauth STRING -jwt-token STRING

Get All products by category
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s products get-all-products-by-category --oauth "Aperiam eos ad porro." --jwt-token "Qui delectus molestias dolores aut quo cupiditate."
`, os.Args[0])
}

func productsDeleteProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products delete-product -id STRING -oauth STRING -jwt-token STRING

Delete one product by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s products delete-product --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Porro eum quod dolore ex adipisci perferendis." --jwt-token "Voluptas numquam sint quibusdam ea hic."
`, os.Args[0])
}

func productsCreateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products create-product -body JSON -oauth STRING -jwt-token STRING

Create one product
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s products create-product --body '{
      "product": {
         "category": "men",
         "cover": "https://i.ibb.co/ypkgK0X/blue-beanie.png",
         "name": "Guillaume",
         "price": 69
      }
   }' --oauth "Vel in." --jwt-token "Laboriosam quia et."
`, os.Args[0])
}

func productsUpdateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products update-product -body JSON -id STRING -oauth STRING -jwt-token STRING

Update one product
    -body JSON: 
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s products update-product --body '{
      "product": {
         "category": "men",
         "cover": "https://i.ibb.co/ypkgK0X/blue-beanie.png",
         "name": "Guillaume",
         "price": 69
      }
   }' --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Impedit optio maiores nostrum doloremque id distinctio." --jwt-token "Odit sit sit est libero dolor et."
`, os.Args[0])
}

func productsGetProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] products get-product -id STRING -oauth STRING -jwt-token STRING

Get one product
    -id STRING: Unique ID of the product
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s products get-product --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Nostrum enim qui recusandae." --jwt-token "Eum id dolores aut similique ratione ipsum."
`, os.Args[0])
}
