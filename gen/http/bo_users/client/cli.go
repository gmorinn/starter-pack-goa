// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boUsers HTTP client CLI support package
//
// Command:
// $ goa gen api_crud/design

package client

import (
	bousers "api_crud/gen/bo_users"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetAllusersPayload builds the payload for the boUsers getAllusers
// endpoint from CLI flags.
func BuildGetAllusersPayload(boUsersGetAllusersOauth string, boUsersGetAllusersJWTToken string) (*bousers.GetAllusersPayload, error) {
	var oauth *string
	{
		if boUsersGetAllusersOauth != "" {
			oauth = &boUsersGetAllusersOauth
		}
	}
	var jwtToken *string
	{
		if boUsersGetAllusersJWTToken != "" {
			jwtToken = &boUsersGetAllusersJWTToken
		}
	}
	v := &bousers.GetAllusersPayload{}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the boUsers deleteUser
// endpoint from CLI flags.
func BuildDeleteUserPayload(boUsersDeleteUserID string, boUsersDeleteUserOauth string, boUsersDeleteUserJWTToken string) (*bousers.DeleteUserPayload, error) {
	var err error
	var id string
	{
		id = boUsersDeleteUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if boUsersDeleteUserOauth != "" {
			oauth = &boUsersDeleteUserOauth
		}
	}
	var jwtToken *string
	{
		if boUsersDeleteUserJWTToken != "" {
			jwtToken = &boUsersDeleteUserJWTToken
		}
	}
	v := &bousers.DeleteUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildCreateUserPayload builds the payload for the boUsers createUser
// endpoint from CLI flags.
func BuildCreateUserPayload(boUsersCreateUserBody string, boUsersCreateUserOauth string, boUsersCreateUserJWTToken string) (*bousers.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(boUsersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"birthday\": \"01/09/2002\",\n      \"confirm_password\": \"JeSuisUnTest974\",\n      \"email\": \"guillaume.morin@epitech.eu\",\n      \"firstname\": \"Guillaume\",\n      \"lastname\": \"Morin\",\n      \"password\": \"JeSuisUnTest974\",\n      \"phone\": \"+262 692 12 34 56\",\n      \"role\": \"user\"\n   }'")
		}
		if utf8.RuneCountInString(body.Firstname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 3, true))
		}
		if utf8.RuneCountInString(body.Lastname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 3, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if !(body.Role == "user" || body.Role == "pro" || body.Role == "admin") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", body.Role, []interface{}{"user", "pro", "admin"}))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", body.Password, "\\d"))
		if utf8.RuneCountInString(body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 8, true))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm_password", body.ConfirmPassword, "\\d"))
		if utf8.RuneCountInString(body.ConfirmPassword) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm_password", body.ConfirmPassword, utf8.RuneCountInString(body.ConfirmPassword), 8, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if boUsersCreateUserOauth != "" {
			oauth = &boUsersCreateUserOauth
		}
	}
	var jwtToken *string
	{
		if boUsersCreateUserJWTToken != "" {
			jwtToken = &boUsersCreateUserJWTToken
		}
	}
	v := &bousers.CreateUserPayload{
		Firstname:       body.Firstname,
		Lastname:        body.Lastname,
		Email:           body.Email,
		Birthday:        body.Birthday,
		Phone:           body.Phone,
		Role:            body.Role,
		Password:        body.Password,
		ConfirmPassword: body.ConfirmPassword,
	}
	{
		var zero string
		if v.Birthday == zero {
			v.Birthday = ""
		}
	}
	{
		var zero string
		if v.Phone == zero {
			v.Phone = ""
		}
	}
	{
		var zero string
		if v.Role == zero {
			v.Role = "user"
		}
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the boUsers updateUser
// endpoint from CLI flags.
func BuildUpdateUserPayload(boUsersUpdateUserBody string, boUsersUpdateUserID string, boUsersUpdateUserOauth string, boUsersUpdateUserJWTToken string) (*bousers.UpdateUserPayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(boUsersUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"User\": {\n         \"birthday\": \"01/09/2002\",\n         \"email\": \"guillaume.morin@epitech.eu\",\n         \"firstname\": \"Guillaume\",\n         \"lastname\": \"Morin\",\n         \"phone\": \"+262 692 12 34 56\",\n         \"role\": \"user\"\n      }\n   }'")
		}
		if body.User == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("User", "body"))
		}
		if body.User != nil {
			if err2 := ValidatePayloadUserRequestBody(body.User); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = boUsersUpdateUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if boUsersUpdateUserOauth != "" {
			oauth = &boUsersUpdateUserOauth
		}
	}
	var jwtToken *string
	{
		if boUsersUpdateUserJWTToken != "" {
			jwtToken = &boUsersUpdateUserJWTToken
		}
	}
	v := &bousers.UpdateUserPayload{}
	if body.User != nil {
		v.User = marshalPayloadUserRequestBodyToBousersPayloadUser(body.User)
	}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildGetUserPayload builds the payload for the boUsers getUser endpoint from
// CLI flags.
func BuildGetUserPayload(boUsersGetUserID string, boUsersGetUserOauth string, boUsersGetUserJWTToken string) (*bousers.GetUserPayload, error) {
	var err error
	var id string
	{
		id = boUsersGetUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if boUsersGetUserOauth != "" {
			oauth = &boUsersGetUserOauth
		}
	}
	var jwtToken *string
	{
		if boUsersGetUserJWTToken != "" {
			jwtToken = &boUsersGetUserJWTToken
		}
	}
	v := &bousers.GetUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildDeleteManyUsersPayload builds the payload for the boUsers
// deleteManyUsers endpoint from CLI flags.
func BuildDeleteManyUsersPayload(boUsersDeleteManyUsersBody string, boUsersDeleteManyUsersOauth string, boUsersDeleteManyUsersJWTToken string) (*bousers.DeleteManyUsersPayload, error) {
	var err error
	var body DeleteManyUsersRequestBody
	{
		err = json.Unmarshal([]byte(boUsersDeleteManyUsersBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"tab\": [\n         \"Autem sint vel in ea laboriosam quia.\",\n         \"Est vitae distinctio impedit optio.\",\n         \"Nostrum doloremque id distinctio.\"\n      ]\n   }'")
		}
		if body.Tab == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("tab", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if boUsersDeleteManyUsersOauth != "" {
			oauth = &boUsersDeleteManyUsersOauth
		}
	}
	var jwtToken *string
	{
		if boUsersDeleteManyUsersJWTToken != "" {
			jwtToken = &boUsersDeleteManyUsersJWTToken
		}
	}
	v := &bousers.DeleteManyUsersPayload{}
	if body.Tab != nil {
		v.Tab = make([]string, len(body.Tab))
		for i, val := range body.Tab {
			v.Tab[i] = val
		}
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
