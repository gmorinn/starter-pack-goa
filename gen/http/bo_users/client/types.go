// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boUsers HTTP client types
//
// Command:
// $ goa gen api_crud/design

package client

import (
	bousers "api_crud/gen/bo_users"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "boUsers" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	Lastname  string `form:"lastname" json:"lastname" xml:"lastname"`
	Email     string `form:"email" json:"email" xml:"email"`
	Birthday  string `form:"birthday" json:"birthday" xml:"birthday"`
	Phone     string `form:"phone" json:"phone" xml:"phone"`
	Role      string `form:"role" json:"role" xml:"role"`
	// Minimum 8 charactères / Chiffre Obligatoire
	Password string `form:"password" json:"password" xml:"password"`
	// Minimum 8 charactères / Chiffre Obligatoire
	ConfirmPassword string `form:"confirm_password" json:"confirm_password" xml:"confirm_password"`
}

// UpdateUserRequestBody is the type of the "boUsers" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	User *PayloadUserRequestBody `form:"User" json:"User" xml:"User"`
}

// DeleteManyUsersRequestBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP request body.
type DeleteManyUsersRequestBody struct {
	Tab []string `form:"tab" json:"tab" xml:"tab"`
}

// NewPasswordRequestBody is the type of the "boUsers" service "newPassword"
// endpoint HTTP request body.
type NewPasswordRequestBody struct {
	// Minimum 8 charactères / Chiffre Obligatoire
	Password string `form:"password" json:"password" xml:"password"`
	// Minimum 8 charactères / Chiffre Obligatoire
	Confirm string `form:"confirm" json:"confirm" xml:"confirm"`
}

// GetAllusersResponseBody is the type of the "boUsers" service "getAllusers"
// endpoint HTTP response body.
type GetAllusersResponseBody struct {
	// All users
	Users []*ResBoUserResponseBody `form:"users,omitempty" json:"users,omitempty" xml:"users,omitempty"`
	// total of users
	Count   *int64 `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	Success *bool  `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteUserResponseBody is the type of the "boUsers" service "deleteUser"
// endpoint HTTP response body.
type DeleteUserResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateUserResponseBody is the type of the "boUsers" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Result is an object
	User    *ResBoUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                  `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateUserResponseBody is the type of the "boUsers" service "updateUser"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// Result is an Object
	User    *ResBoUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                  `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetUserResponseBody is the type of the "boUsers" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Result is an object
	User    *ResBoUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                  `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteManyUsersResponseBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP response body.
type DeleteManyUsersResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// NewPasswordResponseBody is the type of the "boUsers" service "newPassword"
// endpoint HTTP response body.
type NewPasswordResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetAllusersUnknownErrorResponseBody is the type of the "boUsers" service
// "getAllusers" endpoint HTTP response body for the "unknown_error" error.
type GetAllusersUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteUserUnknownErrorResponseBody is the type of the "boUsers" service
// "deleteUser" endpoint HTTP response body for the "unknown_error" error.
type DeleteUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateUserUnknownErrorResponseBody is the type of the "boUsers" service
// "createUser" endpoint HTTP response body for the "unknown_error" error.
type CreateUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateUserUnknownErrorResponseBody is the type of the "boUsers" service
// "updateUser" endpoint HTTP response body for the "unknown_error" error.
type UpdateUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetUserUnknownErrorResponseBody is the type of the "boUsers" service
// "getUser" endpoint HTTP response body for the "unknown_error" error.
type GetUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteManyUsersUnknownErrorResponseBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP response body for the "unknown_error" error.
type DeleteManyUsersUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// NewPasswordUnknownErrorResponseBody is the type of the "boUsers" service
// "newPassword" endpoint HTTP response body for the "unknown_error" error.
type NewPasswordUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// ResBoUserResponseBody is used to define fields on response body types.
type ResBoUserResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Birthday  *string `form:"birthday,omitempty" json:"birthday,omitempty" xml:"birthday,omitempty"`
	Phone     *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Role      *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// PayloadUserRequestBody is used to define fields on request body types.
type PayloadUserRequestBody struct {
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	Lastname  string `form:"lastname" json:"lastname" xml:"lastname"`
	Email     string `form:"email" json:"email" xml:"email"`
	Birthday  string `form:"birthday" json:"birthday" xml:"birthday"`
	Role      string `form:"role" json:"role" xml:"role"`
	Phone     string `form:"phone" json:"phone" xml:"phone"`
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "createUser" endpoint of the "boUsers" service.
func NewCreateUserRequestBody(p *bousers.CreateUserPayload) *CreateUserRequestBody {
	body := &CreateUserRequestBody{
		Firstname:       p.Firstname,
		Lastname:        p.Lastname,
		Email:           p.Email,
		Birthday:        p.Birthday,
		Phone:           p.Phone,
		Role:            p.Role,
		Password:        p.Password,
		ConfirmPassword: p.ConfirmPassword,
	}
	{
		var zero string
		if body.Birthday == zero {
			body.Birthday = ""
		}
	}
	{
		var zero string
		if body.Phone == zero {
			body.Phone = ""
		}
	}
	{
		var zero string
		if body.Role == zero {
			body.Role = "user"
		}
	}
	return body
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "updateUser" endpoint of the "boUsers" service.
func NewUpdateUserRequestBody(p *bousers.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{}
	if p.User != nil {
		body.User = marshalBousersPayloadUserToPayloadUserRequestBody(p.User)
	}
	return body
}

// NewDeleteManyUsersRequestBody builds the HTTP request body from the payload
// of the "deleteManyUsers" endpoint of the "boUsers" service.
func NewDeleteManyUsersRequestBody(p *bousers.DeleteManyUsersPayload) *DeleteManyUsersRequestBody {
	body := &DeleteManyUsersRequestBody{}
	if p.Tab != nil {
		body.Tab = make([]string, len(p.Tab))
		for i, val := range p.Tab {
			body.Tab[i] = val
		}
	}
	return body
}

// NewNewPasswordRequestBody builds the HTTP request body from the payload of
// the "newPassword" endpoint of the "boUsers" service.
func NewNewPasswordRequestBody(p *bousers.NewPasswordPayload) *NewPasswordRequestBody {
	body := &NewPasswordRequestBody{
		Password: p.Password,
		Confirm:  p.Confirm,
	}
	return body
}

// NewGetAllusersResultOK builds a "boUsers" service "getAllusers" endpoint
// result from a HTTP "OK" response.
func NewGetAllusersResultOK(body *GetAllusersResponseBody) *bousers.GetAllusersResult {
	v := &bousers.GetAllusersResult{
		Count:   *body.Count,
		Success: *body.Success,
	}
	v.Users = make([]*bousers.ResBoUser, len(body.Users))
	for i, val := range body.Users {
		v.Users[i] = unmarshalResBoUserResponseBodyToBousersResBoUser(val)
	}

	return v
}

// NewGetAllusersUnknownError builds a boUsers service getAllusers endpoint
// unknown_error error.
func NewGetAllusersUnknownError(body *GetAllusersUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewDeleteUserResultOK builds a "boUsers" service "deleteUser" endpoint
// result from a HTTP "OK" response.
func NewDeleteUserResultOK(body *DeleteUserResponseBody) *bousers.DeleteUserResult {
	v := &bousers.DeleteUserResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteUserUnknownError builds a boUsers service deleteUser endpoint
// unknown_error error.
func NewDeleteUserUnknownError(body *DeleteUserUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewCreateUserResultCreated builds a "boUsers" service "createUser" endpoint
// result from a HTTP "Created" response.
func NewCreateUserResultCreated(body *CreateUserResponseBody) *bousers.CreateUserResult {
	v := &bousers.CreateUserResult{
		Success: *body.Success,
	}
	v.User = unmarshalResBoUserResponseBodyToBousersResBoUser(body.User)

	return v
}

// NewCreateUserUnknownError builds a boUsers service createUser endpoint
// unknown_error error.
func NewCreateUserUnknownError(body *CreateUserUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewUpdateUserResultOK builds a "boUsers" service "updateUser" endpoint
// result from a HTTP "OK" response.
func NewUpdateUserResultOK(body *UpdateUserResponseBody) *bousers.UpdateUserResult {
	v := &bousers.UpdateUserResult{
		Success: *body.Success,
	}
	v.User = unmarshalResBoUserResponseBodyToBousersResBoUser(body.User)

	return v
}

// NewUpdateUserUnknownError builds a boUsers service updateUser endpoint
// unknown_error error.
func NewUpdateUserUnknownError(body *UpdateUserUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewGetUserResultOK builds a "boUsers" service "getUser" endpoint result from
// a HTTP "OK" response.
func NewGetUserResultOK(body *GetUserResponseBody) *bousers.GetUserResult {
	v := &bousers.GetUserResult{
		Success: *body.Success,
	}
	v.User = unmarshalResBoUserResponseBodyToBousersResBoUser(body.User)

	return v
}

// NewGetUserUnknownError builds a boUsers service getUser endpoint
// unknown_error error.
func NewGetUserUnknownError(body *GetUserUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewDeleteManyUsersResultOK builds a "boUsers" service "deleteManyUsers"
// endpoint result from a HTTP "OK" response.
func NewDeleteManyUsersResultOK(body *DeleteManyUsersResponseBody) *bousers.DeleteManyUsersResult {
	v := &bousers.DeleteManyUsersResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteManyUsersUnknownError builds a boUsers service deleteManyUsers
// endpoint unknown_error error.
func NewDeleteManyUsersUnknownError(body *DeleteManyUsersUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewNewPasswordResultOK builds a "boUsers" service "newPassword" endpoint
// result from a HTTP "OK" response.
func NewNewPasswordResultOK(body *NewPasswordResponseBody) *bousers.NewPasswordResult {
	v := &bousers.NewPasswordResult{
		Success: *body.Success,
	}

	return v
}

// NewNewPasswordUnknownError builds a boUsers service newPassword endpoint
// unknown_error error.
func NewNewPasswordUnknownError(body *NewPasswordUnknownErrorResponseBody) *bousers.UnknownError {
	v := &bousers.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// ValidateGetAllusersResponseBody runs the validations defined on
// GetAllusersResponseBody
func ValidateGetAllusersResponseBody(body *GetAllusersResponseBody) (err error) {
	if body.Users == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("users", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	for _, e := range body.Users {
		if e != nil {
			if err2 := ValidateResBoUserResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDeleteUserResponseBody runs the validations defined on
// DeleteUserResponseBody
func ValidateDeleteUserResponseBody(body *DeleteUserResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateCreateUserResponseBody runs the validations defined on
// CreateUserResponseBody
func ValidateCreateUserResponseBody(body *CreateUserResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResBoUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateUserResponseBody runs the validations defined on
// UpdateUserResponseBody
func ValidateUpdateUserResponseBody(body *UpdateUserResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResBoUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetUserResponseBody runs the validations defined on
// GetUserResponseBody
func ValidateGetUserResponseBody(body *GetUserResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResBoUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDeleteManyUsersResponseBody runs the validations defined on
// DeleteManyUsersResponseBody
func ValidateDeleteManyUsersResponseBody(body *DeleteManyUsersResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateNewPasswordResponseBody runs the validations defined on
// NewPasswordResponseBody
func ValidateNewPasswordResponseBody(body *NewPasswordResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateGetAllusersUnknownErrorResponseBody runs the validations defined on
// getAllusers_unknown_error_response_body
func ValidateGetAllusersUnknownErrorResponseBody(body *GetAllusersUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateDeleteUserUnknownErrorResponseBody runs the validations defined on
// deleteUser_unknown_error_response_body
func ValidateDeleteUserUnknownErrorResponseBody(body *DeleteUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateCreateUserUnknownErrorResponseBody runs the validations defined on
// createUser_unknown_error_response_body
func ValidateCreateUserUnknownErrorResponseBody(body *CreateUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateUpdateUserUnknownErrorResponseBody runs the validations defined on
// updateUser_unknown_error_response_body
func ValidateUpdateUserUnknownErrorResponseBody(body *UpdateUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateGetUserUnknownErrorResponseBody runs the validations defined on
// getUser_unknown_error_response_body
func ValidateGetUserUnknownErrorResponseBody(body *GetUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateDeleteManyUsersUnknownErrorResponseBody runs the validations defined
// on deleteManyUsers_unknown_error_response_body
func ValidateDeleteManyUsersUnknownErrorResponseBody(body *DeleteManyUsersUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateNewPasswordUnknownErrorResponseBody runs the validations defined on
// newPassword_unknown_error_response_body
func ValidateNewPasswordUnknownErrorResponseBody(body *NewPasswordUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateResBoUserResponseBody runs the validations defined on
// resBoUserResponseBody
func ValidateResBoUserResponseBody(body *ResBoUserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Role != nil {
		if !(*body.Role == "user" || *body.Role == "pro" || *body.Role == "admin") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", *body.Role, []interface{}{"user", "pro", "admin"}))
		}
	}
	return
}

// ValidatePayloadUserRequestBody runs the validations defined on
// payloadUserRequestBody
func ValidatePayloadUserRequestBody(body *PayloadUserRequestBody) (err error) {
	if utf8.RuneCountInString(body.Firstname) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 3, true))
	}
	if utf8.RuneCountInString(body.Lastname) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 3, true))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	if !(body.Role == "user" || body.Role == "pro" || body.Role == "admin") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", body.Role, []interface{}{"user", "pro", "admin"}))
	}
	return
}
