// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boUsers HTTP server types
//
// Command:
// $ goa gen api_crud/design

package server

import (
	bousers "api_crud/gen/bo_users"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "boUsers" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Birthday  *string `form:"birthday,omitempty" json:"birthday,omitempty" xml:"birthday,omitempty"`
	Phone     *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	Role      *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Minimum 8 charactères / Chiffre Obligatoire
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Minimum 8 charactères / Chiffre Obligatoire
	ConfirmPassword *string `form:"confirm_password,omitempty" json:"confirm_password,omitempty" xml:"confirm_password,omitempty"`
}

// UpdateUserRequestBody is the type of the "boUsers" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	User *PayloadUserRequestBody `form:"User,omitempty" json:"User,omitempty" xml:"User,omitempty"`
}

// DeleteManyUsersRequestBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP request body.
type DeleteManyUsersRequestBody struct {
	Tab []string `form:"tab,omitempty" json:"tab,omitempty" xml:"tab,omitempty"`
}

// NewPasswordRequestBody is the type of the "boUsers" service "newPassword"
// endpoint HTTP request body.
type NewPasswordRequestBody struct {
	// Minimum 8 charactères / Chiffre Obligatoire
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Minimum 8 charactères / Chiffre Obligatoire
	Confirm *string `form:"confirm,omitempty" json:"confirm,omitempty" xml:"confirm,omitempty"`
}

// GetAllusersResponseBody is the type of the "boUsers" service "getAllusers"
// endpoint HTTP response body.
type GetAllusersResponseBody struct {
	// All users
	Users []*ResBoUserResponseBody `form:"users" json:"users" xml:"users"`
	// total of users
	Count   int64 `form:"count" json:"count" xml:"count"`
	Success bool  `form:"success" json:"success" xml:"success"`
}

// DeleteUserResponseBody is the type of the "boUsers" service "deleteUser"
// endpoint HTTP response body.
type DeleteUserResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// CreateUserResponseBody is the type of the "boUsers" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Result is an object
	User    *ResBoUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                   `form:"success" json:"success" xml:"success"`
}

// UpdateUserResponseBody is the type of the "boUsers" service "updateUser"
// endpoint HTTP response body.
type UpdateUserResponseBody struct {
	// Result is an Object
	User    *ResBoUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                   `form:"success" json:"success" xml:"success"`
}

// GetUserResponseBody is the type of the "boUsers" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Result is an object
	User    *ResBoUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                   `form:"success" json:"success" xml:"success"`
}

// DeleteManyUsersResponseBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP response body.
type DeleteManyUsersResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// NewPasswordResponseBody is the type of the "boUsers" service "newPassword"
// endpoint HTTP response body.
type NewPasswordResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// GetAllusersUnknownErrorResponseBody is the type of the "boUsers" service
// "getAllusers" endpoint HTTP response body for the "unknown_error" error.
type GetAllusersUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteUserUnknownErrorResponseBody is the type of the "boUsers" service
// "deleteUser" endpoint HTTP response body for the "unknown_error" error.
type DeleteUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// CreateUserUnknownErrorResponseBody is the type of the "boUsers" service
// "createUser" endpoint HTTP response body for the "unknown_error" error.
type CreateUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateUserUnknownErrorResponseBody is the type of the "boUsers" service
// "updateUser" endpoint HTTP response body for the "unknown_error" error.
type UpdateUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetUserUnknownErrorResponseBody is the type of the "boUsers" service
// "getUser" endpoint HTTP response body for the "unknown_error" error.
type GetUserUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteManyUsersUnknownErrorResponseBody is the type of the "boUsers" service
// "deleteManyUsers" endpoint HTTP response body for the "unknown_error" error.
type DeleteManyUsersUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// NewPasswordUnknownErrorResponseBody is the type of the "boUsers" service
// "newPassword" endpoint HTTP response body for the "unknown_error" error.
type NewPasswordUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResBoUserResponseBody is used to define fields on response body types.
type ResBoUserResponseBody struct {
	ID        string  `form:"id" json:"id" xml:"id"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     string  `form:"email" json:"email" xml:"email"`
	Birthday  string  `form:"birthday" json:"birthday" xml:"birthday"`
	Phone     string  `form:"phone" json:"phone" xml:"phone"`
	Role      string  `form:"role" json:"role" xml:"role"`
}

// PayloadUserRequestBody is used to define fields on request body types.
type PayloadUserRequestBody struct {
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Birthday  *string `form:"birthday,omitempty" json:"birthday,omitempty" xml:"birthday,omitempty"`
	Role      *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	Phone     *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
}

// NewGetAllusersResponseBody builds the HTTP response body from the result of
// the "getAllusers" endpoint of the "boUsers" service.
func NewGetAllusersResponseBody(res *bousers.GetAllusersResult) *GetAllusersResponseBody {
	body := &GetAllusersResponseBody{
		Count:   res.Count,
		Success: res.Success,
	}
	if res.Users != nil {
		body.Users = make([]*ResBoUserResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalBousersResBoUserToResBoUserResponseBody(val)
		}
	}
	return body
}

// NewDeleteUserResponseBody builds the HTTP response body from the result of
// the "deleteUser" endpoint of the "boUsers" service.
func NewDeleteUserResponseBody(res *bousers.DeleteUserResult) *DeleteUserResponseBody {
	body := &DeleteUserResponseBody{
		Success: res.Success,
	}
	return body
}

// NewCreateUserResponseBody builds the HTTP response body from the result of
// the "createUser" endpoint of the "boUsers" service.
func NewCreateUserResponseBody(res *bousers.CreateUserResult) *CreateUserResponseBody {
	body := &CreateUserResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalBousersResBoUserToResBoUserResponseBody(res.User)
	}
	return body
}

// NewUpdateUserResponseBody builds the HTTP response body from the result of
// the "updateUser" endpoint of the "boUsers" service.
func NewUpdateUserResponseBody(res *bousers.UpdateUserResult) *UpdateUserResponseBody {
	body := &UpdateUserResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalBousersResBoUserToResBoUserResponseBody(res.User)
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "boUsers" service.
func NewGetUserResponseBody(res *bousers.GetUserResult) *GetUserResponseBody {
	body := &GetUserResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalBousersResBoUserToResBoUserResponseBody(res.User)
	}
	return body
}

// NewDeleteManyUsersResponseBody builds the HTTP response body from the result
// of the "deleteManyUsers" endpoint of the "boUsers" service.
func NewDeleteManyUsersResponseBody(res *bousers.DeleteManyUsersResult) *DeleteManyUsersResponseBody {
	body := &DeleteManyUsersResponseBody{
		Success: res.Success,
	}
	return body
}

// NewNewPasswordResponseBody builds the HTTP response body from the result of
// the "newPassword" endpoint of the "boUsers" service.
func NewNewPasswordResponseBody(res *bousers.NewPasswordResult) *NewPasswordResponseBody {
	body := &NewPasswordResponseBody{
		Success: res.Success,
	}
	return body
}

// NewGetAllusersUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getAllusers" endpoint of the "boUsers" service.
func NewGetAllusersUnknownErrorResponseBody(res *bousers.UnknownError) *GetAllusersUnknownErrorResponseBody {
	body := &GetAllusersUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "deleteUser" endpoint of the "boUsers" service.
func NewDeleteUserUnknownErrorResponseBody(res *bousers.UnknownError) *DeleteUserUnknownErrorResponseBody {
	body := &DeleteUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewCreateUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "createUser" endpoint of the "boUsers" service.
func NewCreateUserUnknownErrorResponseBody(res *bousers.UnknownError) *CreateUserUnknownErrorResponseBody {
	body := &CreateUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "updateUser" endpoint of the "boUsers" service.
func NewUpdateUserUnknownErrorResponseBody(res *bousers.UnknownError) *UpdateUserUnknownErrorResponseBody {
	body := &UpdateUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetUserUnknownErrorResponseBody builds the HTTP response body from the
// result of the "getUser" endpoint of the "boUsers" service.
func NewGetUserUnknownErrorResponseBody(res *bousers.UnknownError) *GetUserUnknownErrorResponseBody {
	body := &GetUserUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteManyUsersUnknownErrorResponseBody builds the HTTP response body
// from the result of the "deleteManyUsers" endpoint of the "boUsers" service.
func NewDeleteManyUsersUnknownErrorResponseBody(res *bousers.UnknownError) *DeleteManyUsersUnknownErrorResponseBody {
	body := &DeleteManyUsersUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewNewPasswordUnknownErrorResponseBody builds the HTTP response body from
// the result of the "newPassword" endpoint of the "boUsers" service.
func NewNewPasswordUnknownErrorResponseBody(res *bousers.UnknownError) *NewPasswordUnknownErrorResponseBody {
	body := &NewPasswordUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetAllusersPayload builds a boUsers service getAllusers endpoint payload.
func NewGetAllusersPayload(offset int32, limit int32, field string, direction string, oauth *string, jwtToken *string) *bousers.GetAllusersPayload {
	v := &bousers.GetAllusersPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Field = field
	v.Direction = direction
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteUserPayload builds a boUsers service deleteUser endpoint payload.
func NewDeleteUserPayload(id string, oauth *string, jwtToken *string) *bousers.DeleteUserPayload {
	v := &bousers.DeleteUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewCreateUserPayload builds a boUsers service createUser endpoint payload.
func NewCreateUserPayload(body *CreateUserRequestBody, oauth *string, jwtToken *string) *bousers.CreateUserPayload {
	v := &bousers.CreateUserPayload{
		Firstname:       *body.Firstname,
		Lastname:        *body.Lastname,
		Email:           *body.Email,
		Password:        *body.Password,
		ConfirmPassword: *body.ConfirmPassword,
	}
	if body.Birthday != nil {
		v.Birthday = *body.Birthday
	}
	if body.Phone != nil {
		v.Phone = *body.Phone
	}
	if body.Role != nil {
		v.Role = *body.Role
	}
	if body.Birthday == nil {
		v.Birthday = ""
	}
	if body.Phone == nil {
		v.Phone = ""
	}
	if body.Role == nil {
		v.Role = "user"
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewUpdateUserPayload builds a boUsers service updateUser endpoint payload.
func NewUpdateUserPayload(body *UpdateUserRequestBody, id string, oauth *string, jwtToken *string) *bousers.UpdateUserPayload {
	v := &bousers.UpdateUserPayload{}
	v.User = unmarshalPayloadUserRequestBodyToBousersPayloadUser(body.User)
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetUserPayload builds a boUsers service getUser endpoint payload.
func NewGetUserPayload(id string, oauth *string, jwtToken *string) *bousers.GetUserPayload {
	v := &bousers.GetUserPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteManyUsersPayload builds a boUsers service deleteManyUsers endpoint
// payload.
func NewDeleteManyUsersPayload(body *DeleteManyUsersRequestBody, oauth *string, jwtToken *string) *bousers.DeleteManyUsersPayload {
	v := &bousers.DeleteManyUsersPayload{}
	v.Tab = make([]string, len(body.Tab))
	for i, val := range body.Tab {
		v.Tab[i] = val
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewNewPasswordPayload builds a boUsers service newPassword endpoint payload.
func NewNewPasswordPayload(body *NewPasswordRequestBody, id string, oauth *string, jwtToken *string) *bousers.NewPasswordPayload {
	v := &bousers.NewPasswordPayload{
		Password: *body.Password,
		Confirm:  *body.Confirm,
	}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.ConfirmPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirm_password", "body"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 3, true))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 3, true))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Role != nil {
		if !(*body.Role == "user" || *body.Role == "pro" || *body.Role == "admin") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", *body.Role, []interface{}{"user", "pro", "admin"}))
		}
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "\\d"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.ConfirmPassword != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm_password", *body.ConfirmPassword, "\\d"))
	}
	if body.ConfirmPassword != nil {
		if utf8.RuneCountInString(*body.ConfirmPassword) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm_password", *body.ConfirmPassword, utf8.RuneCountInString(*body.ConfirmPassword), 8, true))
		}
	}
	return
}

// ValidateUpdateUserRequestBody runs the validations defined on
// UpdateUserRequestBody
func ValidateUpdateUserRequestBody(body *UpdateUserRequestBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("User", "body"))
	}
	if body.User != nil {
		if err2 := ValidatePayloadUserRequestBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDeleteManyUsersRequestBody runs the validations defined on
// DeleteManyUsersRequestBody
func ValidateDeleteManyUsersRequestBody(body *DeleteManyUsersRequestBody) (err error) {
	if body.Tab == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tab", "body"))
	}
	return
}

// ValidateNewPasswordRequestBody runs the validations defined on
// NewPasswordRequestBody
func ValidateNewPasswordRequestBody(body *NewPasswordRequestBody) (err error) {
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Confirm == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("confirm", "body"))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.password", *body.Password, "\\d"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.Confirm != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.confirm", *body.Confirm, "\\d"))
	}
	if body.Confirm != nil {
		if utf8.RuneCountInString(*body.Confirm) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.confirm", *body.Confirm, utf8.RuneCountInString(*body.Confirm), 8, true))
		}
	}
	return
}

// ValidatePayloadUserRequestBody runs the validations defined on
// payloadUserRequestBody
func ValidatePayloadUserRequestBody(body *PayloadUserRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 3, true))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 3, true))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Role != nil {
		if !(*body.Role == "user" || *body.Role == "pro" || *body.Role == "admin") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", *body.Role, []interface{}{"user", "pro", "admin"}))
		}
	}
	return
}
