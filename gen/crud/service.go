// Code generated by goa v3.5.2, DO NOT EDIT.
//
// crud service
//
// Command:
// $ goa gen api_crud/design

package crud

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The principe of CRUD API with GET, PUT, POST, DELETE
type Service interface {
	// Get one item
	GetBook(context.Context, *GetBookPayload) (res *GetBookResult, err error)
	// Update one item
	UpdateBook(context.Context, *UpdateBookPayload) (res *UpdateBookResult, err error)
	// Read All items
	GetAllBooks(context.Context) (res *GetAllBooksResult, err error)
	// Delete one item by ID
	DeleteBook(context.Context, *DeleteBookPayload) (res *DeleteBookResult, err error)
	// Create one item
	CreateBook(context.Context, *CreateBookPayload) (res *CreateBookResult, err error)
	// oAuth
	OAuth(context.Context, *OAuthPayload) (res *OAuthResponse, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "crud"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"getBook", "updateBook", "getAllBooks", "deleteBook", "createBook", "oAuth"}

// GetBookPayload is the payload type of the crud service getBook method.
type GetBookPayload struct {
	ID string
	// JWT used for authentication
	JWTToken *string
}

// GetBookResult is the result type of the crud service getBook method.
type GetBookResult struct {
	ID      string
	Name    string
	Price   float64
	Success bool
}

// UpdateBookPayload is the payload type of the crud service updateBook method.
type UpdateBookPayload struct {
	ID    string
	Name  string
	Price float64
}

// UpdateBookResult is the result type of the crud service updateBook method.
type UpdateBookResult struct {
	ID      string
	Name    string
	Price   float64
	Success bool
}

// GetAllBooksResult is the result type of the crud service getAllBooks method.
type GetAllBooksResult struct {
	Books   []*BookResponse
	Success bool
}

// DeleteBookPayload is the payload type of the crud service deleteBook method.
type DeleteBookPayload struct {
	ID string
}

// DeleteBookResult is the result type of the crud service deleteBook method.
type DeleteBookResult struct {
	Success bool
}

// CreateBookPayload is the payload type of the crud service createBook method.
type CreateBookPayload struct {
	Name  string
	Price float64
}

// CreateBookResult is the result type of the crud service createBook method.
type CreateBookResult struct {
	Book    *BookResponse
	Success bool
}

// OAuthPayload is the payload type of the crud service oAuth method.
type OAuthPayload struct {
	GrantType    string
	ClientID     string
	ClientSecret string
}

// OAuthResponse is the result type of the crud service oAuth method.
type OAuthResponse struct {
	AccessToken *string
	TokenType   *string
	ExpiresIn   *int64
	Success     *bool
}

type BookResponse struct {
	ID    string
	Name  string
	Price float64
}

// Identifiers are invalid
type Unauthorized string

// IdDoesntExist is the error returned when 0 book have the id corresponding
type IDDoesntExist struct {
	// Returning error
	Err     string
	ID      string
	Success bool
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Token scopes are invalid
type InvalidScopes string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Identifiers are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e *IDDoesntExist) Error() string {
	return "IdDoesntExist is the error returned when 0 book have the id corresponding"
}

// ErrorName returns "IdDoesntExist".
func (e *IDDoesntExist) ErrorName() string {
	return "id_doesnt_exist"
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
func (e *UnknownError) ErrorName() string {
	return "unknown_error"
}

// Error returns an error description.
func (e InvalidScopes) Error() string {
	return "Token scopes are invalid"
}

// ErrorName returns "invalid_scopes".
func (e InvalidScopes) ErrorName() string {
	return "invalid_scopes"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Timeout: true,
	}
}
