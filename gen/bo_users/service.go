// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boUsers service
//
// Command:
// $ goa gen api_crud/design

package bousers

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// users of the api
type Service interface {
	// Get All users
	GetAllusers(context.Context, *GetAllusersPayload) (res *GetAllusersResult, err error)
	// Delete one User by ID
	DeleteUser(context.Context, *DeleteUserPayload) (res *DeleteUserResult, err error)
	// Create one User
	CreateUser(context.Context, *CreateUserPayload) (res *CreateUserResult, err error)
	// Update one User
	UpdateUser(context.Context, *UpdateUserPayload) (res *UpdateUserResult, err error)
	// Get one User
	GetUser(context.Context, *GetUserPayload) (res *GetUserResult, err error)
	// Delete many users with IDs send in body
	DeleteManyUsers(context.Context, *DeleteManyUsersPayload) (res *DeleteManyUsersResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "boUsers"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"getAllusers", "deleteUser", "createUser", "updateUser", "getUser", "deleteManyUsers"}

// GetAllusersPayload is the payload type of the boUsers service getAllusers
// method.
type GetAllusersPayload struct {
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetAllusersResult is the result type of the boUsers service getAllusers
// method.
type GetAllusersResult struct {
	// All users by category
	Users   []*ResBoUser
	Success bool
}

// DeleteUserPayload is the payload type of the boUsers service deleteUser
// method.
type DeleteUserPayload struct {
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteUserResult is the result type of the boUsers service deleteUser method.
type DeleteUserResult struct {
	Success bool
}

// CreateUserPayload is the payload type of the boUsers service createUser
// method.
type CreateUserPayload struct {
	Firstname string
	Lastname  string
	Email     string
	Birthday  string
	Phone     string
	Role      string
	// Minimum 8 charactères / Chiffre Obligatoire
	Password string
	// Minimum 8 charactères / Chiffre Obligatoire
	ConfirmPassword string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// CreateUserResult is the result type of the boUsers service createUser method.
type CreateUserResult struct {
	// Result is an object
	User    *ResBoUser
	Success bool
}

// UpdateUserPayload is the payload type of the boUsers service updateUser
// method.
type UpdateUserPayload struct {
	ID   string
	User *PayloadUser
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// UpdateUserResult is the result type of the boUsers service updateUser method.
type UpdateUserResult struct {
	// Result is an Object
	User    *ResBoUser
	Success bool
}

// GetUserPayload is the payload type of the boUsers service getUser method.
type GetUserPayload struct {
	// Unique ID of the User
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetUserResult is the result type of the boUsers service getUser method.
type GetUserResult struct {
	// Result is an object
	User    *ResBoUser
	Success bool
}

// DeleteManyUsersPayload is the payload type of the boUsers service
// deleteManyUsers method.
type DeleteManyUsersPayload struct {
	Tab []string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteManyUsersResult is the result type of the boUsers service
// deleteManyUsers method.
type DeleteManyUsersResult struct {
	Success bool
}

type ResBoUser struct {
	ID        string
	Firstname *string
	Lastname  *string
	Email     string
	Birthday  string
	Phone     string
	Role      string
}

type PayloadUser struct {
	Firstname string
	Lastname  string
	Email     string
	Birthday  string
	Role      string
	Phone     string
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
func (e *UnknownError) ErrorName() string {
	return "unknown_error"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Timeout: true,
	}
}
