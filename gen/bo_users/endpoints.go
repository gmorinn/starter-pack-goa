// Code generated by goa v3.5.2, DO NOT EDIT.
//
// boUsers endpoints
//
// Command:
// $ goa gen api_crud/design

package bousers

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "boUsers" service endpoints.
type Endpoints struct {
	GetAllusers     goa.Endpoint
	DeleteUser      goa.Endpoint
	CreateUser      goa.Endpoint
	UpdateUser      goa.Endpoint
	GetUser         goa.Endpoint
	DeleteManyUsers goa.Endpoint
	NewPassword     goa.Endpoint
}

// NewEndpoints wraps the methods of the "boUsers" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetAllusers:     NewGetAllusersEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		DeleteUser:      NewDeleteUserEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		CreateUser:      NewCreateUserEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		UpdateUser:      NewUpdateUserEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		GetUser:         NewGetUserEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		DeleteManyUsers: NewDeleteManyUsersEndpoint(s, a.OAuth2Auth, a.JWTAuth),
		NewPassword:     NewNewPasswordEndpoint(s, a.OAuth2Auth, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "boUsers" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetAllusers = m(e.GetAllusers)
	e.DeleteUser = m(e.DeleteUser)
	e.CreateUser = m(e.CreateUser)
	e.UpdateUser = m(e.UpdateUser)
	e.GetUser = m(e.GetUser)
	e.DeleteManyUsers = m(e.DeleteManyUsers)
	e.NewPassword = m(e.NewPassword)
}

// NewGetAllusersEndpoint returns an endpoint function that calls the method
// "getAllusers" of service "boUsers".
func NewGetAllusersEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetAllusersPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.GetAllusers(ctx, p)
	}
}

// NewDeleteUserEndpoint returns an endpoint function that calls the method
// "deleteUser" of service "boUsers".
func NewDeleteUserEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteUserPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.DeleteUser(ctx, p)
	}
}

// NewCreateUserEndpoint returns an endpoint function that calls the method
// "createUser" of service "boUsers".
func NewCreateUserEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateUserPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.CreateUser(ctx, p)
	}
}

// NewUpdateUserEndpoint returns an endpoint function that calls the method
// "updateUser" of service "boUsers".
func NewUpdateUserEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateUserPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.UpdateUser(ctx, p)
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method
// "getUser" of service "boUsers".
func NewGetUserEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.GetUser(ctx, p)
	}
}

// NewDeleteManyUsersEndpoint returns an endpoint function that calls the
// method "deleteManyUsers" of service "boUsers".
func NewDeleteManyUsersEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteManyUsersPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.DeleteManyUsers(ctx, p)
	}
}

// NewNewPasswordEndpoint returns an endpoint function that calls the method
// "newPassword" of service "boUsers".
func NewNewPasswordEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*NewPasswordPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err == nil {
			sc := security.JWTScheme{
				Name:           "jwt",
				Scopes:         []string{"api:read", "api:write"},
				RequiredScopes: []string{},
			}
			var token string
			if p.JWTToken != nil {
				token = *p.JWTToken
			}
			ctx, err = authJWTFn(ctx, token, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.NewPassword(ctx, p)
	}
}
