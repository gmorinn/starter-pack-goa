// Code generated by goa v3.5.2, DO NOT EDIT.
//
// auth client
//
// Command:
// $ goa gen api_crud/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "auth" service client.
type Client struct {
	EmailExistEndpoint       goa.Endpoint
	SendConfirmationEndpoint goa.Endpoint
	ResetPasswordEndpoint    goa.Endpoint
}

// NewClient initializes a "auth" service client given the endpoints.
func NewClient(emailExist, sendConfirmation, resetPassword goa.Endpoint) *Client {
	return &Client{
		EmailExistEndpoint:       emailExist,
		SendConfirmationEndpoint: sendConfirmation,
		ResetPasswordEndpoint:    resetPassword,
	}
}

// EmailExist calls the "email-exist" endpoint of the "auth" service.
func (c *Client) EmailExist(ctx context.Context, p *EmailExistPayload) (res *EmailExistResult, err error) {
	var ires interface{}
	ires, err = c.EmailExistEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EmailExistResult), nil
}

// SendConfirmation calls the "send-confirmation" endpoint of the "auth"
// service.
func (c *Client) SendConfirmation(ctx context.Context, p *SendConfirmationPayload) (res *SendConfirmationResult, err error) {
	var ires interface{}
	ires, err = c.SendConfirmationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SendConfirmationResult), nil
}

// ResetPassword calls the "reset-password" endpoint of the "auth" service.
func (c *Client) ResetPassword(ctx context.Context, p *ResetPasswordPayload) (res *ResetPasswordResult, err error) {
	var ires interface{}
	ires, err = c.ResetPasswordEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ResetPasswordResult), nil
}
