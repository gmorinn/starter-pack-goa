// Code generated by goa v3.10.2, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen starter-pack-goa/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	EmailExist       goa.Endpoint
	SendConfirmation goa.Endpoint
	ResetPassword    goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		EmailExist:       NewEmailExistEndpoint(s, a.OAuth2Auth),
		SendConfirmation: NewSendConfirmationEndpoint(s, a.OAuth2Auth),
		ResetPassword:    NewResetPasswordEndpoint(s, a.OAuth2Auth),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.EmailExist = m(e.EmailExist)
	e.SendConfirmation = m(e.SendConfirmation)
	e.ResetPassword = m(e.ResetPassword)
}

// NewEmailExistEndpoint returns an endpoint function that calls the method
// "email-exist" of service "auth".
func NewEmailExistEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*EmailExistPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.EmailExist(ctx, p)
	}
}

// NewSendConfirmationEndpoint returns an endpoint function that calls the
// method "send-confirmation" of service "auth".
func NewSendConfirmationEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SendConfirmationPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.SendConfirmation(ctx, p)
	}
}

// NewResetPasswordEndpoint returns an endpoint function that calls the method
// "reset-password" of service "auth".
func NewResetPasswordEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ResetPasswordPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ResetPassword(ctx, p)
	}
}
